{
    "title": "KnowLA: Enhancing Parameter-efficient Finetuning with Knowledgeable Adaptation",
    "abstract": "Parameter-efficient finetuning (PEFT) is a key technique for adapting large language models (LLMs) to downstream tasks.\nIn this paper, we study leveraging knowledge graph embeddings to improve the effectiveness of PEFT.\nWe propose a knowledgeable adaptation method called KnowLA.\nIt inserts an adaptation layer into an LLM to integrate the embeddings of entities appearing in the input text.\nThe adaptation layer is trained in combination with LoRA on instruction data.\nExperiments on six benchmarks with two popular LLMs and three knowledge graphs demonstrate the effectiveness and robustness of KnowLA.\nWe show that KnowLA can help activate the relevant parameterized knowledge in an LLM to answer a question without changing its parameters or input prompts.",
    "sections": [
        {
            "section_id": "1",
            "parent_section_id": null,
            "section_name": "Introduction",
            "text": "In the era of large language models (LLMs) with billions and possibly trillions of parameters Du et al. (2022  ###reference_b8###); OpenAI (2023  ###reference_b27###); Touvron et al. (2023a  ###reference_b43###), parameter-efficient finetuning (PEFT) stands out as a crucial technique enabling the necessary adaptation of LLMs to downstream tasks.\nIt freezes most or even all parameters of LLMs and only finetunes a small number of parameters using limited instruction data.\nLoRA Hu et al. (2022  ###reference_b11###) is a widely-used PEFT method that trains small low-rank adapters to approximate the large layers in LLMs.\nFollow-up work improves the efficiency of LoRA by using quantized weights Dettmers et al. (2023  ###reference_b6###).\nIn this work, we seek to improve the effectiveness of LoRA while preserving comparable efficiency.\nInspired by knowledge-injected pre-trained language models (PLMs), e.g., ERNIE Zhang et al. (2019  ###reference_b55###),\nwe explore knowledge graphs (KGs) to enhance the PEFT of LLMs with LoRA.\nA KG is a large-scale structured knowledge base containing a massive amount of trustworthy knowledge.\nThe typical way of injecting KGs into PLMs in the past few years is incorporating pre-trained entity embeddings at the input layer of a PLM and finetuning the full model on NLP tasks  Lauscher et al. (2019  ###reference_b15###); Peters et al. (2019  ###reference_b28###); Yang et al. (2019  ###reference_b50###); Zhang et al. (2019  ###reference_b55###); Levine et al. (2020  ###reference_b16###); Liu et al. (2021  ###reference_b22###); Lu et al. (2021  ###reference_b23###); Wang et al. (2022  ###reference_b49###).\nKnowledge injection has improved many PLMs, e.g., BERT Devlin et al. (2019  ###reference_b7###) and RoBERTa Zhuang et al. (2021  ###reference_b56###).\nHowever, previous knowledge injection methods require fully tuning PLMs, which is inapplicable to LLMs.\nFurthermore, these methods are founded on the encoder-based architecture of PLMs, and their effectiveness for recent decoder-based LLMs remains unknown.\nThe following questions thereby arise: Can knowledge injection still enhance the PEFT of LLMs? Also, how can knowledge injection be used to enhance PEFT?\nTo answer these questions, in this paper, we propose a knowledgeable adaptation method for PEFT, particularly for LoRA, called KnowLA.\nIt inserts an adaptation layer into a pre-trained LLM.\nThe layer integrates external KG embeddings of entities appearing in the input text of the LLM.\nEntity embeddings and parameters of the LLM are frozen in PEFT.\nThe proposed adaptation layer is trained combined with LoRA on instruction data.\nThe parameters in our adaptation layer are significantly fewer than those in the LLM and even fewer than those in LoRA.\nThus, our KnowLA is also a parameter-efficient method without changing the original parameters of the LLM.\nWe evaluate KnowLA on six datasets, including commonsense reasoning on CommonsenseQA Talmor et al. (2019  ###reference_b40###), social interaction reasoning on SIQA Sap et al. (2019  ###reference_b29###) and BIG-Bench Hard Suzgun et al. (2023  ###reference_b39###), single-hop reasoning of KBQA on WebQuestionSP Yih et al. (2016  ###reference_b51###), and close-book QA on TriviaQA Joshi et al. (2017  ###reference_b14###) and TruthfulQA Lin et al. (2022  ###reference_b19###).\nExperimental results show that KnowLA can enhance the effectiveness of LoRA at the expense of a limited number of additional parameters.\nEven when compared to Alpaca2 Taori et al. (2023  ###reference_b42###), which has a larger LoRA with a similar number of parameters, KnowLA with a smaller LoRA achieves better results.\nWe assess the robustness of KnowLA with two popular foundation models (i.e., LLaMA 1 Touvron et al. (2023a  ###reference_b43###) and Llama 2 Touvron et al. (2023b  ###reference_b44###)), different instruction data (i.e., instruction-following demonstrations in Alpaca2 and Vicuna2 Chiang et al. (2023  ###reference_b4###)), various KGs (i.e., WordNet Miller (1995  ###reference_b25###), ConceptNet Speer et al. (2017  ###reference_b34###), and Wikidata Vrandecic and Krötzsch (2014  ###reference_b45###)), and typical embedding learning models (i.e., RESCAL Nickel et al. (2011  ###reference_b26###), TransE Bordes et al. (2013  ###reference_b2###), and RotatE Sun et al. (2019  ###reference_b38###)), combined with two PEFT methods (i.e., LoRA Hu et al. (2022  ###reference_b11###) and AdaLoRA Zhang et al. (2023  ###reference_b54###)).\nExperiments show that KnowLA can offer stable improvements.\nTo understand how KnowLA changes the output of an LLM, we analyze the results from two perspectives, which show several interesting findings:\n(i) KnowLA with LoRA can align the space of the LLM with the space of KG embeddings, and\n(ii) KnowLA can activate the parameterized potential knowledge that originally exists in the LLM, even though the used KG does not contain such knowledge.\nAccording to our findings, in some cases, the LLM outputs incorrect answers not because it does not know the answers, but because its relevant knowledge is not activated by the input prompts.\nKnowLA can help activate its relevant knowledge without changing its parameters or input prompts."
        },
        {
            "section_id": "2",
            "parent_section_id": null,
            "section_name": "Related Work",
            "text": ""
        },
        {
            "section_id": "2.2",
            "parent_section_id": "2",
            "section_name": "Parameter-efficient Finetuning",
            "text": "PEFT methods aim to optimize LLMs while minimizing the computational resources and data required.\nAdapter Tuning Houlsby et al. (2019  ###reference_b10###) is a lightweight alternative that inserts a small neural module called adapter in each layer of a PLM while keeping the majority of the pre-trained parameters frozen.\nInspired by the prompt engineering methods, Prefix Tuning Li and Liang (2021  ###reference_b17###) sets trainable prefix tokens in the input or hidden layers, and only these soft prompts are trained.\nLoRA Hu et al. (2022  ###reference_b11###) is a low-rank adaptive method that allows training dense layers indirectly by optimizing low-rank factorized matrices that capture changes in dense layers during the adaptation process while keeping the pre-trained weights unchanged.\nQLoRA Dettmers et al. (2023  ###reference_b6###) improves LoRA by using NF4 quantization and double quantization techniques.\nAdalora Zhang et al. (2023  ###reference_b54###) is an improvement on LoRA, addressing the limitation of the fixed incremental matrix rank in LoRA.\nAdalora introduces a method that dynamically allocates ranks for downstream tasks, yielding promising results.\nOur KnowLA follows the mainstream research of LLMs and achieves PEFT with fewer parameters combined with LoRA.\nDuring the finetuning process, the parameters of LLMs and entity embeddings are fixed, allowing only gradient backpropagation through the parameters of adapters.\nThis enables the use of external knowledge to unleash the potential of LLMs."
        },
        {
            "section_id": "3",
            "parent_section_id": null,
            "section_name": "KnowLA",
            "text": "Considering that the hidden states in Transformer layers encapsulate the parameterized knowledge of an LLM Li et al. (2023  ###reference_b18###),\nwe propose fusing entity embeddings in a KG with the hidden states of an LLM during PEFT.\nKnowLA inserts an adaptation layer into an LLM, as shown in Figure 1  ###reference_###.\nGiven a KG, we adopt a representation learning model, e.g., TransE Bordes et al. (2013  ###reference_b2###), to train its entity embeddings.\nThe pre-trained embedding of entity  is denoted by .\nFor an input question  to an LLM, each token  may be linked to a set of entities  in the KG.\nOur key idea is to enhance PEFT by injecting the embedding  for each  into the representation in the LLM.\nThis method can be divided into three modules:\n(i) Entity linking, which links the tokens in a question to entities in the KG.\n(ii) Knowledge mapping and injection, which maps the KG embedding space to the LLM’s representation space and infuses the entity embeddings corresponding to a specific token in the question.\n(iii) Knowledge fusion, which integrates each token representation with its entity embedding.\nGiven the powerful abilities, popularity, and open-source nature of the LLaMA family Touvron et al. (2023a  ###reference_b43###, b  ###reference_b44###), we consider it the foundation to build our KnowLA."
        },
        {
            "section_id": "3.1",
            "parent_section_id": "3",
            "section_name": "Entity Linking",
            "text": "Given an input text, we return its synsets as candidate entities in a KG.\nWe use the text-rank algorithm to recognize important tokens and link the recognized tokens to the KG by string matching.\nWe also collect a set of synonyms for each related entity.\nBased on the byte pair encoding (BPE) algorithm Sennrich et al. (2016  ###reference_b30###), each token is divided into multiple subwords sharing the same entity candidate.\nAfter this step, we obtain relevant entities in the KG for the important tokens in the text.\nEach entity is associated with a pre-trained embedding."
        },
        {
            "section_id": "3.2",
            "parent_section_id": "3",
            "section_name": "LLM Encoding",
            "text": "Given an LLM, e.g., Llama 2, it first encodes the input text to get embeddings for prompts and questions.\nSpecifically, for a prompt , the LLM first converts it into  = .\nThe decoder of the LLM tokenizes  with the BPE algorithm.\nAfter tokenization,  turns into , which is taken as input to the LLM."
        },
        {
            "section_id": "3.3",
            "parent_section_id": "3",
            "section_name": "Knowledge Mapping and Injection",
            "text": "The text representation of the -th decoder layer in the LLM is denoted by .\nIn the knowledge mapping module, to align with the pre-norm mode adopted by the decoder and mitigate the issues of gradient vanishing or exploding, we apply RMSNorm Zhang and Sennrich (2019  ###reference_b53###) to the input  received by the decoder.\nWe also map the semantic space of entity embeddings to the semantic space of the LLM for transformation, aiming to improve knowledge injection and fusion.\nThe BPE encoding method employed by many LLMs would let each token have multiple sub-tokens after encoding.\nLet  denote the sub-token embeddings, where  is the number.\nTo better calculate the relevance between different entities and the given word, we unify the representations of the  sub-tokens as  using mean pooling:\nAs LLMs are employed for handling complex natural language tasks, it is essential to have input dimensions sufficiently large to accommodate the intricacies.\nTo enhance the expressive ability of entity representation  and align with the semantic space of the LLM, we expand its dimension to enrich the representation of :\nwhere , , and  are trainable weights.\nSwiGLU Shazeer (2020  ###reference_b31###) is an activation function."
        },
        {
            "section_id": "3.4",
            "parent_section_id": "3",
            "section_name": "Knowledge Fusion",
            "text": "To mitigate the risk of the LLM encountering unfamiliar entities during finetuning in downstream tasks, as well as to ensure the extracted entities are relevant to the input tokens, we follow Yang et al. (2019  ###reference_b50###) and introduce a knowledge sentinel .\nFirst, we calculate the similarities of each token with its relevant entities and the knowledge sentinel:\nwhere  represents the relevance between the -th token and the -th entity.\n represents the relevance between the -th token and the knowledge sentinel.\nHere, we constrain that .\nThen, we fuse  with its relevant entities:\nwhere  serves as a trainable balancing factor to equalize the impact of KG and text.  and  are trainable weights.\nDuring knowledge fusion, all the  sub-token embeddings  share the same .\n denotes the final representation of knowledge injection and serves as the output of the current adapter, which is passed as input to the next layer of the decoder.\nSimilar to other parameter-efficient modules like LoRA Hu et al. (2022  ###reference_b11###), KnowLA achieves the alignment between KG knowledge and textual semantics by freezing the LLM during finetuning.\nIt can also be used in conjunction with LoRA to achieve efficient learning of the LLM with a limited number of parameters.\nThe effectiveness of this module is shortly assessed in the experiments."
        },
        {
            "section_id": "4",
            "parent_section_id": null,
            "section_name": "Experiments",
            "text": "Our KnowLA incorporates pre-trained KG embeddings into a pre-trained LLM for instruction tuning with LoRA.\nWe hereby investigate whether the two heterogeneous representation spaces of the KG and the LLM are aligned, to understand how KnowLA works.\nThe results are illustrated in Figure 3  ###reference_###, where the last column represents the “sentinel” entity.\nWe first acquire the representations of the input tokens in a specific layer, e.g., the 32nd layer.\nThen, we retrieve the top five similar entity embeddings in the KG for each token.\nNext, to establish the relevance of each token and its corresponding entities, we calculate the attention weights between them. A larger weight suggests a stronger semantic correlation between the token and the mapped entity.\nIn the case of Llama 2 (depicted in the left part of Figure 3  ###reference_###), the similarities between entity embeddings and token representations appear to be random, lacking any discernible patterns.\nHowever, after applying KnowLA,\nthe results show improved accuracy specifically for the most relevant entities (i.e.,  on the x-axis).\nFor token “underrated”, the relevant entities in ConceptNet are “underrated”, “underrate”, etc.\nAfter finetuning, the token “underrated” exhibits the highest correlation with the entity “underrated”.\nThis observation indicates that KnowLA can effectively align the KG and the LLM through instruction tuning with LoRA.\n###figure_2### We study the role of KnowLA in activating an LLM’s knowledge.\nAccording to Li et al. (2023  ###reference_b18###); Geva et al. (2021  ###reference_b9###); Meng et al. (2022  ###reference_b24###), the feed-forward network (FFN) layers, which constitute two-thirds of an LLM’s parameters, primarily capture its own knowledge.\nSo, we explore the impact of KnowLA on the FFN layers to see how KnowLA affects these layers in activating knowledge stored in the LLM.\n###figure_3### We compute the differences between the hidden state representations of the last token before and after each FFN layer in the LLM.\nWe analyze the trends in differences of all 32 layers after inserting KnowLA.\nWe use the 100 questions from TriviaQA as queries to explore the knowledge stored in the FFN layers of Llama 2 (7B).\nThe last token representation in each input aggregates information from all tokens.\nAccording to Li et al. (2023  ###reference_b18###), there is a positive correlation between the similarity of hidden states and the consistency of knowledge.\nIntuitively, we believe that higher differences in representations indicate the model’s ability to capture more information from the FFN layers.\nTherefore, we extract the representations of the last token before and after each FFN layer and compute the cosine similarities for Llama 2, KnowLA, and Alpaca2, which are denoted by , , and , respectively.\nGiven the token similarities, we further evaluate the capacities of KnowLA and Llama 2 in capturing hidden knowledge.\nThe capacities are measured by  and .\nThe results are shown in Figure 4  ###reference_###.\nThe red color indicates that the representation of the last token, after introducing KnowLA and undergoing the FFN layers, exhibits a greater change compared to that of Alpaca2.\nThe blue color shows the opposite.\nWe think the representations with greater changes capture more internal knowledge.\nAfter introducing entity embeddings, KnowLA enables the LLM to activate richer knowledge at the FFN layers.\nIn contrast, Llama 2 captures less knowledge than Alpaca2.\nAccording to the work Geva et al. (2021  ###reference_b9###), lower FFN layers tend to capture shallow knowledge patterns, while higher FFN layers learn more semantic patterns.\nOur KnowLA demonstrates enhanced knowledge activation capabilities at the higher layers,\nand thus achieves superior results over Alpaca2.\nBy examining the differences in similarity across the last 16 layers, we find that KnowLA (ConceptNet) shows the greatest similarity difference in the three KGs and performs best on TriviaQA.\nThis further emphasizes that the introduction of ConceptNet substantially activates more knowledge stored internally in Llama 2."
        },
        {
            "section_id": "4.1",
            "parent_section_id": "4",
            "section_name": "Baselines and Implementation",
            "text": "We consider the following LLMs with 7B parameters as foundation models in our main experiments:\nLlama 2 is a collection of open-source LLMs trained on public datasets with trillions of tokens.\nWe use the Llama 2-7B model.\nAlpaca2 Taori et al. (2023  ###reference_b42###) is a Llama 2 variant finetuned with 52,000 instruction-following demonstrations using LoRA.\nGiven that there are currently no knowledge injection methods for PEFT, we choose retrieval augmented generation (RAG) methods as baselines:\nContriever Izacard et al. (2022  ###reference_b13###) is pre-trained using English Wikipedia.\nWe use it to retrieve triples from KGs and passages from Wikipedia to augment the input of the LLM.\nKAPING Baek et al. (2023  ###reference_b1###) retrieves relevant triples from KGs to improve the KBQA task.\nWe use KAPING to enhance LLMs on knowledge-relevant tasks.\nIn our main experiments, we use the official hyperparameters and instruction data of Alpaca2 to finetune Llama 2-7B with LoRA and KnowLA.\nOur layer is inserted after the 32nd layer of Llama 2.\nWe also consider LLaMA 1 and the instruction data of Vicuna2 Chiang et al. (2023  ###reference_b4###) in Sect. (4.10  ###reference_0###).\nDuring the training process, we set the batch size to 128 and the learning rate to 3e-4, and use the AdamW optimizer to train 3 epochs.\nWe keep the hyperparameters the same for different models to ensure the fairness of the experiment.\nWe also keep the input prompts the same in the experiments.\nTo study the impact of the number of trainable parameters, we train two LoRA models with different ranks:  and .\nThey both perform better than ranks  on most datasets.\nAll models are finetuned on A800 GPUs.\nThe code is publicly available at our GitHub repository.111https://github.com/nju-websoft/KnowLA  ###reference_###"
        },
        {
            "section_id": "4.2",
            "parent_section_id": "4",
            "section_name": "Datasets and Settings",
            "text": "We consider three types of tasks: multi-choice QA, closed-book QA, and truthful QA.\nWe pick CommonsenseQA Talmor et al. (2019  ###reference_b40###) and SIQA Sap et al. (2019  ###reference_b29###) as the multiple-choice QA datasets, and choose 15 challenging multi-choice tasks from BIG-Bench Hard (BBH) Suzgun et al. (2023  ###reference_b39###).\nWe use WebQuestionSP Yih et al. (2016  ###reference_b51###) and TriviaQA Joshi et al. (2017  ###reference_b14###) for closed-book QA evaluation.\nWe also use TruthfulQA Lin et al. (2022  ###reference_b19###) to evaluate whether KnowLA is truthful in generating answers to questions.\nAppendix A  ###reference_### complements more details.\nTo assess the direct improvement of our KnowLA to enhance PEFT, we employ zero-shot settings for all tasks."
        },
        {
            "section_id": "4.3",
            "parent_section_id": "4",
            "section_name": "KGs and Configurations",
            "text": "We select WordNet Miller (1995  ###reference_b25###), ConceptNet Speer et al. (2017  ###reference_b34###), and Wikidata Vrandecic and Krötzsch (2014  ###reference_b45###) as the KGs in our method.\nSee Appendix A  ###reference_### for more descriptions.\nFor RAG methods, we consider the overlap between questions and knowledge sources.\nFor multi-choice QA, we use ConceptNet and WordNet.\nFor TriviaQA, we use Wikidata and Wikipedia.\nFor KG embeddings, we follow Zhang et al. (2019  ###reference_b55###) and pre-train entity embeddings with TransE Bordes et al. (2013  ###reference_b2###) as the external knowledge.\nThe maximum number of relevant entities selected for each textual token in a question is set to 5.\nFurthermore, we evaluate the side effects and additional latency of KnowLA. See Appendix B  ###reference_### and Appendix C  ###reference_### for more details."
        },
        {
            "section_id": "4.4",
            "parent_section_id": "4",
            "section_name": "Experiments on Multi-choice QA",
            "text": "To evaluate the effectiveness and robustness of KnowLA, we compare it to Llama 2 and Alpaca2 () on multi-choice QA.\nIn addition to accuracy, we follow Shwartz et al. (2020  ###reference_b33###) and compute scores using cross entropy, which indicate the confidence of a model for correct answers.\nWe use three KGs: WordNet, ConceptNet, and Wikidata.\nWe also consider randomly initialized vectors as a baseline of KG embeddings.\nTable 1  ###reference_### presents the results.\nOur KnowLA variants show the best performance across the three datasets.\nFurthermore, Alpaca2 () outperforms Alpaca2 (), because more trainable parameters usually lead to better performance.\nKAPING generally performs better than Contriever on CommonsenseQA.\nThis indicates that the RAG methods rely on the quality of prompts retrieved from the knowledge sources.\nBoth KAPING and Contriever are inferior to Alpaca2 () on CommonsenseQA and SIQA, as invalid prompts may cause damage to the performance.\nKnowLA is different from RAG methods.\nRAG methods retrieve text information to augment the input of LLMs, while KnowLA uses KG embeddings to improve the effectiveness of PEFT.\nKnowLA works in the finetuning phase of LLMs and does not change the input of LLMs.\nOur method with LoRA () achieves better performance than all baselines, indicating that it can effectively work with PEFT to inject knowledge.\nSpecifically, when combined with ConceptNet, it achieves an accuracy increase from  to  on CommonsenseQA, from  to  on SIQA, and from  to  on BBH.\nSince ConceptNet stores rich conceptual knowledge and more relation types compared to WordNet, its entity embeddings can better enhance Llama 2’s reasoning ability.\nFurthermore, ConceptNet recognizes more relevant entities in the question than Wikidata.\nThis suggests that extensive entity coverage in KnowLA brings a significant performance increase.\nAdditionally, the performance of KnowLA (random) is inferior to that of KnowLA with KGs, highlighting the greater utility of entity knowledge for LLMs.\nBased on the scores of each model on the correct answers, it can be seen that after incorporating KnowLA, all models assign higher confidence to the correct answers.\nTherefore, KnowLA can offer a certain degree of improvement for LLMs in commonsense reasoning.\n###figure_4###"
        },
        {
            "section_id": "4.5",
            "parent_section_id": "4",
            "section_name": "Experiments on Closed-book QA",
            "text": "We evaluate KnowLA using WebQuestionSP and TriviaQA.\nFollowing the answer matching strategy in Tan et al. (2023  ###reference_b41###), we use the subtree labels provided by the constituent tree to extract all noun phrases from the textual answers, calculate their similarities, and determine the correctness of answers exceeding a certain threshold (e.g., 0.5).\nThe accuracy results are shown in Table 2  ###reference_###.\nWe find that Alpaca2 () obtains better performance than Alpaca2 ().\nThe reason may be that more parameters in LoRA are prone to overfitting in the closed-book QA tasks.\nMoreover, Contriever (Wikipedia) only slightly exceeds Alpaca2 () and performs better than KAPING.\nThis is because KAPING cannot guarantee the correctness of the extracted triples.\nAccording to the results, KnowLA combined with WordNet improves the results from  to  on TriviaQA, while combined with ConceptNet, the performance is further enhanced to .\nThis indicates that the parameterized entity embeddings can enrich the textual representations.\nThe experimental results demonstrate that the knowledge-enhanced textual representations after finetuning with LoRA can help mitigate the hallucination problem of Llama 2 to some extent.\nOn WebQuestionSP, KnowLA (WordNet) and KnowLA (Wikidata) produce similar results.\nAlso, the two Alpaca2 models with different ranks perform similarly.\nThis suggests that the reasoning ability of Alpaca2 is good on this task, and the performance does not change significantly after knowledge enhancement with KnowLA.\nWe attribute this bottleneck to the model size and the training data of Llama 2 and Alpaca2."
        },
        {
            "section_id": "4.6",
            "parent_section_id": "4",
            "section_name": "Experiments on TruthfulQA",
            "text": "We use TruthfulQA to measure whether KnowLA is truthful in generating answers to questions.\nHere, we evaluate the content generated by the models based on the best answer provided by TruthfulQA, using the commonly used metrics BLEU, Rouge-1, Rouge-2, and Rouge-L.\nTable 3  ###reference_### shows the results.\nAlpaca2 () still underperforms Alpaca2 ().\nThis further substantiates our conclusion that larger parameters do not necessarily guarantee the accuracy and reliability of the model’s output.\nKnowLA (ConceptNet) performs best among these models, which indicates that the integration of our KnowLA with LoRA can mitigate the hallucination problem of Llama 2 to some extent and generate content of better quality.\nBesides, we observe that KnowLA (ConceptNet) outperforms KnowLA (WordNet) in all evaluation tasks, and KnowLA (WordNet), in turn, surpasses KnowLA (Wikidata).\nThis further indicates that the commonsense knowledge within ConceptNet is more suitable for both LoRA and Llama 2."
        },
        {
            "section_id": "4.7",
            "parent_section_id": "4",
            "section_name": "Case Study",
            "text": "Figure 2  ###reference_### presents some improved results of Alpaca2 by incorporating WordNet, ConceptNet, and Wikidata in KnowLA.\nIn Case 1, we discover that after integrating ConceptNet and WordNet with KnowLA, the response precisely describes the correct answers.\nThe contents generated by KnowLA (ConceptNet) and KnowLA (WordNet) are very similar.\nThe content generated by Alpaca2 not only misses significant answers but also misinterprets the song “Can’t Hold Me Down” in the question.\nTherefore, we believe that KnowLA helps the model better understand questions.\nBy examining the answers of the three models in Case 2, it can be observed that Alpaca2 does not provide an accurate and relevant response, which is similar to the content generated by KnowLA (Wikidata).\nThey both generate deceptive answers.\nHowever, after incorporating ConceptNet, KnowLA accurately provides the correct answer in the response.\nAccording to Table 2  ###reference_###, we believe that the enhancement is not accidental.\nMoreover, by examining the token-to-entity linking results, we find that the answer entity “Boojum” does not exist in ConceptNet.\nTherefore, we conclude that KnowLA can stimulate the underlying reasoning abilities of LLMs by working with LoRA."
        },
        {
            "section_id": "4.8",
            "parent_section_id": "4",
            "section_name": "Why Knowledgeable Adaptation Works?",
            "text": "We delve into why KnowLA collaborates effectively with LoRA, focusing on space alignment of KGs and LLMs, and knowledge recall in LLMs.\nOur KnowLA incorporates pre-trained KG embeddings into a pre-trained LLM for instruction tuning with LoRA.\nWe hereby investigate whether the two heterogeneous representation spaces of the KG and the LLM are aligned, to understand how KnowLA works.\nThe results are illustrated in Figure 3  ###reference_###  ###reference_###, where the last column represents the “sentinel” entity.\nWe first acquire the representations of the input tokens in a specific layer, e.g., the 32nd layer.\nThen, we retrieve the top five similar entity embeddings in the KG for each token.\nNext, to establish the relevance of each token and its corresponding entities, we calculate the attention weights between them. A larger weight suggests a stronger semantic correlation between the token and the mapped entity.\nIn the case of Llama 2 (depicted in the left part of Figure 3  ###reference_###  ###reference_###), the similarities between entity embeddings and token representations appear to be random, lacking any discernible patterns.\nHowever, after applying KnowLA,\nthe results show improved accuracy specifically for the most relevant entities (i.e.,  on the x-axis).\nFor token “underrated”, the relevant entities in ConceptNet are “underrated”, “underrate”, etc.\nAfter finetuning, the token “underrated” exhibits the highest correlation with the entity “underrated”.\nThis observation indicates that KnowLA can effectively align the KG and the LLM through instruction tuning with LoRA.\n###figure_5### We study the role of KnowLA in activating an LLM’s knowledge.\nAccording to Li et al. (2023  ###reference_b18###  ###reference_b18###); Geva et al. (2021  ###reference_b9###  ###reference_b9###); Meng et al. (2022  ###reference_b24###  ###reference_b24###), the feed-forward network (FFN) layers, which constitute two-thirds of an LLM’s parameters, primarily capture its own knowledge.\nSo, we explore the impact of KnowLA on the FFN layers to see how KnowLA affects these layers in activating knowledge stored in the LLM.\n###figure_6### We compute the differences between the hidden state representations of the last token before and after each FFN layer in the LLM.\nWe analyze the trends in differences of all 32 layers after inserting KnowLA.\nWe use the 100 questions from TriviaQA as queries to explore the knowledge stored in the FFN layers of Llama 2 (7B).\nThe last token representation in each input aggregates information from all tokens.\nAccording to Li et al. (2023  ###reference_b18###  ###reference_b18###), there is a positive correlation between the similarity of hidden states and the consistency of knowledge.\nIntuitively, we believe that higher differences in representations indicate the model’s ability to capture more information from the FFN layers.\nTherefore, we extract the representations of the last token before and after each FFN layer and compute the cosine similarities for Llama 2, KnowLA, and Alpaca2, which are denoted by , , and , respectively.\nGiven the token similarities, we further evaluate the capacities of KnowLA and Llama 2 in capturing hidden knowledge.\nThe capacities are measured by  and .\nThe results are shown in Figure 4  ###reference_###  ###reference_###.\nThe red color indicates that the representation of the last token, after introducing KnowLA and undergoing the FFN layers, exhibits a greater change compared to that of Alpaca2.\nThe blue color shows the opposite.\nWe think the representations with greater changes capture more internal knowledge.\nAfter introducing entity embeddings, KnowLA enables the LLM to activate richer knowledge at the FFN layers.\nIn contrast, Llama 2 captures less knowledge than Alpaca2.\nAccording to the work Geva et al. (2021  ###reference_b9###  ###reference_b9###), lower FFN layers tend to capture shallow knowledge patterns, while higher FFN layers learn more semantic patterns.\nOur KnowLA demonstrates enhanced knowledge activation capabilities at the higher layers,\nand thus achieves superior results over Alpaca2.\nBy examining the differences in similarity across the last 16 layers, we find that KnowLA (ConceptNet) shows the greatest similarity difference in the three KGs and performs best on TriviaQA.\nThis further emphasizes that the introduction of ConceptNet substantially activates more knowledge stored internally in Llama 2."
        },
        {
            "section_id": "4.9",
            "parent_section_id": "4",
            "section_name": "Impact of KG Embedding Models",
            "text": "The KG embedding learning models are used to learn entity embeddings Bordes et al. (2013  ###reference_b2###); Nickel et al. (2011  ###reference_b26###); Sun et al. (2019  ###reference_b38###); Chen et al. (2023  ###reference_b3###).\nWe study the impact of embedding learning models for KnowLA.\nWe obtain entity embeddings of ConceptNet by three representative KG embedding models: RESCAL Nickel et al. (2011  ###reference_b26###), TransE Bordes et al. (2013  ###reference_b2###), and RotatE Sun et al. (2019  ###reference_b38###).\nWe show the results of KnowLA with these embeddings on the CommonsenseQA, SIQA, and BBH datasets in Table 4  ###reference_###.\nWe can observe that the entity embeddings obtained by TransE achieve favorable results.\nThis is attributed to the fact that the TransE embeddings have a good generalization ability and are thus more suitable for Llama 2.\nRotatE employs complex vector representations for entities and obtains subpar results on Llama 2.\nThis suggests that aligning the complex space of entities with the semantic space of Llama 2 during finetuning is challenging, leading to a loss of original entity knowledge."
        },
        {
            "section_id": "4.1",
            "parent_section_id": "4",
            "section_name": "4.10 Robustness of KnowLA",
            "text": "We evaluate the robustness of KnowLA against three factors:\nOn the foundation model side, we use LLaMA 1 as another LLM.\nOn the instruction data side, we finetune Llama 2 using the Vicuna multi-round dialog data Chiang et al. (2023  ###reference_b4###) to get Vicuna2 and KnowLA (Vicuna2).\nOn the PEFT method side, we use AdaLoRA Zhang et al. (2023  ###reference_b54###) to replace LoRA and get Alpaca2 (AdaLoRA) and KnowLA (AdaLoRA).\nOn the rank side, we finetune Llama 2 using the Alpaca data with rank  and get Alpaca2 () and KnowLA ().\nTable 5  ###reference_### lists the performance of the above models on the commonsense reasoning dataset CommonsenseQA.\nWe can see that the three KnowLA variants still outperform all baselines.\nThis experiment shows that KnowLA is robust and can bring stable improvement when combined with different LLMs, instruction data, PEFT methods, and ranks."
        },
        {
            "section_id": "5",
            "parent_section_id": null,
            "section_name": "Conclusion",
            "text": "In this paper, we propose a knowledgeable adaptation method KnowLA.\nIt works with LoRA and injects entity embeddings into an LLM in the PEFT process.\nCompared to Alpaca2, which is finetuned with LoRA alone, KnowLA with Llama 2 shows better performance on six benchmark datasets.\nWe show that pre-trained KG embeddings are compatible with Llama 2.\nMoreover, we find that KnowLA can align the KG space and the LLM space, and activate the hidden knowledge related to input in LLMs, thereby achieving improved performance."
        }
    ]
}