{
    "title": "Mixture-of-LoRAs: An Efficient Multitask Tuning for Large Language Models",
    "abstract": "Instruction Tuning has the potential to stimulate or enhance specific capabilities of large language models (LLMs). However, achieving the right balance of data is crucial to prevent catastrophic forgetting and interference between tasks. To address these limitations and enhance training flexibility, we propose the Mixture-of-LoRAs (MoA) architecture – a novel and parameter-efficient tuning method designed for multi-task learning with LLMs.\nIn this paper, we start by individually training multiple domain-specific LoRA modules using corresponding supervised corpus data. These LoRA modules can be aligned with the expert design principles seen in Mixture-of-Experts (MoE). Subsequently, we combine the LoRAs using an explicit routing strategy and introduce domain labels to facilitate multi-task learning, which helps prevent interference between tasks and ultimately enhances the performance of each individual task. Furthermore, each LoRA model can be iteratively adapted to new domains, allowing for quick domain-specific adaptation. Experiments on diverse tasks demonstrate superior and robust performance of our approach, which will also further promote the application of domain-specific LLMs.",
    "sections": [
        {
            "section_id": "1",
            "parent_section_id": null,
            "section_name": "Introduction",
            "text": "###figure_1### Large language models (LLMs) have played a pivotal role in expediting the advancement of natural language processing (NLP), offering a versatile and task-agnostic foundation that underpins an extensive array of applications. The intrinsic diversity found in domain-specific data poses a substantial challenge in training a general-purpose base LLMs. Consequently, there has been a surge in the adoption of domain-specific LLMs to tackle intricate problems within specialized domains, such as SQL-PaLM (Sun et al., 2023  ###reference_b20###), BloombergGPT (Wu et al., 2023  ###reference_b22###), ChatLaw (Cui et al., 2023  ###reference_b2###), pdfGPT (Tripathi, 2023  ###reference_b21###). In real-world application scenarios, the demand often arises for a multitude of customized capabilities.\nLLMs with multiple customized capabilities can efficiently address a diverse range of user problems, and each specific functional module can be optimized individually.\nDomain specification techniques are key to make large language models disruptive in various applications (Zhao et al., 2023  ###reference_b26###). To learn sufficient domain knowledge and not lose basic capability, adapter-based fine-tuning methods (e.g., Adapters (Houlsby et al., 2019  ###reference_b6###), LoRA (Hu et al., 2021  ###reference_b7###)) introduce a limited number of domain-specific parameters to retain domain-related knowledge and do not need to fine-tuning all parameters of the pre-trained model, which can effectively reduce the training cost of LLMs.\nIn order to obtain multiple customized capabilities, the simplest and efficient fine-tuning approach is to directly mix data from multiple domains together and only add one LoRA module for instruction fine-tuning. The second is some two-stage approaches.\nWe first train multiple domain LoRA modules individually, and then introduce a domain classifier to select appropriate LoRA model. In addition, Pfeiffer et al. (2020  ###reference_b17###); Huang et al. (2023  ###reference_b8###) add the AdapterFusion layer and element-wise LoRA composition to implicitly fuse parameter knowledge of multiple task adapters. The MoE (Shen et al., 2023  ###reference_b19###) introduces multiple experts to process different types of input data. Jiang et al. (2023  ###reference_b9###) is to consider the outputs of ensemble LLMs comprehensively.\nHowever, these approaches have two main issues. First, in the practical application scenario, there are often multiple destructive domain tasks with heterogeneous and imbalance training data, as well as limited computing resources. Therefore, the implicit parameter fusion methods exist mutual disturbance, which results in degraded model performance on in-domain tasks, as illustrated in Figure 1  ###reference_###. We often focus more on the domain-specific expertise of a domain-specific LLM than its generalization performance.\nIn addition, the MoE mechanism needs to be trained from scratch based on a new model structure and a large amount of training corpus. The ensemble LLMs require sufficient computing resources to deploy multiple independent LLMs simultaneously.\nIn this paper, we address these limitations and propose an end-to-end parameter-efficient tuning method designed for multi-task learning on LLMs, dubbed MoA. First, we design a routing mechanism within decoder-only model architecture to automatically select LoRA experts, which can be applied to current mainstream LLMs, and can simultaneously deploy LoRA modules of multiple tasks with limited computing resources (using the same LLM). Meanwhile, our comprehensive model can still achieve excellent performance on different types of tasks.\nAdditionally, to improve the efficiency of training and inference, we implement a parallel processing strategy of different domain samples within a batch during the training process, and a LoRA expert selection approach in the inference time.\nOur approach leverages the power of different expert models and the base LLM, and the complementarity of knowledge in different domains.\nIn summary, our contributions are as follows:\nWe propose a MoA architecture for efficient multitask fine-tuning, which can avoid the interference and data imbalance between heterogeneous tasks and easily perform iterative optimization of single task.\nWe implement an explicit routing strategy in the training process, which can leverage the knowledge complementarity to further improve the single task performance and ensures the inference efficiency.\nExtensive experiments on various benchmarks are conducted to verify the effectiveness of our approach. Meanwhile, it is flexible to combine multiple domain-specific LoRAs to form a comprehensive LLM."
        },
        {
            "section_id": "2",
            "parent_section_id": null,
            "section_name": "Related Work",
            "text": "Domain Specialization of LLMs. The approaches in LLM domain specialization can be categorized into two corresponding classes of approaches: external augmentation, prompt crafting, and model fine-tuning (Zhao et al., 2023  ###reference_b26###). We focus on the third method, which involves updating the LLM’s parameters to incorporate domain-specific knowledge directly into the model. Because the current LLMs have billions of parameters and the phenomenon of catastrophic forgetting, we use adapter-based fine-tuning (e.g, Adapter, LoRA) to train multiple domain experts in advance on different task data. LoRA is a parameter-efficient fine-tuning method, which facilitates the adaptation of LLMs using a small-scale external module. As such, LoRA tuning presents a resource-efficient technique to quickly adapt LLMs for novel tasks with restricted training data.\nMixture-of-Experts. The Mixture of Experts (MoE) is an ensemble method, often visualized as a collection of sub-modules, or ’experts’, each specializing in processing different types of input data. Each expert is controlled by a router that is then selectively activated based on the type of input data. This technique achieves excellent performance in other domains, including computer vision, speech recognition and multi-modal applications (Fedus et al., 2022a  ###reference_b3###). Inspired by the idea of MoE, we regard each task’s LoRA module as a domain expert. Meanwhile, we introduce a routing algorithm to make different domain data automatically choose respective expert, and hence experts in different domains can be combined into a comprehensive model. Furthermore, Shen et al. (2023  ###reference_b19###) also demonstrates that the combination of MoE and instruction tuning can improve task-specific performance.\nMulti-Task Composition.\nThe methods of two-stage learning or end-to-end multi-task learning are commonly used to obtain the combination of multi-task capabilities.\nThe two-stage method requires maintaining a specialized routing model to serve multiple task models, whose overall performance is limited to a single LoRA model. The end-to-end methods introduce new parameter layers or perform implicit parameter fusion. Specifically, Pfeiffer et al. (2020  ###reference_b17###) trains a fusion parameter layer to compose the information stored in the multiple task adapters. Huang et al. (2023  ###reference_b8###) uses a set of learnable weights to integrate multiple LoRA modules into a unified module. Although they can obtain some generalization ability through the combination of parameters trained on various tasks, these fusion methods result in performance degradation on the original task. Zhao et al. (2023  ###reference_b26###) also shows that it is difficult to effectively learn all specialized knowledge of different domains in one LLM."
        },
        {
            "section_id": "3",
            "parent_section_id": null,
            "section_name": "Methodology",
            "text": "###figure_2### The proposed Mixture-of-LoRAs (MoA) can be observed in Figure 2  ###reference_###. Given the variations in data scales and training complexities, we commence by separately training N LoRA modules  for N distinct task types . It is worth noting that the task types mentioned here and the domain-specific data or tasks referred to in the paper have the same meaning, all representing scenario tasks that require certain expertise to solve. Initially, we obtain the optimal LoRA module parameters on each scenario task data.\nThese modules demonstrate commendable performance within their respective domains. Subsequently, a routing mechanism is employed to integrate the N LoRA modules under a shared LLM. Specifically, multiple LoRA modules are simultaneously incorporated alongside each transformer layer. Preceding each transformer layer, a routing mechanism is inserted to guide the selection of distinct LoRA experts."
        },
        {
            "section_id": "3.1",
            "parent_section_id": "3",
            "section_name": "Learning algorithm",
            "text": "In the first stage, we train a LoRA module for each of the N tasks, which mitigates the problem of catastrophic forgetting of base LLM. Different tasks often have different data scales and training difficulties. Hence, each LoRA module needs to be optimized individually. These LoRA modules can be arbitrarily combined, added, or removed after initial training. This adapter schemes could enable more fine-grained control over which parts of the LLM are domain-specific.\nIn the second stage, the N LoRA modules can be aligned with the MoE’s expert design. We combine the set of N LoRAs using a routing strategy. While keeping the base LLM parameters  fixed, we introduce router parameters  that learn to select the appropriate expert for users’ target tasks (as shown in Figure 2  ###reference_###). The trainable router and LoRA parameters are combined to jointly optimize the autoregressive language modeling tasks. The training data for this stage is evenly sampled from the original data of each task, obviating the need to acquire new, high-quality supervised data. The final loss of the MoA is the summation of the language modeling loss and the MoE routing loss:\nHere,  is a parameter that controls the weight of the routing loss and the convergence rate,  is the cross-entropy loss of expert classification, and  is defined as follows:\nIn this context, the language modeling task (LM) is the commonly used objective for pretraining decoder-only LLMs (e.g., GPT-3 (Brown et al., 2020  ###reference_b1###)). Here,  represents a sequence of tokens . The LM task involves predicting the target tokens  autoregressively, based on the preceding tokens  within the sequence.\nBy dividing the process into two stages: (1) training domain experts in LoRAs, and (2) combining diverse capabilities through a routing strategy, we effectively address concerns such as catastrophic forgetting, task interference, and instability during multi-task training."
        },
        {
            "section_id": "3.2",
            "parent_section_id": "3",
            "section_name": "Routing Strategy",
            "text": "Prior approaches (Fedus et al., 2022b  ###reference_b4###; Lepikhin et al., 2020  ###reference_b10###) on routing strategy have typically focused on learning token-level weighting functions, often assigning one or two experts per token. This approach necessitates careful load balancing to ensure utilization of all experts, prompting the exploration of explicit balancing mechanisms (Lewis et al., 2021  ###reference_b11###).\nIn contrast, we adopt a sequence-level routing strategy that leverages domain metadata to route data to LoRA experts. While all token sequences traverse the weight matrices in LLM’s transformer layers, during training, each transformer layer employs a distinct router to assign training data labeled with its corresponding domain. The final routing loss enforces precise data-to-expert assignments for each data type. After training with a modest quantity of balanced data, a robust router is obtained. Meanwhile, multi-task training enhances the generalization of the original tasks.\nThroughout the training process, language modeling and router classification tasks complement each other. However, we enhance expert selection during inference by employing techniques such as voting or selecting the last expert (as detailed in  4.4  ###reference_###). This optimization aims to enhance generation efficiency and contextual consistency."
        },
        {
            "section_id": "3.3",
            "parent_section_id": "3",
            "section_name": "MoA Architecture",
            "text": "We design an LoRA expert explicitly for each domain (i.e., eight experts for eight training domains in our multi-domain corpus). LoRA updates weights using the formula:\nwhere , ,  and .\n denotes the attention and feed-forward weight matrices of the base LLM, whose parameters are fixed. The\nparameter of router( ) is trainable.  is the parameter of the router, which is implemented by a linear layer. The  defines the LoRA module , which is repeated multiple times within each transformer layer to reduce trainable parameters for adapting to different domain tasks. The multiple  experts are placed in parallel alongside , departing from previous methods (Pfeiffer et al., 2020  ###reference_b17###; Gururangan et al., 2022  ###reference_b5###; Huang et al., 2023  ###reference_b8###) that add shared fusion layers or replace dense feedforward layers with multiple experts’ feedforward networks. The routing algorithm is a key feature in all sparse expert architectures. We adopt an intuitive method to assign different experts to handle tasks in different domains, which helps avoid interference between tasks. Each transformer layer adds a router to select the most appropriate expert. Each router is implemented as a two-layer MLP. This implementation is simple and doesn’t significantly increase the number of training parameters."
        },
        {
            "section_id": "4",
            "parent_section_id": null,
            "section_name": "Experiments",
            "text": ""
        },
        {
            "section_id": "4.1",
            "parent_section_id": "4",
            "section_name": "Experimental Setup",
            "text": "Datasets. To evaluate the effectiveness of MoA, we first conduct experiments on various supervised fine-tuning (SFT) datasets of heterogeneous domains. Finance, Medicine and Leetcode belong to the specialized domain dataset. Exam, Webgpt and Gpt4tools limit the output format of the LLM and allow the model to learn special functions. Other datasets include chain-of-thought, dialog, etc. Meanwhile, both English and Chinese are involved. We show the statistics of all datasets in Table 1  ###reference_###.\nImplementation Details. We use the Qwen-7b as our base LLM, which is the decoder-only architecture. We use the vocabulary of 151,851 BPE types, and train with 4,096-token sequences. We set the total number of training steps based on this allocated runtime, set 10% of these steps to be warmup, and use the AdamW (Loshchilov and Hutter, 2017  ###reference_b15###) optimizer with a cosine learning rate decay. Learning rate is set to . Each worker processes eight sequences of length 4,096, and gradients are accumulated over 4 updates. We clip gradients if their L2 norm exceeds 0.1. In the inference time, we report test perplexity after a single run of training on 8 NVIDIA A100 80GB GPUs."
        },
        {
            "section_id": "4.2",
            "parent_section_id": "4",
            "section_name": "Models and Metrics",
            "text": "Single-LoRA The first baseline is a LoRA trained on data within the domain, which could be viewed as a specialized model for handling domain tasks.\nSingle-LoRA (mixed) We train a single LoRA on mixed data from all domains. While there is no explicit conditioning on domain, the gradient updates during training average across all domains represented in a batch.\nMoA We add multiple domain LoRAs in the transformer based on the first baselines, and use routing strategy and domain label information for multitask training. Under the routing setting, the test data domain is unknown.\nMoE-LoRA We leverage the idea of sparsely activated Mixture-of-Experts (MoE). We add multiple domain LoRA modules on the bypass of transformer layer. Each input token will be processed by a limited subset of experts. Different from our MoA, this approach can add any number of experts and has no concept of data domain.\nMoE-LoRA (naive) The architecture of this model is exactly the same as MoE-LoRA, and the only difference is that we randomly initialize all LoRA modules.\nTo comprehensively evaluate the performance of different models, we use several evaluation metrics, including the perplexity (PPL) of generated texts, and the bilingual evaluation understudy (BLUE) and the longest common subsequence (ROUGE-L) between the generated answer and the gold answer."
        },
        {
            "section_id": "4.3",
            "parent_section_id": "4",
            "section_name": "Main results",
            "text": "Classifier+LoRAs The most intuitive method of integrating multiple LoRA experts is to use a specific classifier to act as a distributor, as shown in Figure 3  ###reference_###. We train a classifier based on roberta-base (Liu et al., 2020  ###reference_b13###) using the same training data as MoA. The specific classification performance is shown in Table 3  ###reference_###. This approach is so flexible that we can combine multiple LoRA modules and avoid interference between tasks. However, the performance of this approach is limited to each LoRA expert. From the classification results, our router performs better than the classifier overall.\n###figure_3### ###table_1### ###table_2### End-to-end methods The end-to-end methods mean that one model can directly solve multiple tasks even if the test data domain is unknown. Table 2  ###reference_### shows that test perplexities, blue-4 and rouge-l, averaged across the eight training domains. Training in the mixed domain data is helpful for the overall performance (Perplexity: 4.01283.9450, BLUE: 28.534830.5912, ROUGE-L: 37.787739.0163). However, the performance decreases on data with strict output formats such as Webgpt, Stackoverflow, which also shows that not all additional domain information is complementary. We hypothesize that separate training is advantageous for heterogeneous domains. Therefore, we design an efficient multi-task learning method to avoid interference between partial tasks. Our approach achieves significant improvements across all datasets.\n###table_3### In order to further validate the reliability of the MoA’s performance, we conducts accuracy evaluation experiments on datasets with standard answers. The Exam dataset is utilized for the experiments, as it primarily consists of secondary and university entrance exam questions, with the majority being multiple-choice questions (including single and multiple selections) and a small portion of true/false questions. Accuracy is calculated by directly comparing the answers with the reference answers. Specifically, string processing functions, regular expressions, etc., are used to parse out specific options (A/B/C/D) or judgment results (T/F) from the answers, followed by calculating the accuracy of responses. The final results are presented in Table 5  ###reference_###. Despite the overall low accuracy due to the difficulty of the questions, the accuracy of MoA is significantly higher than the other two models (+5.86%, +5.48%).\n###table_4### In addition, this subsection also introduces GPT-4 as an evaluation expert to assess Finance, Medicine, and Webgpt datasets. As the answers in these datasets do not follow a fixed pattern, this subsection adopts the common evaluation method in the community of LLMs. Evaluation scoring is conducted through a larger model. In this study, GPT-4 is utilized to provide accuracy scores for the model’s responses to questions and standard answers. The complete evaluation prompt is illustrated in Appendix A  ###reference_###.\nApart from the three models: Single-LoRA, Single-LoRA (mixed), and MoA, we also evaluates the individual LoRA modules within the MoA model. These are represented in the table 6  ###reference_### as Single-LoRA of MoA.\nDue to fluctuations in scoring by the large language model, each scoring process is invoked three times and the average is taken. From the experimental results, it is observed that after multi-task learning training within MoA, the performance of each LoRA module surpasses the original Single-LoRA modules in each task. When handling specific professional tasks individually, these modules exhibit outstanding performance. Therefore, through multi-task learning methods, the performance of multiple LoRA modules is further enhanced while effectively collaborating.\n###table_5### Based on the metrics such as PPL, BLUE, ROUGE, and accuracy metrics for specific downstream tasks presented in the paper, we can conclude that our proposed simple and efficient architecture effectively enables learning of various domain-specific competencies within a single large language model, while also avoiding interference between different tasks. Furthermore, each functional module is relatively independent, facilitating efficient consolidation of additional data for further optimization. Additionally, this method significantly saves computational resources during deployment."
        },
        {
            "section_id": "4.4",
            "parent_section_id": "4",
            "section_name": "Mixing LoRA Experts at Inference Time",
            "text": "The previous section establishes that our multi-task training method improves the performance of the single LoRA expert on test data. In addition, the mixing of multi-domain data is effective in the training process. In practice, however, the original training data scale of the respective tasks is relatively large and textual data to be evaluated may not come with a domain label.\nIn these cases, the mixed training of a large amount of data is unfavorable for our later iterations of single tasks. We propose to treat  as domain experts, transforming the input text into a matter of expert selection. The routing strategy is introducing to solve the problem of interference between tasks. The parameter of router is shown in Table 4  ###reference_###, which only accounts for a very small percentage. Our approach is parameter-efficient and selective complementarity between tasks. The results of evaluation on the test data of unknown domain are shown in Table 2  ###reference_###.\n###figure_4### To further explore the actual effect of the routing module, we test its selection ability in the inference process. The number of our routers is consistent with the number of transformer layers in our LLM. Each router is implemented with a linear layer. Therefore, to improve the efficiency of the inference process and the consistency of generation, we choose to use (1) voting of all routers and (2) the result of last router as the selected LoRA module in the subsequent inference process. The experimental results show that the classification performance of the last router is more stable. Finally, we only use 1.05M routing parameters to achieve an average accuracy of 99.90% in Table 3  ###reference_###. Overall, the router plays two key roles in our model architecture. One is to learn the complementarity of non-heterogeneous domain knowledge and in the training process. The other is to select appropriate LoRA expert to solve problems in unknown domains in the inference process."
        },
        {
            "section_id": "4.5",
            "parent_section_id": "4",
            "section_name": "Ablation Studies",
            "text": "We further conduct specific experiments to investigate the effectiveness of different components in our model.\nImpact of Domain Label Information In addition to the language modeling loss, we also add the domain label routing loss in the training process. To verify the effectiveness of our proposed mechanism, we remove the routing loss and our model devolved into MoE-LoRA. Therefore, the MoE-LoRA does not introduce explicit domain label information in the training and inference process and guarantees the same number of parameters as MoA. As shown in Table 7  ###reference_###, MoA has achieved an overall improvement over MoE-LoRA, which demonstrates that the domain label information is useful for different tasks. Furthermore, we evaluate the performance of single LoRA module after multi-LoRA joint training in Table 8  ###reference_###. The MoA further improves the perplexity performance of each LoRA module from 4.0128 to 3.7962, while MoE-LoRA causes a slight decrease. Therefore,\nwhen we need to expand to more tasks or combine multiple functions, MoA is more flexible and effective.\n###table_6### Impact of Different Initialization Methods To evaluate the effectiveness of various LoRA initialization methods, we present the MoE-LoRA (naive) approach. In contrast to MoE-LoRA, the LoRA modules in the naive variant are initialized randomly. This approach leverages the complete dataset from all domains, leading to a significant increase in total training duration. However, this approach proves to be highly inefficient when we require customization of different capability combinations. Moreover, the comparative analysis presented in Table 7  ###reference_### demonstrates that both methods yield comparable results across eight tasks. Therefore, conducting further training on the initial multi-domain LoRA parameters emerges as a highly efficient method."
        },
        {
            "section_id": "4.6",
            "parent_section_id": "4",
            "section_name": "Case Study",
            "text": "Figure 4  ###reference_### shows the comparison of the outputs of different models on a specific reasoning question.\nFrom the above results, only the MoA correctly understands the multiple relationships in the query and predicts the right answer, while other approaches are slightly less capable of reasoning. Furthermore, the MoA is superior to the single-LoRA, which also illustrates the advantages of our multitask fine-tuning. This approach can not only avoid the interference between different tasks, but also further improve the performance on a single task, so it has a great application prospect."
        },
        {
            "section_id": "5",
            "parent_section_id": null,
            "section_name": "Conclusions",
            "text": "We introduce MoA architecture, which provide an efficient multi-task fine-tuning method for LLM, addressing interference among tasks and training instabilities. Each LoRA model can be iterated individually to quickly adapt to new domains. Meanwhile, MoA uses routing strategy to flexibly select the appropriate LoRA expert to solve the problem. It can arbitrarily combine multiple domain-specific LoRA modules to implement a LLM with multiple specific capabilities. Future work may focus on how to flexibility add or remove LoRA modules with unsupervised learning, optimize the current routing algorithm, or reduce the scale of training data in domain specialization of LLMs."
        }
    ]
}