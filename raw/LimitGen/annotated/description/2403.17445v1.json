{
    "title": "Incorporating Exponential Smoothing into MLP: A Simple but Effective Sequence Model",
    "abstract": "Modeling long-range dependencies in sequential data is a crucial step in sequence learning. A recently developed model, the Structured State Space (S4), demonstrated significant effectiveness in modeling long-range sequences. However, It is unclear whether the success of S4 can be attributed to its intricate parameterization and HiPPO initialization or simply due to State Space Models (SSMs). To further investigate the potential of the deep SSMs, we start with exponential smoothing (ETS), a simple SSM, and propose a stacked architecture by directly incorporating it into an element-wise MLP. We augment simple ETS with additional parameters and complex field to reduce the inductive bias. Despite increasing less than 1% of parameters of element-wise MLP, our models achieve comparable results to S4 on the LRA benchmark.111Our codes and scripts are available at https://github.com/PKUAI-LINGroup/ETSMLP.",
    "sections": [
        {
            "section_id": "1",
            "parent_section_id": null,
            "section_name": "Introduction",
            "text": "Transformer Vaswani et al. (2017  ###reference_b41###) and its variants have been the most successful architecture in various domains of deep learning. However, the self-attention layer, which plays a crucial role in contextualizing the input, poses a significant computational and memory burden with a complexity of . This limitation hinders the application of the transformers in modeling long sequences, particularly when operating under hardware constraints, which is a common scenario for large language models. To alleviate this issue, several models have been proposed to reduce the computational and memory requirements of the transformers Beltagy et al. (2020  ###reference_b1###); Choromanski et al. (2020  ###reference_b5###); Kitaev et al. (2020  ###reference_b22###); Wang et al. (2020  ###reference_b42###); Guo et al. (2021  ###reference_b15###); Kasai et al. (2021  ###reference_b20###); Peng et al. (2021  ###reference_b30###); Dao et al. (2022  ###reference_b7###); Hua et al. (2022  ###reference_b17###); Tay et al. (2022  ###reference_b38###); Fournier et al. (2023  ###reference_b9###); Zandieh et al. (2023  ###reference_b48###). Despite these efforts, all the models are only partial modifications of the attention mechanism and struggle to perform well on long-range sequence benchmarks such as Long Range Arena (LRA) Tay et al. (2020  ###reference_b37###).\nIn a recent breakthrough result, Gu et al. (2021  ###reference_b14###) introduced a novel framework called the \"structured state space sequence\" (S4) that leveraged the State Space Models (SSMs). S4 builds upon continuous-time SSMs and addresses the computational bottleneck of previous approaches by introducing the Normal Plus Low-Rank (NPLR) decomposition of the state matrices. Additionally, the initialization of state matrices utilizes HiPPO matrices which have been demonstrated to be effective in sequence learning in Gu et al. (2020  ###reference_b12###). Notably, S4 exhibited exceptional performance across various sequential tasks, particularly in the LRA, where it outperformed the existing transformer variants by an impressive\naccuracy.\nDespite the impressive performance of S4, its intricate parameterization and strict initialization schemes impede researchers from fully comprehending, implementing, and analyzing the model. Although there have been attempts to simplify the S4 framework by Smith et al. (2022  ###reference_b33###); Gupta et al. (2022  ###reference_b16###), these models still required the HiPPO initialization process. Other studies have explored the relationship between SSMs and recurrent units or global convolutions and demonstrated strong performance on various tasks Li et al. (2022  ###reference_b23###); Orvieto et al. (2023  ###reference_b28###). These works highlight the potential of SSMs and suggest that simpler yet effective SSM architectures may exist.\nIn our work, we deviate from the methodology proposed by S4, which begins with the continuous SSM and then simplifies the process. We initiate our approach with a discrete SSM, namely Exponential Smoothing (ETS), and introduce additional parameters to reduce the inductive bias. This alternative approach offers two notable advantages. Firstly, it circumvents the simplification of the continuous SSMs that need sophisticated mathematical derivations and thus enhances accessibility and comprehensibility. Secondly, it explores the possibility of random initialization departing from HiPPO initialization for continuous SSMs. For the streamlining of the model, our architecture directly integrates a parameterized ETS into an element-wise Multi-Layer Perceptron (MLP). By incorporating less than 3% of the total parameters after the initial linear layer of the MLP, we successfully transform a channel-only MLP into a sequence learner.\nWe conducted experiments on multiple datasets, including the LRA and several Natural Language Understanding (NLU) datasets. Despite its simplicity, surprisingly, our model performs comparably to S4. In all six tasks in the LRA, our results slightly surpass the performance of S4 and DSS by 2.61 points on average and significantly outperform the transformer variants by about 20 points. In addition, we evaluated our model on seven NLU datasets and consistently achieved comparable performance with the transformer encoders. The findings of our work shed light on the potential of SSMs from a unique standpoint, where simply incorporating an ETS into an MLP can achieve a similar effect as the transformer model. A thorough examination of the proposed model was undertaken through an ablation study on the hyperparameters and an evaluation of the initialization method. Additional experiments were conducted to compare our model with the transformer model for efficiency and memory utilization, especially in handling lengthy texts. The results of these experiments provide evidence of the advantages of our model over the transformer model in terms of time and memory complexity.\nIn summary, our main contributions are as follows:\nWe introduce the Exponential Smoothing Multi-Layer Perceptron (ETSMLP) model. We integrate the enhanced ETS module into an element-wise MLP to create an effective sequence model.\nWe evaluate ETSMLP on the LRA and conduct comparative experiments with transformer encoders on various NLU datasets. The empirical results demonstrate the effective capacity in long-range sequence modeling.\nWe conduct ablation studies on the proposed parameters and initialization methods. Additionally, we emphasize the advantages of SSMs over the attention mechanism in speed and memory efficiency."
        },
        {
            "section_id": "2",
            "parent_section_id": null,
            "section_name": "Preliminaries",
            "text": "We introduce basic notations and briefly review SSMs and ETS in this section. Focusing on time-invariant sequence models, we aim to transform a sequence of inputs  into a corresponding sequence of outputs  with each output  is exclusively based on historical data .\n###figure_1###"
        },
        {
            "section_id": "2.1",
            "parent_section_id": "2",
            "section_name": "State space models",
            "text": "The continuous-time SSM is characterized by the differential equation (1  ###reference_###), which establishes the relationship between a continuous-time scalar input  to a scalar output  with the state matrix  and vectors , :\nIf we set a sample time interval , and assume that the duration of sampling remains constant , we convert the continuous-time SSM into a discrete-time one using a recursive equation in the following:\nwhere , and . With , we unroll this recursion explicitly as the equation (3  ###reference_###) which can be vectorized into a convolution in the equation (5  ###reference_###) with the SSM convolution kernel defined in the equation (4  ###reference_###) as follows:\nIf we obtain the kernel , the convolution function aforementioned can be efficiently computed with Fast Fourier Transform (FFT) in  Cormen et al. (2022  ###reference_b6###). Nevertheless, the main challenge in the computation of SSMs is how to efficiently compute  from the matrices  and . S4 proposes an effective parameterization through decomposing matrix  to the NPLR matrices Gu et al. (2021  ###reference_b14###), and diagonal state spaces (DSS) only consider the circumstances when  is diagonalizable over  Gupta et al. (2022  ###reference_b16###). Both methods involve intricate mathematics, sophisticated parameterization, and strict initialization, all of which are indispensable for achieving excellent performance. Our method will start from a special SSM, namely ETS, which gives a new insight into\nthis problem, and requires fewer mathematical operations, fewer parameters, and more flexible initialization."
        },
        {
            "section_id": "2.2",
            "parent_section_id": "2",
            "section_name": "Exponential smoothing",
            "text": "ETS is a time series forecasting method that utilizes a weighted average of past observations to predict future values Winters (1960  ###reference_b45###); Hunter (1986  ###reference_b18###); Hyndman et al. (2008  ###reference_b19###). The fundamental idea behind ETS is to give more weight to recent observations and less to older ones, with the weights decreasing exponentially as the observations get older. The core recursive equation for this method is the equation (6  ###reference_###) with the smoothing factor  in the range :\nETS is a special SSM, with the substitution . However, compared with SSMs,\nETS cannot capture sequential information effectively. Figure 1  ###reference_### illustrates the relationship among\nSSMs, S4, DSS, and ETS. S4 and DSS are derived from the continuous-time SSMs with the difference that S4 decomposes the matrix  into an NPLR matrix, while DSS assumes  to be diagonalizable. As a result, the HiPPO initialization in S4 cannot directly adapt to DSS Gu et al. (2020  ###reference_b12###). The initialization in DSS is skew-Hippo initialization which is the normal part of the HiPPO matrix.\nETS serves as a special case within the realm of discrete-time SSM. In our approach, we incorporate parameters directly from ETS, distinguishing ours from S4 and DSS methods that simplify equations based on continuous-time SSMs."
        },
        {
            "section_id": "3",
            "parent_section_id": null,
            "section_name": "Exponential Smoothing Multi-layer Perceptrons",
            "text": "In this section, we present our ETSMLP. We first introduce a complex exponential smoothing module which is the pivotal component of our architecture. We then describe the full architecture with two proposed versions, ESMLP and ESMLP-Gate."
        },
        {
            "section_id": "3.1",
            "parent_section_id": "3",
            "section_name": "Complex exponential smoothing module",
            "text": "Learnable damped factors. Damped factors are a commonly used technique of ETS for attenuating the influence of specific factors Gardner Jr (1985  ###reference_b10###); McKenzie and Gardner Jr (2010  ###reference_b27###). We introduce two learnable damped factors  and  into simple ETS in equation (7  ###reference_###). The factor  controls the learning of  in an exponential scalar. A small  close to zero amplifies the impact of  and results in  approximating 1 while a large  diminishes its impact, driving the combination closer to 0. The factor  serves as a multiplicative factor that controls the influence of the current input . The recursion can be unrolled in equation (8  ###reference_###) with the kernel defined by the equation (9  ###reference_###) as follows:\nComplex parameters. Complex parameters in ETS have been demonstrated to capture both level and trend information in forecasting Svetunkov et al. (2022  ###reference_b35###). By extending the learning capacity and enlarging the parameter space, the transformation from real to complex numbers is beneficial. Therefore, we treat , ,  as complex numbers, and keep the input  and the output  real. Consequently, only the real part of the kernel coefficients is utilized, and the corresponding computation formula is as follows:\n###figure_2### ###figure_3### Exponential parameterization. Directly training the parameters  is infeasible, due to the rapid explosion of the gradient  within a few steps. This challenge becomes evident upon inspecting the equation (6  ###reference_###). Given the gradients of  , the gradient of   could be derived from the formulas (11  ###reference_###). This reveals that the gradients of  are proportional to . Consequently, as  approaches 1, the gradients of  will explode.\nTo address this issue, we propose an exponential transformation of the parameters. We trains the parameter  instead of the . We prove that the stability of learning  constrains the gradients of  within a specified range, as described in Proposition 1.\nLet  be within the interior of the hollow unit disc . We define  which substitutes  in the equation (10  ###reference_###). If the gradients of  satisfy , the gradients of the real and imaginary parts of  are bounded for all .\nThe proof of Proposition 1 is elementary and is provided in the appendix A  ###reference_###. This proposition proves that the exponential parameterization  gradients are stable in the feasible region of .\nConstraint function and shortcut. In addition to the settings as aforementioned,  must lie within the feasible field . To address this, we introduce a constraint function to enforce the validity of these parameters, which can be formulated in equation (12  ###reference_###):\nAlthough this solution is simple, it yields remarkably effective results. We also explored an alternative approach inspired by the separation of real and imaginary parts, as discussed in Gu et al. (2022  ###reference_b13###); Orvieto et al. (2023  ###reference_b28###). Unfortunately, its performance is unsatisfactory, because the gradients of imaginary parts appear unstable and may explode in a few steps.\nMoreover, we introduce a parameter  to establish a shortcut from input to output, a commonly used technique in deep learning. This parameter serves as a gating unit that regulates the incoming input. The final output of our model can be described with the sigmoid function  as follows:\nBidirectional. We describe a bidirectional model incorporating backward recursion as . By employing a bidirectional model, the influence of tokens is determined by both preceding and succeeding tokens, resulting in a wide-ranging receptive field. The kernel function is formed by combining the forward and backward kernels in equation (14  ###reference_###). We employ the circular convolution to compute the output with the input being zero-padded on the right side to twice its length.\nA sketch of the full computation is presented on the left of Figure 2  ###reference_###. Initially, we calculate the kernel corresponding to the sequence length and subsequently apply FFT to compute the convolution of the inputs and the kernel. The Complex Exponential Smoothing (CES) module produces the final results by combining the shortcut and the convolution outputs. Although the current code is designed for a unidirectional kernel, a bidirectional kernel can be easily achieved by connecting two unidirectional kernels using the equations as aforementioned."
        },
        {
            "section_id": "3.2",
            "parent_section_id": "3",
            "section_name": "ETSMLP blocks",
            "text": "We incorporate the CES module into the element-wise MLP to learn token-level information. The CES module facilitates the mix of input information at the token level, resulting in a mixed output containing sequence information. We integrated the CES module just before the activation function into the MLP in the full architecture, depicted in Figure 2  ###reference_###. The functions are described as follows:\nCompared to standard MLP, the increased parameters constitute only  of the original MLP, where  is the embedding dimension. For a typical model with , a modest increase 0.58% parameters enables channel-only MLP to learn sequence information, which is previously unattainable. Moreover, the computational and memory complexity is lower than that of the self-attention, as detailed in Section 4.3.3  ###reference_.SSS3###\nGated architecture. To further enhance the expressive capacity of our model, we add a gate mechanism like Cho et al. (2014  ###reference_b4###); Shazeer (2020  ###reference_b32###); Hua et al. (2022  ###reference_b17###). This gate unit controls the output of each block. After obtaining the representation after layernorm, we pass it through a linear layer, derive the score using the sigmoid function, multiply it with the output from the preceding module, and obtain the output of our layer through a residual connection. As in Figure 2  ###reference_###, we express these processes as follows:"
        },
        {
            "section_id": "4",
            "parent_section_id": null,
            "section_name": "Experiments",
            "text": "We present an empirical comparison between our ETSMLP and other baseline models. Our experiments encompass a set of sequence modeling tasks, including LRA, MNLI, IMDB, etc. The main experiment results are divided into two subsections: LRA and NLU benchmarks. Furthermore, we conduct an ablation study to examine the influence of hyperparameters. Additional information about the experimental details and datasets can be found in Appendix B  ###reference_###.\n###table_1###"
        },
        {
            "section_id": "4.1",
            "parent_section_id": "4",
            "section_name": "LRA",
            "text": "The LRA benchmarks are a collection of long sequence modeling tasks ranging from 1024 to over 16000 Tay et al. (2020  ###reference_b37###). In Table 1  ###reference_###, we compare our models to several variants of SSM\nand Transformer. We observe that our model outperforms all the Transformer variants and achieves the comparable performance of S4 on average which is 83.09 vs 80.48. Although we don’t gain the highest average scores among all concurrent works, it still produces comparable results without relying on the attention in MEGA Ma et al. (2022  ###reference_b25###), or Hippo initialization in S5 Smith et al. (2022  ###reference_b33###). When comparing the individual tasks horizontally, we observe that our model performs significantly better in text tasks such as ListOps and Text, while slightly underperforming on image tasks like Image. This discrepancy may be attributed to the weight decaying exponentially with distance, which is unsuitable for flattened patches.\nWe provide the hyperparameters used in our experiments in Appendix B  ###reference_###."
        },
        {
            "section_id": "4.2",
            "parent_section_id": "4",
            "section_name": "NLU",
            "text": "The LRA results demonstrate the benefits of our method in sequential text tasks. Furthermore, we conduct experiments on various NLU tasks and compare our models with a transformer encoder architecture trained from scratch. Our experimental evaluations were divided into three categories: sentence classification, including CoLA Warstadt et al. (2019  ###reference_b43###), SST-2 Socher et al. (2013  ###reference_b34###), and IMDB Maas et al. (2011  ###reference_b26###); sentence similarity, including QQP, 222https://quoradata.quora.com/First-Quora-Dataset-Release-Question-Pairs  ###reference_taset-Release-Question-Pairs### and MRPC Dolan and Brockett (2005  ###reference_b8###); and natural language inference, including MNLI Williams et al. (2018  ###reference_b44###) and QNLI Rocktäschel et al. (2015  ###reference_b31###). We present the experiment results in Table 2  ###reference_###, which reveal that our architecture can achieve comparable or even superior performance to transformers on all the datasets. Considering the simple computation and slight increase in parameters on MLP, these results suggest that the ETS has tremendous potential in sequence learning tasks."
        },
        {
            "section_id": "4.3",
            "parent_section_id": "4",
            "section_name": "Analysis",
            "text": ""
        },
        {
            "section_id": "4.3.1",
            "parent_section_id": "4.3",
            "section_name": "4.3.1 Role of damped factors and fields",
            "text": "The experimental results presented above are encouraging and demonstrate the effectiveness of the ETS for sequence modeling tasks. It is proved empirically that even the simplest SSM like ETS can achieve a competitive result compared with other state space model variants. To further consider if we would simplify the ETS in fewer parameters, we conducted ablation studies on the damped factors and the number fields. Table 3 shows the accuracy results of Listops if we remove , , or  or change all parameters from complex to real fields. We could observe that whether to remove the  or  or  or the complex field, the performance of our method drops significantly, especially  and complex field. These experiments illustrate the necessity of our architecture in sequence modeling tasks."
        },
        {
            "section_id": "4.3.2",
            "parent_section_id": "4.3",
            "section_name": "4.3.2 Initialization of parameters",
            "text": "S4 and its variants conducted several experiments on  initialization and concluded that random initialization may hurt performance Gu et al. (2021  ###reference_b14###, 2022  ###reference_b13###). Because of the different computation processes,  initialization doesn’t work in our models. Therefore, we consider the ring initialization method, which involves uniform sampling on a ring defined by the range . By predefining values for  and , we uniformly sample  along the ring, between circles with radii  and . In addition to examining the effects of different initializations, we conducted experiments using fixed-value initialization operations. Our experimental results on listops are displayed in Figure 4  ###reference_###. It can be observed that our model exhibits consistent performance across rings of varying sizes. However, when dealing with fixed points, the effectiveness diminishes significantly.\n###figure_4### ###figure_5###"
        },
        {
            "section_id": "4.3.3",
            "parent_section_id": "4.3",
            "section_name": "4.3.3 Efficiency and memory analysis",
            "text": "To assess the speed and memory efficiency across different lengths, we performed experiments using a synthetic dataset that combines multiple sentences to achieve sufficient length. Our chosen task is language modeling, as it allows us to segment sentences into desired lengths. The maximum length of our synthetic dataset is 8192. We adjusted the sample length within each batch to compare the words per second (WPS) and memory usage (in GB) between the transformer, S4, and our model at comparable sizes. The batch size was uniformly set to 1 to ensure accurate memory usage. All training procedures are carried out on an NVIDIA GeForce GTX 2080 GPU.\nThe comparison results are presented in Figure 3  ###reference_###. Notice that our approach consistently achieves the highest WPS for all the sequence lengths. The slower performance of S4 can be attributed to its complex calculations on the NPLR. Both our model and S4 share a common characteristic: the WPS remains constant as the sequence length increases, while the transformer shows a decrease. Furthermore, the memory requirements of the transformer exhibit an almost quadratic growth, whereas our model and S4 demonstrate linear growth, with our model having a lower slope. For sequence lengths below 3072, there is minimal difference between our model and the transformer. However, as the training length increases, the undesirable quadratic growth in computation and memory complexity becomes apparent in the transformer, whereas our method avoids this issue."
        },
        {
            "section_id": "5",
            "parent_section_id": null,
            "section_name": "Related Works",
            "text": "Since the Transformer was introduced, the linear time cost of the attention operation has been numerously researched. Optimizing this operation can improve the efficiency when training and inferencing long context for large language models Xiao et al. (2023  ###reference_b46###). Recently, many transformer variants have been introduced to reduce the complexity of attentions Tay et al. (2022  ###reference_b38###), including sparse attention Beltagy et al. (2020  ###reference_b1###); Kitaev et al. (2020  ###reference_b22###); Guo et al. (2021  ###reference_b15###), kernel-based methods Choromanski et al. (2020  ###reference_b5###); Kasai et al. (2021  ###reference_b20###); Peng et al. (2021  ###reference_b30###), chunked attention with gating Hua et al. (2022  ###reference_b17###); Ma et al. (2022  ###reference_b25###) and other efficient methods Wang et al. (2020  ###reference_b42###); Dao et al. (2022  ###reference_b7###). Another line of research tries to replace the attention mechanism with other modules for long sequences and avoid quadratic time costs. A dizzying number of attention-free models have emerged, where SSMs are becoming one of the most promising models among them. SSMs. S4 first investigated the SSM for long sequence modeling Gu et al. (2021  ###reference_b14###). They showed that naive instantiations of the SSM did not perform well but HiPPO-LegS matrix did Gu et al. (2020  ###reference_b12###), and hence introduced the DPLR that efficiently computed the complex diagonal plus low-rank matrix. DSS observed that a fully diagonal matrix could preserve the performance of the original S4 Gupta et al. (2022  ###reference_b16###), and S4D Gu et al. (2022  ###reference_b13###) then showed that the initialization is critical for DSS. Inspired by S4, many SSM variants emerged recently. S5 replaced single-input, single-output (SISO) SSMs in S4 with multi-input, multi-output (MIMO) Smith et al. (2022  ###reference_b33###). SGConv viewed the SSM as a global convolution model and suggested that the convolution kernel’s sub-linear decay in sequence length is indispensable Li et al. (2022  ###reference_b23###). Linear Recurrent Unit (LRU) explored the relationship between the SSM and linear RNN and showed the importance of initialization, exponential parameterization, and normalization for SSMs Orvieto et al. (2023  ###reference_b28###). MEGA was the most similar approach to ours and plugged exponential moving average into the attention mechanism to improve position-wise local dependency Ma et al. (2022  ###reference_b25###). Our CES mechanism only considered a position-aware but representation-agnostic dependency which is completely different from the attention mechanism but matches the performance of the transformer. Other attention free models. MLP-Mixer Tolstikhin et al. (2021  ###reference_b39###), and its variants proposed to replace the attention with MLPs in computer vision task Touvron et al. (2022  ###reference_b40###); Yu et al. (2022  ###reference_b47###); Tatsunami and Taki (2022  ###reference_b36###). Another MLP-based model gMLP showed the potential of MLPs to model sequence dependency and achieved comparable results in pretraining and downstream NLP tasks Liu et al. (2021  ###reference_b24###). The Attention Free Transformer (AFT) replaced the attention mechanism with an element-wise multiplication and avoided the quadratic computation burden of the attention matrix Zhai et al. (2021  ###reference_b49###). Recurrent Memory Transformer (RMT) added a special cache token and utilized the recursive components to increase the context length in the transformer Bulatov et al. (2022  ###reference_b3###, 2023  ###reference_b2###). Receptance Weighted Key Value (RWKV) leveraged token shift for parallel training a simple linear RNN Peng et al. (2023  ###reference_b29###). Our models do not conflict with those models in spirit. Our CES modules can be integrated into their models to improve their capabilities of sequence learning."
        },
        {
            "section_id": "6",
            "parent_section_id": null,
            "section_name": "Conclusion",
            "text": "We proposed the ETSMLP model for long-range sequence modeling. Our approach began with a special SSM, namely ETS, and incorporated additional hyperparameters. Moreover, we proposed an exponential parameterization and a constraint function essential for stable training. The experimental results demonstrated the effectiveness of the ETSMLP in sequence learning. Our proposed module could become a plug-in module on other models to enhance their sequence learning capabilities. We hope our research could provide valuable insights into the application of SSMs and encourage further exploration in this area."
        },
        {
            "section_id": "7",
            "parent_section_id": null,
            "section_name": "Limitations",
            "text": "Our approach focuses on evaluating datasets containing fewer than 100,000 samples, where the influence of prior knowledge on performance is substantial. In the next phase, we aim to conduct experiments on pretraining. The considerable disparity between pretraining and training from scratch requires meticulous adjustment of exponential smoothing and ingenious design of the architecture, something like Mamba Gu and Dao (2023  ###reference_b11###).\nAnother limitation of our approach lies in the empirical design of the constraint function. This arises from the potential for lambda to surpass the precision of 32-bit floating point numbers if its training range is not restricted, and leads to NaN results during backpropagation. We believe that a low granularity parameterization can effectively mitigate this concern. Our future work will prioritize establishing a smooth training process on the parameter space."
        }
    ]
}