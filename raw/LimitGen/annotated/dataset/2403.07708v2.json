{
    "title": "Improving Reinforcement Learning from Human Feedback Using Contrastive Rewards",
    "abstract": "Reinforcement learning from human feedback (RLHF) is a common approach to align large language models (LLMs) with human preferences. However, existing RLHF methods often depend on reward models that can be vulnerable to noise from various sources, such as human labeling errors, which can destabilize the process. In this paper, we propose enhancing the robustness of reward models by introducing a penalty to the reward, named contrastive rewards. This method consists of two main steps: (1) an offline sampling procedure to generate responses to prompts that serve as a baseline for comparison and (2) calculating a contrastive reward using these baseline responses within the Proximal Policy Optimization (PPO) framework. The use of contrastive rewards helps the LLM penalize reward uncertainty, enhance robustness, promote improvements over baselines, adjust according to task difficulty, and reduce variance in PPO. We provide empirical evidence showing that contrastive rewards can significantly enhance RLHF performance, as measured by evaluations from both GPTs and human judges, consistently surpassing strong baseline methods.",
    "sections": [
        {
            "section_id": "1",
            "parent_section_id": null,
            "section_name": "Introduction",
            "text": "The success of deploying large language models (LLMs) can be attributed to their remarkable ability to follow instructions and learn with human feedback (Christiano et al., 2023; Ouyang et al., 2022). The key step to achieving the above is LLM alignment (Kenton et al., 2021; Askell et al., 2021). Among different options, the Reinforcement Learning from Human Feedback (RLHF) pipeline is a widely recognized approach in aligning LLMs from human feedback (Ouyang et al., 2022; Bai et al., 2022b; Touvron et al., 2023a). Despite the successes, the effectiveness of RLHF relies heavily on the reward model (RM) used in the Proximal Policy Optimization (PPO) stage to guide the learning process.\n\nDesigning accurate and informative reward models remains a significant challenge (Leike et al., 2018; Casper et al., 2023). For instance, when it is deployed in the practical environment (Amodei et al., 2016), the reward models often exhibit limited generalization capabilities. More specifically, the quality of a reward model suffers from two sources: 1) low quality and inherent ambiguity of the preference data (Zhu et al., 2023) and 2) sensitivity of RM training with respect to training details, leading to reward hacking (Eisenstein et al., 2023; Singhal et al., 2023; Gao et al., 2022). The above observation served as a strong motivation for techniques that improve robustness compared to RLHF. The recent work on direct preference optimization (Rafailov et al., 2023) is one of such efforts, among others (Yuan et al., 2023; Cheng et al., 2023; Yuan et al., 2024).\n\nAdding to this line of contribution, we propose a simple fix to RLHF that leads to substantial performance improvements when compared to standard RLHF or DPO. Our approach explicitly acknowledges the imperfections of the reward model and calibrates the RLHF process using a penalty term defined using a contrastive reward.\n\nOur approach takes two computationally easy steps. In Step 1, we perform offline sampling to obtain a set of baseline responses to prompts that will be used in the PPO stage to calculate our contrastive rewards. This offline step reduces the synchronization time overhead associated with additional sampling during the RL stage. In Step 2, using the sampled baseline responses, we compute the contrastive rewards. We compare the rewards obtained during RL training to their corresponding contrastive rewards and establish an implicit comparative reward framework in the RL stage. This “penalty” reward information enables the RL policy to make self-improvements based on the observed differences.\n\nWe analytically show the benefits of the contrastive reward term within stylish settings, including its ability to penalize uncertain instances, improve the robustness of the RLHF pipeline given the RM’s imperfections, down-weigh samples that the RM is uncertain, etc. Empirically, we demonstrate the effectiveness of our proposed approach using extensive experiments with both evaluations automated by GPT models, and by carefully solicited human evaluations.\n\nThe main contributions of our paper are summarized as follows: We introduce contrastive rewards as a novel approach to improve RLHF-based alignment. This method addresses the imperfections in reward models by explicitly calibrating the mistakes in reward models. We propose a simple and efficient method to implement contrastive rewards in RLHF. The process involves offline sampling to collect baseline responses and using them to define contrastive rewards. Through analytical insights and extensive empirical testing, we establish that our approach consistently outperforms the PPO algorithm with a margin of approximately 20% across various tasks evaluated by human annotators. These results underscore the enhanced performance and robustness of our method in aligning LLMs with human feedback."
        },
        {
            "section_id": "2",
            "parent_section_id": null,
            "section_name": "Preliminaries",
            "text": "RLHF typically follows a similar pipeline to InstructGPT (Ouyang et al., 2022  ###reference_b37###), which involves collecting human feedback, training a reward model, and optimizing the policy with reinforcement learning. We briefly overview the last two steps.\nTaking pairwise preference data annotation as an example, the Supervised Fine-tuning (SFT) model  generates two different outputs  based on the user’s query .\nHuman annotators are instructed to select the output they prefer, resulting in , where  and  represent the preferred and rejected outputs, respectively, from the pair of outputs . To train a reward model  using human feedback (Stiennon et al., 2022  ###reference_b44###; Ziegler et al., 2020  ###reference_b60###; Christiano et al., 2023  ###reference_b13###), the parameters  are optimized to minimize the following objective on the collected dataset:\nwhere  is a suitable loss function and  is a regularization term.\nWhen feedback consists of pairwise comparisons, a binary ranking loss (Bradley & Terry, 1952  ###reference_b7###) can be used, where the learning objective of Equation (1  ###reference_###) aims to make the chosen sample the winner in both instances:\nwhere the dataset consists of comparisons, represented as .\nThe reward model  is commonly adapted by the inclusion of an extra linear layer at the final transformer layer, producing a solitary scalar prediction denoted as . This prediction serves as a representation of the reward value associated with the input pair .\nThe reward model  can be used to fine-tune the base model through reinforcement learning. The new parameters  of  are trained to maximize the following objective:\nwhere  is a regularizer, such as a KL divergence-based penalty.\nIn this context, the KL divergence term serves two main purposes. First, it acts as an entropy bonus, maintaining generation diversity and preventing the collapse of patterns into a single high-reward answer (Jaques et al., 2019  ###reference_b23###). Second, it ensures that the outputs of the RL policy do not deviate significantly from the distribution of the reference model (Korbak et al., 2022  ###reference_b27###)."
        },
        {
            "section_id": "3",
            "parent_section_id": null,
            "section_name": "RLHF with Contrastive Reward",
            "text": "###figure_1### We overview our approach in Figure 1  ###reference_###.\nBriefly speaking, our approach proceeds in two steps. In the first stage, for the prompts that we will use in the PPO stage, we will generate responses using base (SFT) models. These prompts, together with the baseline responses, will help us define a reward penalty term.\nIn the second step, the generated baseline responses will help us define a calibrated and penalized reward that will be used in the PPO stage. The computation of the penalty term is light and only requires calling the original reward for the generated baseline responses by the reward model.\nGiven the base model (referred to as the SFT model), we can sample  responses for each of the  prompts. This process enables us to acquire a collection of baseline responses denoted as .\nThese responses are then combined with the original prompts, denoting by . With a slight notation abuse, we will denote by  the -th baseline response for an unindexed prompt . By employing this straightforward sampling technique, we can generate synthetic data. Furthermore, we can adjust the temperature during sampling to generate a broader range of responses from the same base model, effectively improving the diversity of the generated responses.\nOnce we have obtained the sampling outputs from the base model, we can employ the reward model to assign scores to each of these combined sequences. Consequently, we obtain a list of rewards corresponding to each prompt, from which we derive offline rewards denoted as :\nThese offline rewards serve as a reflection of the base model’s implicit capability with respect to the prompts in the RL dataset, and we refer to them as offline contrastive rewards.\nThe scale of  in expectation is linearly decreasing w.r.t.  where high uncertainty (small ) is penalized heavily by the constant. In other words,\nwhen the reward function is highly inaccurate on certain , the influence of  during PPO drops linearly w.r.t. the uncertainty terms.\nIf we simplify the reward noise by assuming\n, i.e. the reward function suffers a similar amount of mistakes for different  pairs, then the first constant linear term, i.e. , becomes irrelevant to the reward maximization problem and therefore improves the training’s resistance to this noise.\nIt also reveals that via using the contrastive reward, we encourage a new answer  that substantially differs from the baseline answer  through the term .\nThe last term, i.e. , downweights the tasks with higher difficulty, i.e. with a lower chance of observing high true reward . This helps the PPO step focus less on the instances that might be inherently ambiguous in obtaining a high-quality answer, caused either by bad prompting, or the nature of the question.\nBaseline rewards are similar to (Weaver & Tao, 2013  ###reference_b51###; Sutton & Barto, 2018  ###reference_b45###), which can be contributed to variance reduction. This is also evident from Theorem 3.1  ###reference_1### that linear terms, e.g. , properly scale the reward down and therefore reduces its variance."
        },
        {
            "section_id": "3.1",
            "parent_section_id": "3",
            "section_name": "Generating Contrastive Reward",
            "text": "Step 1 obtains a contrastive penalty reward using offline sampling. We assume we have a collection of prompts .\nGiven the base model (referred to as the SFT model), we can sample  responses for each of the  prompts. This process enables us to acquire a collection of baseline responses denoted as .\nThese responses are then combined with the original prompts, denoting by . With a slight notation abuse, we will denote by  the -th baseline response for an unindexed prompt . By employing this straightforward sampling technique, we can generate synthetic data. Furthermore, we can adjust the temperature during sampling to generate a broader range of responses from the same base model, effectively improving the diversity of the generated responses.\nOnce we have obtained the sampling outputs from the base model, we can employ the reward model to assign scores to each of these combined sequences. Consequently, we obtain a list of rewards corresponding to each prompt, from which we derive offline rewards denoted as :\nThese offline rewards serve as a reflection of the base model’s implicit capability with respect to the prompts in the RL dataset, and we refer to them as offline contrastive rewards."
        },
        {
            "section_id": "3.2",
            "parent_section_id": "3",
            "section_name": "RL Tuning with Contrastive Reward Penalty",
            "text": "In the RL phase, the primary objective is to learn a policy denoted as  that maximizes the following contrastive reward:\nwhere  is an aggregation function, which we choose to be the mean. The optimization problem can be expressed as follows:\nDuring the RL phase, we follow the PPO training setting in (Ouyang et al., 2022  ###reference_b37###), and it can be expressed below:"
        },
        {
            "section_id": "3.3",
            "parent_section_id": "3",
            "section_name": "Performance Analysis",
            "text": "We provide intuitions for how the contrastively penalized reward  works.\nWe simplify the analysis by assuming using the aggregated baseline answers is equivalent to drawing a single baseline answer from a certain distribution, leading to a certain reward:\nFor simplicity of the analysis, consider only binary reward . We introduce the following two variables that capture the “(in)consistency” of the reward function on :\nwhere  corresponds to a perfect reward function that accurately evaluates the quality of  for prompt .\nHigh  indicate high inconsistency/variance of the reward function on sample , capturing the reward model’s uncertainty.\nWe can prove the following theorem:\nSuppose  are conditionally independent given , then we have\nThe above theorem reveals the following functionalities in the proposed contrastive penalty reward:\nThe scale of  in expectation is linearly decreasing w.r.t.  where high uncertainty (small ) is penalized heavily by the constant. In other words,\nwhen the reward function is highly inaccurate on certain , the influence of  during PPO drops linearly w.r.t. the uncertainty terms.\nIf we simplify the reward noise by assuming\n, i.e. the reward function suffers a similar amount of mistakes for different  pairs, then the first constant linear term, i.e. , becomes irrelevant to the reward maximization problem and therefore improves the training’s resistance to this noise.\nIt also reveals that via using the contrastive reward, we encourage a new answer  that substantially differs from the baseline answer  through the term .\nThe last term, i.e. , downweights the tasks with higher difficulty, i.e. with a lower chance of observing high true reward . This helps the PPO step focus less on the instances that might be inherently ambiguous in obtaining a high-quality answer, caused either by bad prompting, or the nature of the question.\nBaseline rewards are similar to (Weaver & Tao, 2013  ###reference_b51###  ###reference_b51###; Sutton & Barto, 2018  ###reference_b45###  ###reference_b45###), which can be contributed to variance reduction. This is also evident from Theorem 3.1  ###reference_1###  ###reference_1### that linear terms, e.g. , properly scale the reward down and therefore reduces its variance."
        },
        {
            "section_id": "4",
            "parent_section_id": null,
            "section_name": "Experiments",
            "text": "We evaluate the proposed algorithm from three perspectives: (1) Does our algorithm result in an improved policy compared to several popular baselines? (2) How does the number of samples in offline sampling impact the performance? (3) How does the contrastive reward function operate at a fine-grained level?\n\nWe adopt the following datasets that are widely used in RLHF.\nAnthropic/HH-RLHF Dataset (Ganguli et al., 2022): The dataset consists of 161k conversations between humans and AI assistants. Each instance comprises a pair of responses generated by a large, albeit undisclosed, language model, accompanied by a preference label indicating the response preferred by humans. The dataset is categorized into two subsets: the helpful subset and the harmless subset. In our experiments, we mix the two subsets for both reward modeling and RL optimization stages. We randomly select 8.55k samples for validation, while the remaining samples are utilized for training.\n\nPKU/Safety Alignment Dataset (Dai et al., 2023): A preference dataset comprising 297k conversation comparisons, where each entry is linked to two types of labels. The first is a preference label, signifying human preference between two responses. The second is a safety label connected to the selected answer, indicating whether the chosen response (the one preferred by humans) adheres to safety standards. However, we observe that certain samples have preference labels, yet the selected answer is labeled as unsafe. Following previous work Touvron et al. (2023b), to guarantee alignment with safe directions, we filter the data to ensure that each sample possesses both preference labels and a designated safe answer. After the data filtering process, we retain 95k pairs for training and 10k pairs for testing.\n\nWe compare our algorithm with the following baselines.\nSFT: The basic baseline involving only the SFT stage.\nPPO: The token-wise implementation of Proximal Policy Optimization (PPO) with KL divergence penalty to ensure the learning policy stays close to the SFT model.\nDPO: The alignment algorithm without RL optimization, employing pairwise learning to directly learn the policy from preference data (Rafailov et al., 2023).\n\nWe adopt two types of evaluation following previous work \nThird-party Reward Model: In line with prior research, we utilize public third-party reward models as evaluators. Specifically, we employ the well-established UltraRM-13B (Cui et al., 2023) and PairRM (Jiang et al., 2023) for evaluation. Both reward models are trained on the UltraFeedback dataset, a large-scale, high-quality, and diversified preference dataset that has demonstrated effectiveness by various robust open-source models. More importantly, the majority of all three datasets we utilized are included in UltraFeedback, featuring refined high-quality annotations. Consequently, they are capable of providing accurate and convincing evaluation results. To compare the two models, we utilize the third-party reward models to score the responses generated by the two models in the test dataset, considering the model with the higher score as the winner. We then report both the average reward and win rate as determined by these two robust third-party reward models.\n\nGPT-4 Evaluation: Following prior research, we employ the widely used GPT-4 model as a proxy for assessing generation quality. However, we have identified inconsistencies in evaluation results when swapping the positions of responses for the same pair within evaluation prompts. In such cases, we treat these inconsistent comparisons as ties.\n\nHuman-assisted Evaluation: We also engage the support of three individuals to annotate samples in cases where GPT-4 yields inconsistent judgments or declares a tie. We only adopt GPT-4’s judgment if it consistently deems one answer superior to the other. Specifically, for each sample, we gather three annotations, and the final evaluation is determined by the majority vote among these annotations. To ensure the quality of human annotation, 30% of the labeled samples are conducted random examinations during each verification period. We only incorporate annotations when the annotator’s accuracy on our gold standard exceeds 90% during each verification period. If the accuracy falls below this threshold, the annotations are re-sampled until the requirement is met. The annotation rules and prompts used for GPT-4 evaluation can be found in the Appendix D.\n\nBenchmark: We also evaluate our model using established benchmarks, namely MT-Bench and RED-EVAL. MT-Bench primarily gauges a chatbot’s proficiency in multi-turn conversation and instruction following, with the average score as the central metric. This benchmark discerningly assesses chatbots, emphasizing core competencies like reasoning and mathematical skills. For the red-teaming task, we use RED-EVAL as the prompt template, focusing on three tasks: Chain of Utterances (CoU), Chain of Thoughts (CoT), Standard prompt, reporting Attack Success Rate (ASR).\n\nWe employ the token-wise implementation of PPO. This implementation includes the reward scaling technique, specifically involving the division"
        },
        {
            "section_id": "4.1",
            "parent_section_id": "4",
            "section_name": "Setup",
            "text": "We adopt the following three datasets that are widely used in RLHF. \n\nAnthropic/HH-RLHF Dataset (Ganguli et al., 2022): The dataset consists of 161k conversations between humans and AI assistants. Each instance comprises a pair of responses generated by a large, albeit undisclosed, language model, accompanied by a preference label indicating the response preferred by humans. The dataset is categorized into two subsets: the helpful subset and the harmless subset. In our experiments, we mix the two subsets for both reward modeling and RL optimization stages. We randomly select 8.55k samples for validation, while the remaining samples are utilized for training. \n\nPKU/Safety Alignment Dataset (Dai et al., 2023): A preference dataset comprising 297k conversation comparisons, where each entry is linked to two types of labels. The first is a preference label, signifying human preference between two responses. The second is a safety label connected to the selected answer, indicating whether the chosen response (the one preferred by humans) adheres to safety standards. However, we observe that certain samples have preference labels, yet the selected answer is labeled as unsafe. Following previous work Touvron et al. (2023b), to guarantee alignment with safe directions, we filter the data to ensure that each sample possesses both preference labels and a designated safe answer. After the data filtering process, we retain 95k pairs for training and 10k pairs for testing. \n\nWe compare our algorithm with the following baselines. \n\nSFT: The basic baseline involving only the SFT stage. \n\nPPO: The token-wise implementation of Proximal Policy Optimization (PPO) with KL divergence penalty to ensure the learning policy stays close to the SFT model. \n\nDPO: The alignment algorithm without RL optimization, employing pairwise learning to directly learn the policy from preference data (Rafailov et al., 2023). \n\nWe adopt two types of evaluation following previous work (Eisenstein et al., 2023; Coste et al., 2023; Gao et al., 2022). \n\nThird-party Reward Model: In line with prior research (Eisenstein et al., 2023; Coste et al., 2023), we utilize public third-party reward models as evaluators. Specifically, we employ the well-established UltraRM-13B (Cui et al., 2023) and PairRM (Jiang et al., 2023) for evaluation. Both reward models are trained on the UltraFeedback dataset, a large-scale, high-quality, and diversified preference dataset that has demonstrated effectiveness by various robust open-source models (Tunstall et al., 2023; Cui et al., 2023). More importantly, the majority of all three datasets we utilized are included in UltraFeedback, featuring refined high-quality annotations. Consequently, they are capable of providing accurate and convincing evaluation results. To compare the two models, we utilize the third-party reward models to score the responses generated by the two models in the test dataset, considering the model with the higher score as the winner. We then report both the average reward and win rate as determined by these two robust third-party reward models. \n\nGPT-4 Evaluation: Following prior research (Zheng et al., 2023a), we employ the widely used GPT-4 model as a proxy for assessing generation quality. However, we have identified inconsistencies in evaluation results when swapping the positions of responses for the same pair within evaluation prompts. In such cases, we treat these inconsistent comparisons as ties. \n\nHuman-assisted Evaluation: We also engage the support of three individuals to annotate samples in cases where GPT-4 yields inconsistent judgments or declares a tie. We only adopt GPT-4’s judgment if it consistently deems one answer superior to the other. Specifically, for each sample, we gather three annotations, and the final evaluation is determined by the majority vote among these annotations. To ensure the quality of human annotation, 30% of the labeled samples are conducted random examinations during each verification period. We only incorporate annotations when the annotator’s accuracy on our gold standard exceeds 90% during each verification period. If the accuracy falls below this threshold, the annotations are re-sampled until the requirement is met. The annotation rules and prompts used for GPT-4 evaluation can be found in the Appendix D.\n\nBenchmark: We also evaluate our model using established benchmarks, namely MT-Bench (Zheng et al., 2023a) and RED-EVAL (Bhardwaj & Poria, 2023). MT-Bench primarily gauges a chatbot’s proficiency in multi-turn conversation and instruction following, with the average score as the central metric. This benchmark discerningly assesses chatbots, emphasizing core competencies like reasoning and mathematical skills. For the red-teaming task, we use RED-EVAL as the prompt template, focusing on three tasks: Chain"
        },
        {
            "section_id": "4.2",
            "parent_section_id": "4",
            "section_name": "Implementation Details",
            "text": "We follow the standard RLHF pipeline outlined in (Ouyang et al., 2022). For all experiments, we adopt the Llama 7B (Touvron et al., 2023a, b) as the base model. The detailed setup is described below for completeness.\n\n**Supervised Fine-tuning.** All reward models and policy models undergo fine-tuning starting from Llama 7B (Touvron et al., 2023a) on the Supervised Fine-tuning (SFT) data across all datasets. This process aims at improving instruction-following capabilities for the task. For the dialogue task, i.e., Anthropic/HH-RLHF dataset and PKU dataset, they do not contain SFT data. Following previous work (Chiang et al., 2023), we utilize the ShareGPT dataset, consisting of real human-interacted examples collected from ShareGPT.com, containing 821 million tokens for instruction fine-tuning.\n\n**Reward Model Training.** We train the reward model for all datasets initialized from the SFT model. We train the reward models for up to three epochs and select the model that achieves the minimum loss on the validation dataset.\n\n**RL Optimization.** We use prompts from the training dataset for training and partition the prompts in the validation dataset into two segments – one for validation and the other for testing. We select the best model based on the highest reward attained on the validation dataset. Additional implementation details and hyperparameters are presented in Appendix C.\n\nWe employ the token-wise implementation of PPO as described in (Stiennon et al., 2022). This implementation includes the reward scaling technique, specifically involving the division of running standard deviations of rewards during policy optimization. In our experiments, we notice that reward scaling methods significantly impede the policy learning process. The running standard deviation consistently increases with optimization steps, causing the rewards to diminish gradually. We observed that eliminating this reward scaling leads to better performance. However, in the absence of reward scaling, subtracting from the reward is comparable to reducing the learning rate. We, therefore, rescale the contrastive reward in Eq. (4) to the same scale as the original reward by multiplying it by a factor, which is the ratio between the running mean of the contrastive reward and the original reward:\n\nWe use this scaled reward as the final reward for policy optimization."
        },
        {
            "section_id": "4.3",
            "parent_section_id": "4",
            "section_name": "Main Results",
            "text": "Considering the expensive and time-consuming process of collecting GPT-4 and human annotations, we choose to randomly evaluate 100 helpful and 100 harmless prompts from the validation data of the HH-RLHF dataset.\n\nIn contrast, leveraging third-party reward models provides a more efficient and cost-effective evaluation method. For this, we randomly select 500 prompts for the HH-RLHF and PKU-Safety Alignment datasets.\n\nThe evaluation results, obtained using UltraRM-13B, PairRM, and human-assisted evaluation, are presented in Table 1, Table 3, and Table 3, respectively. It is clear that leveraging contrastive reward consistently leads to significant improvements compared to the baselines across all tasks. Our improvements are also consistent between GPT4 evaluations and human evaluation."
        },
        {
            "section_id": "4.4",
            "parent_section_id": "4",
            "section_name": "Ablation Studies",
            "text": "We perform a series of ablation studies. We subsequently explore the impact of the number of samples in offline sampling. Intuitively, the fewer the offline samples, the greater the impact of noise. Having more samples results in a more robust estimation of the performance of the initialized model (i.e., SFT model) w.r.t. the prompt; however, it also requires additional sampling time. Table 4 shows the impact of offline samples using the human-assisted and third-party model evaluation, respectively. In general, larger improvements are achieved as the number of offline samples increases.\n\nIn particular, for the Anthropic-Helpfulness task, the improvement achieved with only one offline sample is offset by the high noise in the random sampling procedure. However, using three samples yields a noticeable improvement. To understand the impact of contrastive reward at a fine-grained level, we examine the improvement in rewards before and after the PPO stage. Specifically, we categorize prompts into two subsets based on their average offline rewards: the low-offline-reward group and the high-offline-reward group. The average offline reward indicates whether the SFT model can generate a satisfactory response for the prompt on average. Consequently, prompts with low offline rewards suggest poor performance of the SFT model on these prompts.\n\nWe proceed to calculate the gap in reward after/before PPO for the two groups. A large difference indicates a greater improvement in the performance of the prompt. Figure 2 illustrates the reward gap for the low-offline-reward group and the high-offline-reward group across three datasets. In all three datasets, the utilization of contrastive rewards tends to improve the performance on prompts where the SFT model’s output receives a low reward. In other words, our method improves more of the performance on challenging samples considered by the SFT model. This suggests that leveraging contrastive rewards contributes to a more balanced and effective policy.\n\nWe extensively examine the performance of our method across a diverse set of tasks, using both MT-Bench and the challenging red teaming benchmark RED-EVAL. Since prior works that use these benchmarks for evaluation, such as (Tunstall et al., 2023; Chen et al., 2024), commonly employ pre-trained models built from Mistral-7B, we also use the Mistral-7B-Instruct model as our base model for alignment. For convenience, we designate it as Mistral-7B-SFT. Other models based on Mistral-7B-Instruct are denoted as Mistral-7B-DPO, Mistral-7B-PPO, and Mistral-7B-CR, respectively. Subsequently, we employ these models in the benchmark to evaluate their performance capabilities.\n\nTable 5 presents the evaluation results on MT-Bench, capturing the average performance of the chatbot’s capabilities across 8 different dimensions. Leveraging contrastive rewards, i.e., Mistral-7B-CR, consistently outperforms the baseline models. We also include results from several open-source models alongside our methods for comparison. Notably, on MT-Bench, the model fine-tuned by RLHF-CR has surpassed the performance of Llama-70B-chat with a big margin (6.86 MT Score). For models other than Mistral, we directly copy the MT score from the public leaderboard, therefore excluding the 1st and 2nd results in Table 5.\n\nDetailed results in different dimensions are presented in Appendix B. We also perform tests on the “jailbreaking” dataset RED-EVAL, employing two question banks filled with challenging queries. As Table 6 illustrated, our method demonstrated the lowest Attack Success Rate (ASR) across all red-teaming prompt templates, indicating robust performance against these intricate scenarios."
        },
        {
            "section_id": "5",
            "parent_section_id": null,
            "section_name": "Related Work",
            "text": "LLM Alignment is typically categorized by whether a reward model is used. A popular method is Reinforcement Learning from Human Feedback (Ouyang et al., 2022  ###reference_b37###; Schulman et al., 2017  ###reference_b41###) (RLHF), which has gained traction for its effectiveness in integrating human feedback.\nIn addition to these, there are preference learning methods that do not use reinforcement learning, such as RSO (Liu et al., 2024  ###reference_b33###), RRHF (Yuan et al., 2023  ###reference_b54###), and RAFT (Dong et al., 2023  ###reference_b17###).\nAll of these methods employ reward models for optimization.\nHowever, human preferences are often noisy and may exhibit ambiguous or conflicting intentions (Ouyang et al., 2022  ###reference_b37###; Bai et al., 2022a  ###reference_b4###). Limited preference data can also result in reward models inaccurately generalizing human intent (Lambert et al., 2023  ###reference_b28###; Pitis, 2023  ###reference_b38###). These imperfect reward models can cause language models to be prone to training instability (Zheng et al., 2023b  ###reference_b57###), overoptimization (Gao et al., 2022  ###reference_b20###), or reward hacking issues (Skalse et al., 2022  ###reference_b43###).\nIn contrast, methods like DPO (Rafailov et al., 2023  ###reference_b39###), SLiC-HF (Zhao et al., 2023  ###reference_b55###) and IPO (Azar et al., 2023  ###reference_b3###) avoid using reward models , but they are vulnerable to out-of-distribution data (Li et al., 2023  ###reference_b31###). Our approach improves the reward modeling in RLHF and can also be adapted to other RLHF methods.\nSeveral studies have explored the use of contrastive learning (Chen et al., 2020  ###reference_b9###) to enhance the reward model’s ranking or comparing capabilities: For instance, some research (Kang et al., 2023  ###reference_b25###; Wang et al., 2024  ###reference_b49###) incorporates contrastive learning in the reward modeling stage, effectively increasing the distinguish capability over positive and negative samples.\nHejna et al. (2023  ###reference_b22###) propose contrastive preference learning, an algorithm that learns policies from preferences without the need to learn a reward function.\nPairwise PPO generates pairs of responses for each prompt and updates the policy using only relative feedback (from reward differences), which enhances the stability and efficiency of policy optimization (Wu et al., 2023  ###reference_b52###).\nOur method introduces a penalty term constructed from contrastive rewards to refine RLHF for LLM alignment, leading to significant performance improvements by enabling self-assessment and autonomous improvements in the RL agent."
        },
        {
            "section_id": "6",
            "parent_section_id": null,
            "section_name": "Conclusion and Discussion",
            "text": "We aim to address issues related to the quality and instability of reward models in RLHF by introducing a simple yet effective method. By integrating offline sampling and contrastive rewards, our method improves the robustness of the RLHF process. Empirical results demonstrate the effectiveness of our method, highlighting its ability to mitigate flaws and uncertainties in reward models. We conduct extensive experiments, including evaluations by GPT models and human annotators.\n\nOur work takes inspiration from the noisy label literature, where the goal is to analyze and learn accurately from the imperfect supervision signals. The ongoing discussion on the quality of reward models builds a connection to the noisy label problem since effectively the RL stage is dealing with potentially noisy feedback from the reward model. We believe further connecting with the ideas developed in the noisy label literature can help fully unlock the power of RLHF.\n\nWe exclusively apply contrastive rewards to SFT models. Nevertheless, our approach holds significant potential for implementing contrastive rewards in iterative settings. In essence, after obtaining the policy from the initial round of policy optimization, we can use this policy as the base model for contrastive rewards and initiate a second round of RL optimization. This iterative process has the potential to further enhance the performance."
        }
    ]
}