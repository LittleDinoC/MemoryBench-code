{
    "title": "\\faRulerRuler: What’s the Real Context Size of Your Long-Context Language Models?",
    "abstract": "To provide a more comprehensive evaluation of long-context language models (LMs), we create a new synthetic benchmark Ruler with flexible configurations for customized sequence length and task complexity. Ruler introduces new task categories such as multi-hop tracing and aggregation to test behaviors beyond searching from context. We evaluate ten long-context LMs with 13 representative tasks in Ruler. All models exhibit large performance drops as the context length increases. While these models all claim context sizes of 32K tokens or greater, only four models (GPT-4, Command-R, Yi-34B, and Mixtral) can maintain satisfactory performance at the length of 32K. Our analysis of Yi-34B, which supports a context length of 200K, reveals large room for improvement as we increase input length and task complexity. We open source Ruler to spur comprehensive evaluation of long-context LMs. ††* Authors contributed equally.",
    "sections": [
        {
            "section_id": "1",
            "parent_section_id": null,
            "section_name": "Introduction",
            "text": "Recent advancements in AI system engineering (Dao et al., 2022; Jacobs et al., 2023; Fu et al., 2024) and language model designs (Chen et al., 2023; Xiong et al., 2023) have enabled efficient scaling up of context length for language models (Liu et al., 2024a; Young et al., 2024). Previous works (AI21, 2024; X.AI, 2024; Reid et al., 2024; Anthropic, 2024) commonly adopt synthetic tasks, such as passkey retrieval (Mohtashami & Jaggi, 2023) to evaluate long-context LMs. However, these evaluations are used inconsistently across works and reveal merely the retrieval capability, failing to gauge other forms of long-context understanding.\n\nIn this work, we propose Ruler, a new benchmark to evaluate long-context modeling capabilities for language models. Ruler contains four task categories to test behaviors beyond simple retrieval from context:\n\n1. Multi-hop Tracing: we propose variable tracking, a minimal proxy task for coreference chain resolution to check the behavior of tracing entities with multi-hop connections.\n2. Aggregation: we propose common/frequent words extraction, proxy tasks for summarization to test the ability to aggregate relevant information that spans long-range context.\n3. Question Answering: we add distracting information to the input of existing short-context QA datasets to evaluate question answering capability at various context sizes.\n\nCompared to existing realistic benchmarks, Ruler consists solely of synthetic tasks, which offer the flexibility to control sequence length and task complexity. The synthetic input in Ruler reduces reliance on parametric knowledge, which interferes with the utilization of long-context input in realistic tasks (Shaham et al., 2023; Bai et al., 2023).\n\nUsing Ruler, we benchmark GPT-4 (OpenAI: Josh Achiam et al., 2023) and nine open-source models with context length ranging from 4k to 128k. While all models claim context size of 32k tokens or greater, our results indicate that only four of them can effectively handle sequence length of 32K by exceeding a qualitative threshold. Moreover, almost all models fall below the threshold before reaching the claimed context lengths.\n\nTo obtain fine-grained model comparisons, we aggregate performance from 4k to 128k with two weighted average scores where the weights simulate the length distribution of real-world use cases. The top models - GPT-4, Command-R (Cohere, 2024), Yi-34B (Young et al., 2024), and Mixtral (Jiang et al., 2024), consistently outperform other models regardless of the chosen weighting scheme.\n\nWe further analyze Yi-34B, which claims context length of 200K and achieves the 2nd place on Ruler among open-source models. Our results demonstrate large degradation in Yi’s performance as we increase input length and task complexity. At large context sizes, Yi-34B often returns incomplete answers and fails to precisely locate the relevant information. Furthermore, we observe two behaviors emerging with the scaling of context size across multiple models: the increased reliance on parametric knowledge and the increased tendency to copy from context for non-retrieval tasks. Our additional ablations demonstrate that training on longer sequences does not always lead to better performance on Ruler, and that larger model sizes positively correlate with better long-context capabilities. Finally, we show that non-Transformer architectures, such as RWKV and Mamba, still lag behind Transformer by large margins on Ruler.\n\nOur contributions are as follows:\n- We propose a new benchmark Ruler for evaluating long-context language models via synthetic tasks with flexible configurations.\n- We introduce new task categories, specifically multi-hop tracing and aggregation, to test behaviors other than retrieval from long context.\n- We evaluate ten long-context LMs using Ruler and perform analysis across models and task complexities.\n- We open source Ruler to spur future research in long-context language models."
        },
        {
            "section_id": "2",
            "parent_section_id": null,
            "section_name": "Related Work",
            "text": "Numerous long-context language models have been introduced lately owing to the progress in engineering, architectural, and algorithmic designs. Flash attention (Dao et al., 2022  ###reference_b14###; Dao, 2023  ###reference_b13###) and Ring attention (Liu et al., 2023  ###reference_b38###) significantly reduce the memory footprint required for processing long context. Various sparse attention mechanisms (Child et al., 2019  ###reference_b11###; Jaszczur et al., 2021  ###reference_b29###) such as shifted sparse attention (Chen et al., 2024  ###reference_b10###), dilated attention (Ding et al., 2023  ###reference_b15###), and attention sinks (Han et al., 2023  ###reference_b25###; Xiao et al., 2024b  ###reference_b74###) were employed to enable efficient context scaling. Novel position embedding methods were proposed to improve length extrapolation in Transformers (Vaswani et al., 2017  ###reference_b68###), including ALiBi (Press et al., 2022  ###reference_b51###), xPOS (Sun et al., 2023b  ###reference_b59###), and RoPE (Su et al., 2023  ###reference_b56###) variants (Chen et al., 2023  ###reference_b9###; Xiong et al., 2023  ###reference_b75###; Peng et al., 2024  ###reference_b49###; Liu et al., 2024b  ###reference_b40###; Ding et al., 2024  ###reference_b16###; Zhu et al., 2024  ###reference_b81###). Another line of research focuses on reducing context size. This can be achieved by caching previous context using recurrence mechanism (Zhang et al., 2024a  ###reference_b79###; Bulatov et al., 2023  ###reference_b7###; Martins et al., 2022  ###reference_b42###; Wu et al., 2022  ###reference_b71###), or preserving only the salient information within long context via retrieval (Xu et al., 2024  ###reference_b76###; Mohtashami & Jaggi, 2023  ###reference_b44###; Wang et al., 2024  ###reference_b69###; Tworkowski et al., 2024  ###reference_b66###; Xiao et al., 2024a  ###reference_b73###) or compression (Jiang et al., 2023  ###reference_b31###). Finally, novel architectures (Gu et al., 2022  ###reference_b24###; Fu et al., 2023a  ###reference_b19###; Poli et al., 2023  ###reference_b50###; Fu et al., 2023b  ###reference_b20###; Sun et al., 2023a  ###reference_b58###) such as Mamba (Gu & Dao, 2023  ###reference_b23###) and RWKV (Peng et al., 2023  ###reference_b48###) have also been proposed to efficiently handle long-context input.\nOur work is closely related to other works on benchmarking long-context language models. ZeroSCROLLS (Shaham et al., 2023  ###reference_b55###) covers ten realistic natural language tasks, such as long-document QA and (query-based) summarization. L-Eval (An et al., 2024  ###reference_b2###) also uses realistic data, which was filtered manually to ensure quality. LongBench (Bai et al., 2023  ###reference_b6###) contains tasks in a bilingual setting. InfiniteBench (Zhang et al., 2024b  ###reference_b80###) includes tasks with length greater than 100K tokens. LTM (Castillo et al., 2024  ###reference_b8###) targets the evaluation of long-term conversations. To isolate the effect of parametric knowledge, previous works (Dong et al., 2023  ###reference_b17###; Li et al., 2023b  ###reference_b37###) also propose to use documents posted online later than a certain cutoff date, or leverage extremely low-resource materials (Tanzer et al., 2024  ###reference_b60###).\nCompared to realistic benchmarks, synthetic tasks are more flexible to control the setup (e.g., sequence length and task complexity) and less affected by parametric knowledge. Recent works have mostly focused on retrieval-based synthetic tasks(Kamradt, 2023  ###reference_b32###; Mohtashami & Jaggi, 2023  ###reference_b44###; Li et al., 2023a  ###reference_b36###; Liu et al., 2024c  ###reference_b41###), with a few on other types of long-context usage, including various types of reasoning (Tay et al., 2021  ###reference_b61###) and long-range discourse modeling (Sun et al., 2022  ###reference_b57###)."
        },
        {
            "section_id": "3",
            "parent_section_id": null,
            "section_name": "The Ruler Benchmark",
            "text": "Ruler comprises tasks across four categories: retrieval, multi-hop tracing, aggregation, and question answering with all tasks configurable for varying length and complexity (see Table 2 ###reference_###).\n\nOne of the special magic numbers for long-context is: 12345.\nOne of the special magic numbers for large-model is: 54321.\nWhat is the special magic number for long-context mentioned in the provided text?\nAnswer: 12345\nOne of the special magic numbers for long-context is: 12345.\nOne of the special magic numbers for long-context is: 54321.\nWhat are all the special magic numbers for long-context mentioned in the provided text?\nAnswer: 12345 54321\nOne of the special magic numbers for long-context is: 12345.\nOne of the special magic numbers for large-model is: 54321.\nWhat are all the special magic numbers for long-context and large-model mentioned in the provided text?\nAnswer: 12345 54321\nVAR X1 = 12345 …… VAR Y1 = 54321 ……\nVAR X2 = X1 …… VAR Y2 = Y1 ……\nVAR X3 = X2 …… VAR Y3 = Y2 ……\nFind all variables that are assigned the value 12345.\nAnswer: X1 X2 X3\n\naaa bbb ccc aaa ddd eee ccc fff ggg\nhhh iii iii ……\nWhat are the 10 most common words in the above list?\nAnswer: aaa ccc iii ……\naaa bbb ccc aaa ddd eee ccc fff ggg aaa hhh aaa ccc iii iii ……\nWhat are the 3 most frequently appeared words in the above coded text?\nAnswer: aaa ccc iii\n\nDocument 2: …… bbb ……\nQuestion: question\nAnswer: bbb"
        },
        {
            "section_id": "3.2",
            "parent_section_id": "3",
            "section_name": "Multi-hop Tracing: Variable Tracking (VT)",
            "text": "Effective discourse comprehension (van Dijk & Kintsch, 1983  ###reference_b67###) is contingent upon successful recognition of newly mentioned entities and establishing the chain of references co-referring to the same entity (Karttunen, 1969  ###reference_b33###) throughout the long context. We develop a new task variable tracking to emulate a minimal coreference chain resolution (Ng, 2010  ###reference_b45###) task. This task checks the behavior of tracking relevant co-occurrence patterns and drawing skipped connections within long input. Specifically, a variable is initialized with a value, followed by a linear chain of variable name binding statements (e.g.,), which are inserted at various positions of the input. The objective is to return all variable names pointing to the same value. The task complexity can be increased by adding more hops (i.e., the times of name binding) or more chains."
        },
        {
            "section_id": "3.3",
            "parent_section_id": "3",
            "section_name": "Aggregation: Common Words (CWE) and Frequent Words Extraction (FWE)",
            "text": "In Ruler, we introduce a new category as a proxy for summarization tasks where relevant information constitutes much larger portion of the context, and the target output depends on accurate aggregation of the relevant input.\n\nConcretely, we construct an input sequence by sampling words from a pre-defined (synthetic) word list. In the common word extraction task (CWE), words are sampled from discrete uniform distributions, with the number of common words fixed while the number of uncommon words increases with the sequence length. In the frequent words extraction task (FWE), words are sampled from Zeta distribution. We draw inspiration from Zipf’s Law. Let  be the total number of words, determined by the context size, the frequency of the -th ranked word (the -th most frequently appeared word) is , where  is the Zeta function. We set the top-ranked word to noise. Figure 1 shows an illustration of word frequency in the constructed input. A model needs to return the top- frequent words in the context. In CWE,  equals the number of common words. In FWE, we set  to 3, as increasing  leads to poor performance even at small context sizes for most models. The task complexity can be adjusted by varying the number of common words or the parameter of Zeta distribution."
        },
        {
            "section_id": "3.4",
            "parent_section_id": "3",
            "section_name": "Question Answering (QA)",
            "text": "The majority of existing QA datasets (Rajpurkar et al., 2018; Yang et al., 2018; Trivedi et al., 2022) are designed to answer questions based on short passages. These datasets can be extended to simulate long-context input by adding distracting information. In this task category, we insert the golden paragraphs (i.e., the paragraphs that contain answers) into paragraphs randomly sampled from the same dataset."
        },
        {
            "section_id": "4",
            "parent_section_id": null,
            "section_name": "Experiments & Results",
            "text": "We select 10 long-context LLMs, including 9 open-source models and one closed-source model (GPT-4), covering diverse model sizes (6B to 8x7B with MoE architecture) and claimed context lengths (32k to 1M). Complete information about these models is included in Appendix A  ###reference_###. We evaluate all models using vLLM (Kwon et al., 2023  ###reference_b35###), an LLM serving system with efficient KV cache memory management. For all models, we run the inference in BFloat16 on 8 NVIDIA A100 GPUs with greedy decoding.\nWe test all models on 13 tasks ranging diverse complexities from the four categories of Ruler.\nThe test configurations have been selected (shown in Appendix B  ###reference_###) based on a task correlational study described in Appendix C  ###reference_###.\nFor each task, we evaluate each model with 500 examples generated for each length from the series (4k, 8k, 16k, 32k, 64k, 128k), while complying with each model’s necessary chat template.555See Appendix D  ###reference_### for model and tasks templates details.\nTo prevent the model from refusing to answer a query or generating explanations, we append the task input with an answer prefix and check the presence of the target output with recall-based accuracy.\nWe notice large performance degradation in all models as we increase input length in Ruler. To determine the maximum context size a model can effectively handle, we grade each model with a fixed threshold, passing which indicates satisfactory performance at the length of evaluation. We use the performance of Llama2-7b model at the 4K context length as the threshold.\nWe report in Table 3  ###reference_### the maximum length exceeding the threshold as the “effective length” along with the “claimed length”.\nWhile the threshold-based grading reveals the discrepancy between claimed and effective length, it lacks details for fine-grained model comparisons. As such, we use a weighted average score to aggregate model performance across various context sizes. We rank models under two weighting schemes: wAvg. (inc) and wAvg. (dec) where the weight linearly increases and decreases with sequence length respectively. Ideally, the weight for each length should be determined by the length distribution of model usage, here we choose the two schemes to simulate the scenarios where longer sequences (inc) or shorter sequences (dec) dominate the distribution.\nWe include the results of ten long-context LMs in comparison with the Llama2-7B baseline in Table 3  ###reference_###.666Performance of base models and breakdown by task categories can be found in Appendix F  ###reference_###.\nThe performance at a certain length is the average of all 13 tasks in Ruler. While these models all claim effective context of 32K tokens or greater, none of them maintains performance above the Llama2-7B baseline at their claimed length, except for Mixtral, which achieves moderate performance on length doubling the claimed 32K context size. Despite achieving nearly perfect performance on the\npasskey retrieval and the vanilla NIAH task (shown in Appendix E  ###reference_###), all models exhibit large degradation in RULER as sequence length increases. The best performant model on Ruler is GPT-4, which has the highest performance at length of 4k and demonstrates the least but non-marginal degradation (15.4) when extending the context to 128K. The top three ranked open-source models, Command-R, Yi-34B and Mixtral, all use a large base frequency in RoPE and are larger in parameter size than other models.\nDespite having been trained with context size of 1M, the LWM performs worse than Llama2-7B even at 4K. However, it shows smaller degradation with the increase of context size, therefore achieves higher rank than Mistral-7B when longer sequences receive larger weight (wAvg. inc). This result suggests a trade-off in evaluation between absolute performance on short sequences and the relative degradation with the scaling of context size."
        },
        {
            "section_id": "5",
            "parent_section_id": null,
            "section_name": "Task Error Analysis",
            "text": "We evaluate Yi-34B-200K, the 2nd best open-source model on Ruler, with increased input lengths (up to 256K) on more complex tasks to understand the effect of task configurations and failure modes on Ruler.\n\nConsistent with previous works (Liu et al., 2024a; Reid et al., 2024), we notice significant degradation in performance when the model needs to retrieve multiple items from a long input. For instance, increasing the number of queries from 1 to 8 drops the performance by 15 points. When the model needs to retrieve multiple values associated with the same key, Yi often outputs duplicated answers without returning the complete set of values, implying uneven associations between the key and each of its values.\n\nWe notice that Yi has a strong tendency to copy from context verbatim when scaling the input length. This tendency is most notable in variable tracking (VT) and common words extraction (CWE) where we include one in-context demonstration at the beginning of the sequence. Over 80% of Yi’s output in the CWE task at 128K is simply a string copied from the one-shot example, whereas the copying is nonexistent for short sequences. We also experimented with removing the one-shot example. The model will simply copy the string of the beginning of the input, likely due to the attention sinks (Xiao et al., 2024b). This copying behavior is also present in the LWM model and LongAlpaca, however it is less prevalent in other models, such as Mixtral. This finding further reinforces the need to test behaviors other than retrieval given long input context.\n\nFor the variable tracking task, both adding more chains and more hops contribute to large degradation in Yi’s performance. Yi consistently degrades in the more-hops setting as we increase context size, whereas the degradation in the more-chains setting is most significant for lengths greater than 128K. Besides the aforementioned copying issue, Yi makes errors due to incorrectly returning empty strings or variables from other chains, implying a lack of ability to reliably trace the same entity within long context. These errors are also frequently observed in models that do not exhibit the copying behavior.\n\nWe observe two common failure modes in aggregation tasks: incorrect use of parametric knowledge and inaccurate aggregation. Models that do not exhibit the copying issue in the CWE task, sometimes ignore the contextual information and instead use parametric knowledge to answer the query, especially at large context sizes. For instance, Mistral (7b-instruct-v0.2) returns high frequency words, such as “the”, “an”, “a”, as output without counting the words in context. For the FWE task which demonstrates less the copying issue, Yi fails to correctly output the top frequent words as we decrease the in Zeta distribution. Decreasing leads to smaller difference in frequency among words, increasing the difficulty to distinguish the top-frequent words.\n\nFor the QA tasks, Yi’s performance approaches its no-context baseline as we extend the context with distracting paragraphs. The degradation stems primarily from hallucination and reduced reliance on contextual information. We notice that, at large context sizes, model predictions sometimes are irrelevant to the question and can coincide with the answers of its no-context baseline. The overall worse performance in QA tasks confirms that the fuzzy matching between a query and a relevant paragraph in long context is a more challenging setting."
        },
        {
            "section_id": "6",
            "parent_section_id": null,
            "section_name": "Model Analysis",
            "text": "###figure_11### ###figure_12### ###figure_13### ###figure_14### Do models trained with larger context sizes perform better on Ruler? We evaluate the suite of LargeWorldModels (Liu et al., 2024a  ###reference_b39###, LWM) of equal parameter size and trained up to various context lengths. Figure 4  ###reference_### (left & middle-left) shows that larger context sizes overall lead to better performance, but the ranking can be inconsistent for long sequences. For instance, the model trained with 1M context size (LWM-1M) is worse than the one with 512K at length of 256K, likely due to insufficient training for adjusting to the new base frequency in RoPE. Moreover, we observe abrupt performance drops when models need to extrapolate to unseen lengths (e.g., LMW-128K given input of 256K), and almost linear degradation with input length on log scale within the max training context size.\nThe top models in our main results are much larger than other models. To ablate the effect of model size, we evaluate Yi-34B-200k, Yi-9B-200k, and Yi-6B-200k, all trained up to the same context length using the same data blend. Figure 4  ###reference_### (middle-right) shows that the 34B model is significantly better than the 6B model on Ruler for both performance at length of 4K and the relative degradation, suggesting the benefit of scaling model sizes for better long-context modeling.\nWe evaluate the effective context length for two models with non-Transformer architectures: RWKV-v5 (Peng et al., 2023  ###reference_b48###) and Mamba-2.8B-slimpj (Gu & Dao, 2023  ###reference_b23###). We find that both models demonstrate significant degradation when extending context size to 8K, and both underperform the Transformer baseline Llama2-7B by large margins up till the length of 4K, beyond which Llama2 shows poor length extrapolation performance (Figure 4  ###reference_### right)."
        },
        {
            "section_id": "7",
            "parent_section_id": null,
            "section_name": "Conclusion",
            "text": "We present Ruler, a synthetic benchmark for evaluating long-context language models. Ruler contains diverse task categories, retrieval, multi-hop tracing, aggregation, and question answering, providing a flexible and comprehensive evaluation of LLM’s long-context capabilities. We benchmark ten long-context LMs using Ruler with context sizes ranging from 4K to 128K. All models fail to maintain their performance in Ruler tasks as we increase input length. We observe common failure modes at large context sizes, including the failure to ignore distractors and ineffective utilization of long context (e.g., simply copy from context or use parametric knowledge instead). We show that Ruler is challenging for even the top-ranked open-source models as we increase task complexity. Our analysis further reveals the large potential for improvement on Ruler and the benefit of scaling model sizes in achieving better long context capabilities."
        }
    ]
}