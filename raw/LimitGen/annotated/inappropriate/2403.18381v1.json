{
    "title": "Improving Attributed Text Generation of Large Language Models via Preference Learning",
    "abstract": "Large language models have been widely adopted in natural language processing, yet they face the challenge of generating unreliable content. Recent works aim to reduce misinformation and hallucinations by resorting to attribution as a means to provide evidence (i.e., citations). However, current attribution methods usually focus on the retrieval stage and automatic evaluation that neglect mirroring the citation mechanisms in human scholarly writing to bolster credibility.\nIn this paper, we address these challenges by modeling the attribution task as preference learning and introducing an Automatic Preference Optimization (APO) framework. First, we create a curated collection for post-training with 6,330 examples by collecting and filtering from existing datasets. Second, considering the high cost of labeling preference data, we further propose an automatic method to synthesize attribution preference data resulting in 95,263 pairs. Moreover, inspired by the human citation process, we further propose a progressive preference optimization method by leveraging fine-grained information.\nExtensive experiments on three datasets (i.e., ASQA, StrategyQA, and ELI5) demonstrate that APO achieves state-of-the-art citation F1 with higher answer quality. 111We will release the code upon publication.",
    "sections": [
        {
            "section_id": "1",
            "parent_section_id": null,
            "section_name": "Introduction",
            "text": "Large Language Models (LLMs) have demonstrated emergent abilities and have gained widespread application in Natural Language Processing (NLP) Brown et al. (2020  ###reference_b10###); Wei et al. (2022  ###reference_b43###); OpenAI (2022  ###reference_b30###); Anil et al. (2023  ###reference_b2###). For example, LLMs have shown remarkable in-context learning capabilities across a variety of domains and tasks Dong et al. (2023  ###reference_b12###). Although LLMs have been widely adopted, a prominent issue is that they produce hallucinations in certain situations Ye et al. (2023a  ###reference_b46###); Zhang et al. (2023  ###reference_b49###). In other words, they generate information that sounds plausible but is nonfactual, thereby limiting their applicability in the real world. To mitigate hallucinations, researchers have resorted to grounding statements in responses generated by LLMs to supported evidence, either by providing rationales or by adding citations to the statements Li et al. (2023a  ###reference_b24###); Liu et al. (2023  ###reference_b28###).\nRecent works have utilized external knowledge sources such as retrieved documents and knowledge graphs for attribution Shuster et al. (2021  ###reference_b36###); Li et al. (2023c  ###reference_b26###). Generally, these works are divided into two types: 1) the model generates an answer with citations based on the retrieved documents Li et al. (2023b  ###reference_b25###); 2) an answer is first generated, then modified again to add attribution references by retrieving with query and initial answer Gao et al. (2023a  ###reference_b14###). However, these works focus mainly on the retrieval stage Ye et al. (2023b  ###reference_b47###) and the evaluation process Yue et al. (2023  ###reference_b48###). Considering the selection of the model’s desired responses and behavior from its very broad knowledge and capabilities, it is more necessary to optimize the generation process, not only reducing the hallucination of the original answer but also avoiding the hallucination of the attribution process.\nOn the other hand, fine-tuning LLMs after pre-training can also significantly improve performance for users’ downstream tasks. First, given positive examples of correct behavior, supervised fine-tuning can be performed using standard likelihood-based training. Secondly, given positive and negative examples (binary feedback or pairwise feedback), methods such as unlikelihood training on negative examples Welleck et al. (2020  ###reference_b44###) or RLHF-PPO Ziegler et al. (2019  ###reference_b52###) can be used for learning. However, these methods usually suffer from expensive data collection process, reward model training, sparse reward and text degeneration problems, making them difficult to use in practical applications Azar et al. (2023  ###reference_b5###).\nIn this paper, inspired by the citation mechanisms in human scholarly writing Brooks (1986  ###reference_b9###); Teplitskiy et al. (2022  ###reference_b40###), we address these challenges by conceptualizing the attribution task for LLMs as preference learning and proposing an Automatic Preference Optimization (APO) framework, as shown in Figure 1  ###reference_###. Initially, we assemble a curated dataset comprising 6,330 examples sourced and refined from existing datasets for post-training. This step makes the LLMs know the basic format and requirements of attribution.\nConsidering the substantial cost and extremely time-consuming of preference pair annotations, we thus introduce an automated approach to generate attribution preference data, yielding 95,263 pairs. Furthermore, drawing inspiration from the human process of citation and direct preference optimization Rafailov et al. (2023  ###reference_b32###), we propose a progressive preference optimization method with experience replay bypassing the need for explicit reward modeling or reinforcement learning.\nWe conduct the extensive experiment on three datasets (i.e., ASQA, StrategyQA, and ELI5). The experiment results demonstrate that APO surpasses compared baselines across all datasets with improved citation F1 along with higher response quality. Our contributions are summarized as follows:\nTo the best of our knowledge, we are the first to apply preference learning for attribution tasks. We also show that our method can be applied under synthesized preference scenarios.\nWe establish a full data collection pipeline for attribution tasks and will open-source our all authorized data after publication for future research.\nWe propose a progressive preference optimization method to alleviate the sparse reward problem by leveraging fine-grained information. We further benchmark existing direct preference optimization methods and provide insights for attribution tasks.\n###figure_1###"
        },
        {
            "section_id": "2",
            "parent_section_id": null,
            "section_name": "Related Work",
            "text": ""
        },
        {
            "section_id": "2.1",
            "parent_section_id": "2",
            "section_name": "Text Generation for Verification",
            "text": "Prior works have studied methods and evaluations for verification that identify supporting sources for model outputs. For instance,  Rashkin et al. (2021  ###reference_b33###) introduce the concept of Attributable to Identified Sources (AIS) which transforms model outputs into standalone, interpretable propositions. The response s can be attributed to a source P if they meet the intuitive criterion “According to P, s”. Bohnet et al. (2022  ###reference_b7###) adapt the AIS framework for QA scenarios. Further, Gao et al. (2023b  ###reference_b15###) extrapolate AIS to evaluate generated text of LLMs with citations. Additionally, several works focus on building and using automated AIS evaluations  Honovich et al. (2022  ###reference_b18###); Gao et al. (2023a  ###reference_b14###); Liu et al. (2023  ###reference_b28###). For a comprehensive overview, please refer to Li et al. (2023a  ###reference_b24###). In contrast to existing approaches, our work broadens the scope of attribution beyond just verifiable text generation and devises a methodology to enhance these attributions which frames it as a preference learning problem."
        },
        {
            "section_id": "2.2",
            "parent_section_id": "2",
            "section_name": "Preference Optimization Methods",
            "text": "Preference Optimization (PO) methods significantly improve generate quality to align with human values Christiano et al. (2017  ###reference_b11###); Ziegler et al. (2019  ###reference_b52###); Stiennon et al. (2020  ###reference_b38###); Bai et al. (2022  ###reference_b6###). It usually first collects pairs of generations under the same context and a pairwise human preference to indicate which generation is better. Then the PO is used to optimize generating policy to generate better candidates from the pair.\nFor example, Reinforcement Learning from Human Feedback (RLHF) is a model-based algorithm to optimize preference learning Ouyang et al. (2022  ###reference_b31###).\nHowever, the RLHF process is complex, time-consuming, and unstable. The direct PO uses an off-policy algorithm to directly optimize the generating policy, eliminating the need for a reward model Rafailov et al. (2023  ###reference_b32###); An et al. (2023  ###reference_b1###); Kang et al. (2023  ###reference_b22###); Zhao et al. (2023  ###reference_b50###). These approach are more data-efficient and stable.\nFor example, DPO uses the Bradley-Terry model  Bradley and Terry (1952  ###reference_b8###) and log-loss, which can lead to over-fitting to the preference data, especially when preference is deterministic and ignores the KL-regularization term.\nThe IPO algorithm Azar et al. (2023  ###reference_b5###) addresses this issue by using a root-finding MSE loss to solve the problem of ignoring KL-regularization when preference is deterministic. However, these methods fail to fully account for more fine-grained preferences and that is exactly what we want to do."
        },
        {
            "section_id": "3",
            "parent_section_id": null,
            "section_name": "Preliminary",
            "text": "The main pipeline of preference learning usually consists of: 1) pretraining and Supervised Fine-Tuning (SFT), where SFT is not a must; 2) preference data collection;\n3) preference optimization.\nPreference learning typically starts with a pretrained LLMs or LLMs fine-tuned on high-quality data using maximum likelihood estimation.\nThe final policy  after this phase is represented as\nwhere  denotes the training data distribution.\nAfter pretraining and SFT phase,  is prompted by context ,\nand generate two responses . Then  is labeled by humans to judge which response is preferred and denote  if  is preferred,\nand  if  is preferred. We define a new symbol , and all <> consist the preference dataset :\nIn the final phase, the prevailing method uses reinforcement learning algorithm to learn an explicit or implicit\nreward from the preference data, and then using on-policy or off-policy policy gradient algorithm to maximize the reward.\nRecently, some methods have derived the optimal policy using reward maximization under KL-regularization and also\nderive a loss with optimal policy as its solution,\nthen learn the optimal policy by minimizing the derived loss on empirical dataset.\nThe RLHF uses standard two-phase reward model-based reinforcement learning to maximize the reward. It contains two steps:\n1) reward estimation from preference data 2) reward maximization using PPO algorithm.\nIt aims to maximize reward with a KL constraint on the reference model  (inputs  omitted):\nwhere  is the regularization weight and  is the reward function learned using\nthe Bradley-Terry model on the preference dataset of generating .\nDPO eliminates the training of reward model.\nIt derives a loss on the current policy  (,  omitted):\ni.e., the binary cross entropy with\nand target . We describe more PO methods in details in Appendix A  ###reference_###."
        },
        {
            "section_id": "4",
            "parent_section_id": null,
            "section_name": "Methodology",
            "text": "We construct the post-training data from training sets using existing attribution datasets including EVIGSE Liu et al. (2023  ###reference_b28###), ExpertQA Malaviya et al. (2023  ###reference_b29###) and HARGID Kamalloo et al. (2023  ###reference_b21###). We select these datasets because they are high-quality attribution datasets with diverse domains and sources annotated by human experts or powerful LLMs. After preprocessing and formatting, the final post-training data collection includes 6,330 samples. The pre-processing details are shown in Appendices B  ###reference_### and C  ###reference_###, and the statistics of training data are shown in Table 1  ###reference_###.\nAfter that, instruction, documents and question are formatted to be the input while answer composed of multiple statements is formatted as output. We tune the model using autoregressive language modeling objectives, resulting in initial generator.\nIn general, attributed text generation should be both relevant and supported Asai et al. (2023b  ###reference_b4###). Being relevant needs the reference document in the answer to be helpful in handling the question. It is used to measure whether provides useful information to solve. Being supported asks the generated text be grounded on the reference documents. It is used to measure whether all of the verification-worthy statements in are supported by.\nFollowing the requirements above, we first get initial responses and related labels for each query with the Algorithm 1  ###reference_###.\nThe query comes from multiple open domain tasks or high-quality instruction data sets shown in Table 1  ###reference_###. The source of retrieved documents is English Wikipedia. The retriever we use here is gtr-t5-large222huggingface.co/sentence-transformers/gtr-t5-large  ###reference_5-large###.\nThe objective is to generate the attributed text with relevant and supported labels for related documents using the critic model. Here, we use pre-trained selfrag_llama2_7b333huggingface.co/selfrag/selfrag_llama2_7b  ###reference_### as in Asai et al. (2023b  ###reference_b4###) because it can give fine-grained feedback using reflection tokens.\nAfter that, we generate preference pairs using manual data collection for preference pairs.\nSpecifically, we determine whether the citations of each statement of query are all related to it based on the relevant tags. If it is all relevant, we add the current statement and its preceding statements to the set for subsequent processing. For example, if meets the requirement, we add to. The motivation here is that we want to select the statements that can answer the question based on the document as the initial set.\nThen, for each entry in, we first retrieve another top- () documents and filter them into 10 irrelevant documents scored by relevant logits predicted by. If all documents in are relevant, we use the last 10 documents as.\nAfter that, we generate the positive and negative pair for each statement. There are two situations: the statement is fully supported by and otherwise. For the first situation, we first expand with supported document by second judgment in using. Then, we generate one positive statement using,, and new and two negative statements using,, and,, new, error instruction respectively.\nThus, there are two preference pairs in this context.\nFor the second situation, we generate one positive statement using,, and new and one negative statement using,, error instruction. The full procedure is shown in Algorithm 2  ###reference_###.\nIn the generation of negative samples, we use the error instruction, which defines two types: irrelevant but supported means the generated text is grounded on unhelpful reference documents, while relevant but unsupported further has three fine-grained subtypes: 1) fabricated statement refers to the generated text contains facts or information that cannot be derived from reference documents; 2) mistaken synthesis means that several reference documents are used, but facts or logics are mistakenly intermingled. The generated text thus contains factual error or logic error; 3) unintentional omission means that reference documents are used, but the key points are incomplete. There are no factual errors in generated text, but some information is omitted.\nThe irrelevant but supported error derives from attribution hallucination, whereas the relevant but unsupported error is the result of generation hallucination. Note that irrelevant and unsupported errors are not included, since it is more like easy negatives. The details of error instructions are in Appendix D  ###reference_###.\nTo reinforce the preference feature and alleviate sparse reward problem Zheng et al. (2023  ###reference_b51###); Lightman et al. (2023  ###reference_b27###), we propose a progressive preference optimization method. Considering generations can be separated into several consecutive statements, each statement may contain hallucinations at all. The entire response-level reward preference modeling performs in the global"
        },
        {
            "section_id": "4.1",
            "parent_section_id": "4",
            "section_name": "Problem Formulation",
            "text": "Formally, consider a query  and a corpus of text documents . The goal is to produce an output , where  is a collection of  distinct statements: . Each statement  is associated with a set of citations . This set  is defined as , where each  is a document from the corpus . For application purposes, the output from LLMs can be divided into individual statements using sentence boundaries. This approach is utilized because a single sentence typically encapsulates a coherent statement while maintaining brevity, facilitating easy verification. Regarding the citation format, citations are typically presented in square brackets, e.g., The sun is formed approximately 4.6 billion years ago [1][2]. However, it should be noted that these citations can be attributed to specific phrases as well, not just at the end of sentences.\nMoreover, in this paper, we define generation hallucination refers to a situation where the model generates content that is not based on factual information and attribution hallucination means that the statement corresponding to one citation is unfaithful or not supported by the referred source content. To refine the output, we employ manual data collection for preference pairs, which allows us to capture more accurate preferences by manually selecting preference pairs from data."
        },
        {
            "section_id": "4.2",
            "parent_section_id": "4",
            "section_name": "Overall Framework",
            "text": "As shown in Figure 2  ###reference_###, we introduce the APO framework to apply preference learning for attribution task. The APO framework consists of the post-training procedure to ground the base model for attribution (§4.3  ###reference_###), and the manual data collection for preference pairs procedure to address both generation hallucination and attribution hallucination (§4.4  ###reference_###)."
        },
        {
            "section_id": "4.3",
            "parent_section_id": "4",
            "section_name": "Post-training",
            "text": "###table_1### The goal of post-training procedure is to ensure that given a specific question and a corpus of text documents, the model can be successfully instructed to generate answer and add citation for each statement in its response when necessary. We construct the post-training data from training sets using existing attribution datasets including EVIGSE Liu et al. (2023 ###reference_b28### ###reference_b28###), ExpertQA Malaviya et al. (2023 ###reference_b29### ###reference_b29###) and HARGID Kamalloo et al. (2023 ###reference_b21### ###reference_b21###). We select these datasets because they are high-quality attribution datasets with diverse domains and sources annotated by human experts or powerful LLMs. After preprocessing and formatting, the final post-training data collection includes 6,330 samples. The pre-processing details are shown in Appendices B ###reference_### ###reference_### and C ###reference_### ###reference_###, and the statistics of training data are shown in Table 1 ###reference_### ###reference_###. After that, instruction, documents and question are formatted to be the input while answer composed of multiple statements is formatted as output. We tune the model using manual data collection for preference pairs, resulting in initial generator."
        },
        {
            "section_id": "4.4",
            "parent_section_id": "4",
            "section_name": "Preference Optimization",
            "text": "In this section, we describe our preference optimization procedure to enable a model-agnostic approach for improving the quality of generated responses. First, considering the cost of labeling preference data, we devise an automatic data collection algorithm motivated by errors where previous models may have misattributed. Second, we propose manual data collection for preference pairs to amplify the preference signal by using synthesized preference pairs. We further apply the experience replay to alleviate the over-fitting and text degradation phenomenon due to the distribution shift introduced by automatic data generation.\nIn general, attributed text generation should be both relevant and supported Asai et al. (2023b  ###reference_b4###  ###reference_b4###). Being relevant needs the reference document in the answer to be helpful in handling the question. It is used to measure whether  provides useful information to solve . Being supported asks the generated text be grounded on the reference documents. It is used to measure whether all of the verification-worthy statements in  are supported by .\nFollowing the requirements above, we first get initial responses and related labels for each query with the Algorithm 1  ###reference_###  ###reference_###.\nThe query comes from multiple open domain tasks or high-quality instruction data sets shown in Table 1  ###reference_###  ###reference_###. The source of retrieved documents is English Wikipedia. The retriever  we use here is gtr-t5-large222huggingface.co/sentence-transformers/gtr-t5-large  ###reference_5-large###  ###reference_5-large###.\nThe objective is to generate the attributed text with relevant and supported labels for related documents using the critic model . Here, we use pre-trained selfrag_llama2_7b333huggingface.co/selfrag/selfrag_llama2_7b  ###reference_###  ###reference_### as  in Asai et al. (2023b  ###reference_b4###  ###reference_b4###) because it can give fine-grained feedback using reflection tokens.\nAfter that, we generate preference pairs using an automatic collection algorithm.\nSpecifically, we determine whether the citations  of each statement  of query  are all related to it based on the relevant tags. If it is all relevant, we add the current statement and its preceding statements  to the set  for subsequent processing. For example, if  meets the requirement, we add  to . The motivation here is that we want to select the statements that can answer the question based on the document as the initial set.\nThen, for each entry in , we first retrieve another top- () documents and filter them into 10 irrelevant documents  scored by relevant logits predicted by . If all documents in  are relevant, we use the last 10 documents as .\nAfter that, we generate the positive and negative pair for each statement . There are two situations: the statement  is fully supported by  and otherwise. For the first situation, we first expand  with supported document by second judgment in  using . Then, we generate one positive statement using ,  and new  and two negative statements using , ,  and , , new , error instruction  respectively.\nThus, there are two preference pairs in this context.\nFor the second situation, we generate one positive statement using ,  and new  and one negative statement using , , , error instruction . The full procedure is shown in Algorithm 2  ###reference_###  ###reference_###.\nIn the generation of negative samples, we use the error instruction , which defines two types: irrelevant but supported means the generated text  is grounded on unhelpful reference documents , while relevant but unsupported further has three fine-grained subtypes: 1) fabricated statement refers to the generated text contains facts or information that cannot be derived from reference documents; 2) mistaken synthesis means that several reference documents are used, but facts or logics are mistakenly intermingled. The generated text thus contains factual error or logic error; 3) unintentional omission means that reference documents are used, but the key points are incomplete. There are no factual errors in generated text, but some information is omitted.\nThe irrelevant but supported error derives from attribution hallucination, whereas the relevant but unsupported error is the result of generation hallucination. Note that irrelevant and unsupported errors are not included, since it is more like easy negatives. The details of error instructions are in Appendix D  ###reference_###  ###reference_###.\nTo reinforce the preference feature and alleviate sparse reward problem Zheng et al. (2023  ###reference_b51###  ###reference_b51###); Lightman et al. (2023  ###reference_b27###  ###reference_b27###), we propose a progressive preference optimization method. Considering generations can be separated into several consecutive statements, each statement may contain hallucinations at all. The entire response-level reward preference modeling performs in the global context and potentially oversights the fine-grained deterministic preferences"
        },
        {
            "section_id": "4.5",
            "parent_section_id": "4",
            "section_name": "Inference and Refinement",
            "text": "During inference, for query ,  is first retrieved and then sent to  output to the final answer  consists of  statements. As there may not be all statements correctly attributing documents, we additionally perform the post-hoc refinement after the original generation. We maintain a collection of citations . Instead of using the progressive preference optimization method, we perform manual data collection for preference pairs. Starting from the last statement of , if the current  has the citations, update the  to the citations of the current ; if the current  does not have a citation, add the current citation set  to this statement until all  statements have been traversed. Then we concatenate these  statements together as the final answer ."
        },
        {
            "section_id": "5",
            "parent_section_id": null,
            "section_name": "Setup",
            "text": "We mainly focus on attributable long-form question-answering (QA) task using ASQA dataset and ELI5 subsets from Gao et al. (2023b  ###reference_b15###). In addition to these factoid long-form QA tasks, we test the generation quality on StrategyQA dataset Geva et al. (2021  ###reference_b17###) which focuses on open-domain QA where the required reasoning steps are implicit in the question. We use the official test set as our evaluation set.\nFollowing Gao et al. (2023b  ###reference_b15###), we report citation recall, precision, and F1 which uses TRUE Honovich et al. (2022  ###reference_b18###) as the attribution evaluation model  to automatically examine whether the cited documents entail the model generation.\nFor ASQA dataset, we report the recall of correct short answers (EM-R) by checking whether the short answers (provided by the dataset) are exact substrings of the generation.\nFor ELI5 dataset, we report the claim recall (Claim) to check whether the model output entails the sub-claims, that are generated by text-davinci-003 Ouyang et al. (2022  ###reference_b31###).\nFor StrategyQA dataset, we report the accuracy for task performance."
        },
        {
            "section_id": "5.1",
            "parent_section_id": "5",
            "section_name": "Datasets and Evaluation Metrics",
            "text": "We mainly focus on attributable long-form question-answering (QA) task using ASQA dataset and ELI5 subsets from Gao et al. (2023b  ###reference_b15###  ###reference_b15###). In addition to these factoid long-form QA tasks, we test the generation quality on StrategyQA dataset Geva et al. (2021  ###reference_b17###  ###reference_b17###) which focuses on open-domain QA where the required reasoning steps are implicit in the question. We use the official test set as our evaluation set.\nFollowing Gao et al. (2023b  ###reference_b15###  ###reference_b15###), we report citation recall, precision, and F1 which uses TRUE Honovich et al. (2022  ###reference_b18###  ###reference_b18###) as the attribution evaluation model  to automatically examine whether the cited documents entail the model generation.\nFor ASQA dataset, we report the recall of correct short answers (EM-R) by checking whether the short answers (provided by the dataset) are exact substrings of the generation.\nFor ELI5 dataset, we report the claim recall (Claim) to check whether the model output entails the sub-claims, that are generated by text-davinci-003 Ouyang et al. (2022  ###reference_b31###  ###reference_b31###).\nFor StrategyQA dataset, we report the accuracy for task performance."
        },
        {
            "section_id": "5.2",
            "parent_section_id": "5",
            "section_name": "Competitive Methods",
            "text": "We compare APO with several baselines. For each baseline, we use gtr-t5-large as our retriever.\nIn-Context Learning (ICLCite): We prompt LLMs with few-shot examples, each consisting of a query, a set of retrieved documents and an answer with inline citations. The LLMs can in-context learn from the examples and generate grounded responses for the test query and retrieved documents.\nPost-Hoc Cite (PostCite): Given query , we first instruct LLMs to answer  without retrieved documents. Then, we use the attribution evaluation model  to link each statement to the most relevant document retrieved by the query.\nPost-Hoc Attribute (PostAttr): Instead of citing the most relevant document, for each statement, we further retrieve a set of k documents and then use the  to link to the document that maximally supports the statement by threshold.\nSelf-RAG Asai et al. (2023b  ###reference_b4###): Self-RAG is the state-of-the-art (SoTA) method that adaptively retrieves documents on-demand. It generates with reflection on retrieved documents and its generations by special token control.\nAGREE Ye et al. (2023b  ###reference_b47###): AGREE leverages test-time adaptation to reinforce unverified statements which iteratively improves the responses of LLMs. It tunes a pre-trained LLM to self-ground its response in retrieved documents using automatically collected data."
        },
        {
            "section_id": "5.3",
            "parent_section_id": "5",
            "section_name": "Implementation Details",
            "text": "If not specified, we retrieve the top 5 documents as the related documents to  and we set the decoding temperature to 0.01 during inference. For the post-training, we tune the model for 2 epochs with a learning rate of 5e-5. For the preference optimization, we tune the model with LoRA Hu et al. (2022  ###reference_b20###) for 1 epoch, and we set alpha to 2 and lora ranks to 16. We set  to 100. We use llama-2-13b-base Touvron et al. (2023  ###reference_b41###) for fair comparison. We run all the experiments on NVIDIA A100 80G GPUs."
        },
        {
            "section_id": "6",
            "parent_section_id": null,
            "section_name": "Results",
            "text": ""
        },
        {
            "section_id": "6.1",
            "parent_section_id": "6",
            "section_name": "Main Result",
            "text": "Table 2  ###reference_### shows the comparison results of APO with other baselines on three datasets. In terms of correctness and citation quality, our method outperforms the baselines on all three datasets. It shows that APO has better overall generation performance in various scenarios. Specifically, our method outperforms Self-RAG by 8.8 points on the EM-R metric. We speculate that this inconsistency stems from the difference between coherent generation and step-wise generation in Self-RAG. Our method also shows consistent improvements over AGREE across multiple benchmarks which suggests that APO can more effectively exploit the power of LLM to enhance retrieval. APO can be used to complement these active or adaptive retrieval-based methods and we leave it for future work. Compared to the post-training baseline, the preference optimization shows further improvement with an 8.0 average increased citation F1. Furthermore, we observe a trade-off between correctness and citation quality in several baselines including Self-RAG and AGREE, possibly due to the generation hallucination and attribution hallucination defined in §4.1  ###reference_###. In contrast, APO helps to deal with these hallucinations and performs well in terms of both correctness and citation quality."
        },
        {
            "section_id": "6.2",
            "parent_section_id": "6",
            "section_name": "Ablation Study",
            "text": "We evaluate the effectiveness of each predefined error type and the results are shown in Table 3  ###reference_###. Specifically, we perform progressive PO on the model after post-training and remove data corresponding to a predefined type. We observe that without data corresponding to hallucinated statement error, citation F1 drops significantly which suggests that our approach improves the groundedness of the model. Mistaken synthesis error seems to contribute little to performance improvement, but we observe that it can help improve groundedness under human evaluation (§6.5  ###reference_###). Without unintentional omission error, the model shows poor generation quality. This means that the model may generate incomplete answers.\nMoreover, we perform an ablation study on the training strategy of preference optimization. We find that the model can also be improved under the response-level preference optimization method such as vanilla DPO, but the improvement is slightly less. In addition, we ablation the PO by removing the ASQA questions from our preference data. Note that we construct the preference data based on the training set of ASQA, and use its test set for evaluation. We have verified and guaranteed that there is no data overlap between the two. We find that the generation quality and citation quality have decreased. We attribute it to high-quality in-domain questions in ASQA as a long-form question answering dataset."
        },
        {
            "section_id": "6.3",
            "parent_section_id": "6",
            "section_name": "Different Prompting Strategy",
            "text": "We explore applying APO to four prompting strategies Gao et al. (2023b  ###reference_b15###): 1) Vanilla that provides the top-5 retrieved documents for each question. It is our default setting. 2) Summ that provides summaries instead of the full text of the top-10 retrieved documents for each question. 3) Snippet that provides snippets instead of the full text of the top 10 retrieved documents for each question. 4) Oracle that provides 5 gold documents for each question. We use llama-2-13b-chat as the comparison method because it has impressive instruction following ability and moderate size. As shown in Table 4  ###reference_###, we find that in most cases, APO achieves better performance than baseline. For example, APO under Vanilla and Oracle settings performs best in Citation F1 on ASQA, while it under Summ and Snippet settings in ELI5 has improved Citation F1. It shows that the format of the context has an impact on attribution task."
        },
        {
            "section_id": "6.4",
            "parent_section_id": "6",
            "section_name": "Different PO Methods",
            "text": "Table 5  ###reference_### illustrates the results of different direct preference optimization methods adopted by . We include a SFT baseline to tune the  using the positive part in the chosen preference pairs that we created. We observe that our method can be transferred to several different preference optimization methods, but the performance swings in several metrics. All preference optimization methods have performance boosts compared with the post-training baseline and the SFT baseline. It shows that preference optimization can help improve the generation quality to some extent."
        },
        {
            "section_id": "6.5",
            "parent_section_id": "6",
            "section_name": "Error Analysis",
            "text": "We conduct human evaluation of model response on ASQA dataset.\nSpecifically, we collect 50 samples that contain errors judged by the attribution evaluation model . We then perform a detailed manual review of these samples to identify error types. Our evaluation results are shown in Table 6  ###reference_###.\nWe find that nearly half of the errors are of fabrication error. We reveal that the model either generated text not supported by the reference documents or incorrectly attributed information to irrelevant documents. In certain instances, hallucinations are due to the documents with low quality. For example, some documents are truncated, and the model attempts to complete or extrapolate the incomplete text. Additionally, we notice omission errors on both generated text and citation where the model fails to generate necessary citations to substantiate its statements. Although synthesis errors are less common, we observe some cases which model conflated information from multiple documents and generated counterfactual statements.\nThe case study is shown in Appendix E  ###reference_###."
        },
        {
            "section_id": "7",
            "parent_section_id": null,
            "section_name": "Conclusion",
            "text": "This paper introduces the APO framework for attributed text generation. We treat attribution as a preference learning task, utilizing curated post-training collections and an automated synthesis algorithm to reduce manual labeling costs. Experiments on three datasets demonstrate the effectiveness of APO which achieves leading citation F1 and improved response quality.\nFuture work can explore extending APO to real-world applications."
        }
    ]
}