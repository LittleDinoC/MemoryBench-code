{
    "title": "ProtLLM: An Interleaved Protein-Language LLM with Protein-as-Word Pre-Training",
    "abstract": "We propose ProtLLM, a versatile cross-modal large language model (LLM) for both protein-centric and protein-language tasks. ProtLLM features a unique dynamic protein mounting mechanism, enabling it to handle complex inputs where the natural language text is interspersed with an arbitrary number of proteins. Besides, we propose the protein-as-word language modeling approach to train ProtLLM. By developing a specialized protein vocabulary, we equip the model with the capability to predict not just natural language but also proteins from a vast pool of candidates. Additionally, we construct a large-scale interleaved protein-text dataset, named InterPT, for pre-training. This dataset comprehensively encompasses both (1) structured data sources like protein annotations and (2) unstructured data sources like biological research papers, thereby endowing ProtLLM with crucial knowledge for understanding proteins. We evaluate ProtLLM on classic supervised protein-centric tasks and explore its novel protein-language applications. Experimental results demonstrate that ProtLLM not only achieves superior performance against protein-specialized baselines on protein-centric tasks but also induces zero-shot and in-context learning capabilities on protein-language tasks.",
    "sections": [
        {
            "section_id": "1",
            "parent_section_id": null,
            "section_name": "Introduction",
            "text": "###figure_1### Understanding proteins is essential for unraveling the mysteries of life and enabling artificial intelligence systems to advance bioscience research Wang et al. (2023a  ###reference_b42###). Thanks to the development of deep learning techniques, neural network models encompass extensive protein-centric applications, such as protein-folding prediction Jumper et al. (2021  ###reference_b18###), protein-protein interaction analysis Li et al. (2018  ###reference_b19###); Su et al. (2023  ###reference_b39###), function prediction Zhang et al. (2023a  ###reference_b52###), etc.\nProtein representation learning methods typically employ large-scale pre-training, which learns unsupervised protein representations on massive protein sequences with masked language modeling Rives et al. (2021  ###reference_b38###), or autoregressive language modeling Elnaggar et al. (2020  ###reference_b8###).\nIn addition to protein-centric tasks, recent studies have attempted to extend protein models to protein-language scenarios.\nProtST Xu et al. (2023b  ###reference_b47###) integrates textual information into the protein encoder through multimodal pre-training on protein-text pairs, achieving zero-shot text-to-protein retrieval.\nFang et al. (2023  ###reference_b10###) introduces an instruction dataset tailored for the biomolecular domain and investigates how fine-tuned LLM performs on protein-domain instruction-following tasks, such as function description generation.\nDespite the success of protein representation methods on specific tasks, developing a model that excels in both protein-centric and protein-language tasks is still under-explored, facing three main challenges. Firstly, architectures are designed for particular downstream tasks, making it difficult to accommodate a wide range of tasks simultaneously. Secondly, current methods primarily derive cross-modal supervision from explicitly annotated protein-text pairs, which is not scalable to large-scale pre-training. Lastly, supporting a variable number of proteins in the input sequence introduces computational uncertainty in each training step, leading to inefficiencies during pre-training.\nIn this work, we propose ProtLLM, which is a versatile LLM for both protein-centric and protein-language tasks. Instead of designing for specific tasks, ProtLLM supports complex interleaved protein-text inputs and outputs, which enables our model to simultaneously handle diverse downstream tasks without re-designing task-specific architecture (see Figure 1  ###reference_### for illustrations). Specifically, our dynamic protein mounting mechanism enables the model to seamlessly process text interspersed with an arbitrary number of proteins. Besides, we propose protein-as-word language modeling to ensure interleaved protein-text outputs. By building a protein vocabulary, ProtLLM is trained to autoregressively predict words and proteins from their respective vocabularies.\nAdditionally, we present a large-scale interleaved protein-text dataset, named InterPT, for ProtLLM pre-training. InterPT is constructed from diverse data sources, consisting of both structured data such as paired protein annotation data, and unstructured data from biological research papers, which encourages ProtLLM to harness crucial knowledge from the scientific articles.\nWe conduct extensive experiments on a wide range of downstream tasks, ranging from classic supervised protein-centric tasks to novel protein-language applications. Experimental results demonstrate that ProtLLM outperforms specialized baselines on protein-centric tasks. ProtLLM also unlocks the in-context learning capability for protein-protein interaction prediction, and achieves zero-shot text-guided functional protein retrieval.\nOur contributions are as follows:\nWe propose ProtLLM, a versatile cross-modal LLM for both protein-centric and protein-language tasks. ProtLLM could process complex interleaved protein-text inputs and outputs, thereby supporting diverse tasks.\nWe introduce a large-scale pre-training dataset, InterPT, interleaving proteins and text from both structured data sources and unstructured multi-protein scientific articles.\nWe show that ProtLLM achieves superior results on protein-centric tasks against protein-specialized baselines, and induces zero-shot and in-context learning capabilities."
        },
        {
            "section_id": "2",
            "parent_section_id": null,
            "section_name": "Related Work",
            "text": ""
        },
        {
            "section_id": "2.1",
            "parent_section_id": "2",
            "section_name": "Large Language Models",
            "text": "The evolution of LLMs has been a cornerstone in the field of natural language processing , showcasing extraordinary capabilities across a broad spectrum of tasks Devlin et al. (2018  ###reference_b7###); Raffel et al. (2020  ###reference_b37###); Brown et al. (2020  ###reference_b2###); OpenAI (2023  ###reference_b33###); Touvron et al. (2023  ###reference_b40###); Longpre et al. (2023  ###reference_b26###); Chowdhery et al. (2022  ###reference_b4###). These models, once thought to be limited to text-based tasks, have now crossed boundaries into areas traditionally dominated by human expertise, including mathematical problem-solving Wei et al. (2022  ###reference_b44###); Imani et al. (2023  ###reference_b16###), drug discovery Liang et al. (2023  ###reference_b20###); Liu et al. (2023b  ###reference_b23###), and complex decision making Yu et al. (2023  ###reference_b49###); Ma et al. (2023  ###reference_b27###). Recent explorations further extend LLMs’ expertise into the multimodal domain where they demonstrate significant promise in processing and generating content from diverse modalities Huang et al. (2023  ###reference_b15###); Zhu et al. (2023  ###reference_b55###); Liu et al. (2023a  ###reference_b22###); Zhao et al. (2023  ###reference_b54###); Wu et al. (2023  ###reference_b45###). Most of these works focus on aligning pre-trained encoders from various modalities with LLMs through instruction tuning, thus equipping LLMs to interpret multimodal inputs. In the realm of scientific research, specialized molecular LLMs have been devised for tasks like molecular property prediction Liu et al. (2023c  ###reference_b24###), captioning Fang et al. (2023  ###reference_b10###), and retrieval Liu et al. (2023d  ###reference_b25###). Despite these advances, the progress in protein understanding with LLMs lags, hindered by the scarcity of comprehensive datasets for alignment and the absence of efficient architectures to model protein-language sequences."
        },
        {
            "section_id": "2.2",
            "parent_section_id": "2",
            "section_name": "Protein Representation Learning",
            "text": "Current mainstream methods for protein understanding tasks have focused on protein representation learning. Protein language models (PLMs) Elnaggar et al. (2020  ###reference_b8###); Rives et al. (2021  ###reference_b38###); Meier et al. (2021  ###reference_b30###); Lin et al. (2022  ###reference_b21###) have marked significant progress in the area by training the protein sequence encoders on massive protein sequence data.\nProtein structure encoding methods aim to learn coarse-grained amino-acid-level representations Gligorijević et al. (2021  ###reference_b11###); Fan et al. (2022  ###reference_b9###); Zhang et al. (2023a  ###reference_b52###); Xu et al. (2023a  ###reference_b46###) or fine-grained atom-level representations Hermosilla et al. (2021  ###reference_b13###); Jing et al. (2021  ###reference_b17###); Zhang et al. (2023b  ###reference_b53###).\nDespite the success in protein modeling, protein-related text data are left unexplored, which contains valuable supervision signals crucial for understanding proteins.\nTo enhance protein understanding with text supervision, OntoProtein Zhang et al. (2022a  ###reference_b50###) leverages knowledge graphs, utilizing gene ontology annotations to implicitly enrich protein representation with textual information. ProtST Xu et al. (2023b  ###reference_b47###) integrates textual information into the protein encoder through multimodal pre-training on protein-text pairs, achieving zero-shot text-to-protein retrieval.\nMol-Instruction Fang et al. (2023  ###reference_b10###) introduces a comprehensive instruction dataset specialized for biomolecules and further fine-tunes LLMs on this dataset. Similarly, InstructProtein Wang et al. (2023b  ###reference_b43###) improves the quality of instruction datasets by sampling protein-text pairs from a structured knowledge graph. This line of work focuses on aligning protein with human language using LLMs. However, a limitation of these approaches lies in their direct incorporation of protein sequences into LLMs as text, leading to suboptimal protein modeling due to the LLMs not being pre-trained on extensive protein sequence datasets. In contrast, ProtLLM provides a versatile framework that excels in both classic protein-centric tasks and novel protein-text applications.\n###figure_2###"
        },
        {
            "section_id": "3",
            "parent_section_id": null,
            "section_name": "Methods",
            "text": "In this section, we elaborate on our proposed method, ProtLLM, which is illustrated in Figure 2  ###reference_###. Initially, we detail the model architecture in Section 3.1  ###reference_.SSS0.Px1###. Subsequently, the pre-training strategy is explained, introducing the concept of protein-as-word modeling, as outlined in Section 3.2  ###reference_###. We then present the uniquely constructed interleaved protein-text dataset, InterPT, in Section 3.3  ###reference_###. Lastly, we explore the application of ProtLLM on a variety of tasks in Section 3.4  ###reference_###.\nProtLLM consists of an LLM for natural language modeling, a protein encoder, and cross-modal connectors that connect the protein encoder and the LLM.\nWe use LLaMA-7b Touvron et al. (2023  ###reference_b40###) as the backbone of ProtLLM, which is an autoregressive Transformer language model pre-trained on large-scale natural language data. To make ProtLLM understand protein sequences (i.e., sequences of amino acid tokens, which are the primary structure of proteins), we employ ProtST Xu et al. (2023b  ###reference_b47###) as the protein encoder. ProtST follows the backbone architecture of ESM-2 Lin et al. (2022  ###reference_b21###) and introduces an additional two-layer MLP projection head. Pre-trained on large-scale protein-text pairs with contrastive learning, ProtST learns protein representations that are well-aligned with text. Besides, we introduce cross-modal connectors that connect the LLM with the protein encoder, thereby enabling ProtLLM to accept multimodal inputs. Specifically, ProtLLM has two cross-modal connector layers, which are placed at the input layer and the output layer of the LLM, respectively. The input-layer connector is a trainable projection matrix and transforms the output vectors from the protein representation space to the LLM representation space. Similarly, the output-layer connector transforms the LLM output vectors back to the protein representation space. Significantly, the output-layer connector also serves as a prediction head, allowing our model to perform protein retrieval and multi-choice protein answering tasks without requiring the LLM to generate complicated protein names.\nProtLLM considers not only structured protein-text paired data but also free-form interleaved protein-text sequences. Although the widely used encoder-decoder architecture can handle paired data, it encounters difficulties when dealing with interleaved protein-text inputs with multiple proteins. Therefore, we propose dynamic protein mounting, which allows ProtLLM to accept an arbitrary number of proteins as either input. Specifically, given an input sequence interleaved with proteins and text,\n...[text] [protein] [text] [protein] [text]...\nwe do not directly feed the protein sequence to the LLM, but replace sequences with mount points.\n...[text] <PROT> [mount] </PROT> [text] ...\nAt each mount point, we mount the protein encoder to the LLM with the cross-modal connector. Additionally, these mount points are delineated by protein tags, signaling to the LLM that it is receiving protein vector inputs at these positions, rather than text data.\nWe introduce the protein-as-word language modeling training objective, which unifies protein prediction and word prediction as an autoregressive language modeling task. Consider an input sequence interleaved with  tokens , where the -th token  represents either a natural language token or a protein. The protein-as-word language modeling object is to maximize the likelihood:\nwhere  is a categorical probability distribution over a natural language vocabulary when predicting natural words, or a protein vocabulary when predicting proteins. The probability is computed by\nwhere  is the last-layer LLM hidden states of ;  is the word embedding of the word  from the natural language vocabulary ;  stands for the output connector matrix, and  is the protein embeddings of the protein  from the protein vocabulary .\nTo construct the protein vocabulary, we collect all protein sequences in the training data. We then filter out proteins present in the downstream test sets to prevent data leakage. Finally, we compile a vocabulary consisting of the  proteins.\nAlthough our dynamic protein mounting design introduces flexibility for the input format, it also introduces computational uncertainty into the pre-training process, i.e., the computational cost of each step can vary significantly with the number of input proteins. Consequently, the throughput is limited by the worst case, leading to markedly reduced training efficiency. To accelerate the pre-training, we build a protein cache where we store all the pre-computed protein vectors encoded by the protein encoder. With the protein cache, we eliminate the heavy computational cost of the protein encoder, thereby accelerating the pre-training procedure with stable throughput. Besides, we utilize LoRA Hu et al. (2022  ###reference_b14###) for efficient training.\nMulti-protein scientific articles describe complex relationships among different proteins found in biological research, where each sample could contain multiple proteins. Unlike data presented in structured formats such as pairs or knowledge graphs, these articles offer detailed insights in unstructured natural language.\nGuided by the recording in the STRING database Mering et al. (2003  ###reference_b31###) of multi-protein interactions and the scientific articles supporting them, we retrieve all involved articles from the PubMed database Canese and Weis (2013  ###reference_b3###), specifically selecting instances where multiple proteins co-occur within the same paragraph.\nAll proteins in these paragraphs are linked to the UniProt database Consortium (2015  ###reference_b5###) for their amino acid sequences. Finally, we collect K interleaved protein-text sequences from PubMed articles.\nThis data maps individual proteins to their textual annotations such as function descriptions. We integrate two data sources, i.e., the UniProt database Consortium (2015  ###reference_b5###) and the STRING database Mering et al. (2003  ###reference_b31###), adding up to K protein-annotation pairs.\nGiven such a pair, we utilize it for two tasks, i.e., protein-to-text prediction and text-to-protein prediction, with the probability of  and , respectively. Besides, during pre-training, we interleave the data into longer sequences by concatenating multiple pairs into a single sequence, which has two advantages: (1) this operation can bridge the data length gap across different data sources and reduce the number of padding tokens, leading to higher training efficiency; (2) training multiple pairs in a single sequence encourages the model to obtain in-context learning capabilities Gu et al. (2023  ###reference_b12###).\nThis data is in the instruction-following style Ouyang et al. (2022  ###reference_b34###), typically requiring the model to generate open-ended text given a protein and an instruction Fang et al. (2023  ###reference_b10###). We select the data items of proteins from the Mol-Instructions dataset Fang et al. (2023  ###reference_b10###) and include them into InterPT. Similar to the processing of protein-annotation pairs, we also concatenate multiple instruction-following data into a single pre-training example, so as to improve training efficiency and acquire in-context learning capabilities.\nThe best practice for adapting ProtLLM to downstream tasks is supervised fine-tuning when training data are available. Since ProtLLM supports flexible input and output formats, we can simply transform the downstream task data into an interleaved format and directly perform protein-as-word language modeling for supervised fine-tuning. The input and output prompt format for each downstream task can be found in the Appendix A  ###reference_###. During fine-tuning, we also apply the LoRA adapter to the LLM for efficient fine-tuning while preventing the model from overfitting several proteins in the training set.\nIn-context learning is a promising capability of LLM, which can adapt the LLM to specific tasks with a few examples without training the model. ProtLLM can achieve in-context learning by pretending a few demonstration examples. To the best of our knowledge, ProtLLM is the first protein-language LLM that is capable of in-context learning.\nModel\nPre-training\nEC\nGO-BP\nGO-MF\nGO-CC\nPPI\n\nProtein\nText\nAUPR\n\nAUPR\n\nAUPR\n\nAUPR\n\nACC\n\n\n\nDeepFRI\n✓\n✗\n0.546\n0.631\n0.282\n0.399\n0.462\n0.465\n0.363\n0.460\n-\n\nGearNet\n✓\n✗\n0.892\n0.874\n0.292\n0.490\n0.596\n0.650\n0.226\n0.486\n73.86\n\nProtBert\n✓\n✗\n0.859\n0.838\n0.188\n0.279\n0.464\n0.456\n0.234\n0.408\n77.32\n\nESM-1b\n✓\n✗\n0.884\n0.869\n0.332\n0.452\n0.630\n0.659\n0.324\n0.477\n82.22\n\nESM-2\n✓\n✗\n0.888\n0.874\n0.340\n0.472\n0.643\n0.662\n0.350\n0.472\n86.90\n\nOntoProtein\n✓\n✓\n0.854\n0.841\n0.284\n0.436\n0.603\n0.631\n0.300\n0.441\n70.42\n\nProtST\n✓\n✓\n0.898\n0.878\n0.342\n0.482\n0.647\n0.668\n0.364\n0.487\n88.19\n\nProtLLM\n✓\n✓\n0.874\n0.860\n0.349\n0.503\n0.652\n0.668\n0.469\n0.596\n89.87\nFor another interesting application, ProtLLM can be programmed to execute protein retrieval with customized requirements by following instructions. In Section 4.3  ###reference_###, we show that ProtLLM can well retrieve functional proteins based only on function descriptions, and it can be further improved by prepending a one-shot demonstration."
        },
        {
            "section_id": "3.1",
            "parent_section_id": "3",
            "section_name": "ProtLLM Framework",
            "text": "ProtLLM consists of an LLM for natural language modeling, a protein encoder, and cross-modal connectors that connect the protein encoder and the LLM.\nWe use LLaMA-7b Touvron et al. (2023  ###reference_b40###  ###reference_b40###) as the backbone of ProtLLM, which is an autoregressive Transformer language model pre-trained on large-scale natural language data. To make ProtLLM understand protein sequences (i.e., sequences of amino acid tokens, which are the primary structure of proteins), we employ ProtST Xu et al. (2023b  ###reference_b47###  ###reference_b47###) as the protein encoder. ProtST follows the backbone architecture of ESM-2 Lin et al. (2022  ###reference_b21###  ###reference_b21###) and introduces an additional two-layer MLP projection head. Pre-trained on large-scale protein-text pairs with contrastive learning, ProtST learns protein representations that are well-aligned with text. Besides, we introduce cross-modal connectors that connect the LLM with the protein encoder, thereby enabling ProtLLM to accept multimodal inputs. Specifically, ProtLLM has two cross-modal connector layers, which are placed at the input layer and the output layer of the LLM, respectively. The input-layer connector is a trainable projection matrix and transforms the output vectors from the protein representation space to the LLM representation space. Similarly, the output-layer connector transforms the LLM output vectors back to the protein representation space. Significantly, the output-layer connector also serves as a prediction head, allowing our model to perform protein retrieval and multi-choice protein answering tasks without requiring the LLM to generate complicated protein names.\nProtLLM considers not only structured protein-text paired data but also free-form interleaved protein-text sequences. Although the widely used encoder-decoder architecture can handle paired data, it encounters difficulties when dealing with interleaved protein-text inputs with multiple proteins. Therefore, we propose dynamic protein mounting, which allows ProtLLM to accept an arbitrary number of proteins as either input. Specifically, given an input sequence interleaved with proteins and text,\n...[text] [protein] [text] [protein] [text]...\nwe do not directly feed the protein sequence to the LLM, but replace sequences with mount points.\n...[text] <PROT> [mount] </PROT> [text] ...\nAt each mount point, we mount the protein encoder to the LLM with the cross-modal connector. Additionally, these mount points are delineated by protein tags, signaling to the LLM that it is receiving protein vector inputs at these positions, rather than text data."
        },
        {
            "section_id": "3.2",
            "parent_section_id": "3",
            "section_name": "ProtLLM Pre-Training",
            "text": "We introduce the protein-as-word language modeling training objective, which unifies protein prediction and word prediction as an autoregressive language modeling task. Consider an input sequence interleaved with  tokens , where the -th token  represents either a natural language token or a protein. The protein-as-word language modeling object is to maximize the likelihood:\nwhere  is a categorical probability distribution over a natural language vocabulary when predicting natural words, or a protein vocabulary when predicting proteins. The probability is computed by\nwhere  is the last-layer LLM hidden states of ;  is the word embedding of the word  from the natural language vocabulary ;  stands for the output connector matrix, and  is the protein embeddings of the protein  from the protein vocabulary .\nTo construct the protein vocabulary, we collect all protein sequences in the training data. We then filter out proteins present in the downstream test sets to prevent data leakage. Finally, we compile a vocabulary consisting of the  proteins.\nAlthough our dynamic protein mounting design introduces flexibility for the input format, it also introduces computational uncertainty into the pre-training process, i.e., the computational cost of each step can vary significantly with the number of input proteins. Consequently, the throughput is limited by the worst case, leading to markedly reduced training efficiency. To accelerate the pre-training, we build a protein cache where we store all the pre-computed protein vectors encoded by the protein encoder. With the protein cache, we eliminate the heavy computational cost of the protein encoder, thereby accelerating the pre-training procedure with stable throughput. Besides, we utilize LoRA Hu et al. (2022  ###reference_b14###  ###reference_b14###) for efficient training."
        },
        {
            "section_id": "3.3",
            "parent_section_id": "3",
            "section_name": "InterPT: Interleaving Protein-Text Data",
            "text": "We propose a large-scale interleaved protein-text multimodal dataset, named InterPT, to pre-train ProtLLM with comprehensive protein-related knowledge. This dataset encompasses three types of data sources, i.e., multi-protein scientific articles, protein-annotation pairs, and protein instruction-following data. The statistics of each component are listed in Table 1  ###reference_###.\n\nMulti-protein scientific articles describe complex relationships among different proteins found in biological research, where each sample could contain multiple proteins. Unlike data presented in structured formats such as pairs or knowledge graphs, these articles offer detailed insights in unstructured natural language. Guided by the recording in the STRING database Mering et al. (2003  ###reference_b31###  ###reference_b31###) of multi-protein interactions and the scientific articles supporting them, we retrieve all involved articles from the PubMed database Canese and Weis (2013  ###reference_b3###  ###reference_b3###), specifically selecting instances where multiple proteins co-occur within the same paragraph. All proteins in these paragraphs are linked to the UniProt database Consortium (2015  ###reference_b5###  ###reference_b5###) for their amino acid sequences. Finally, we collect K interleaved protein-text sequences from PubMed articles. This data maps individual proteins to their textual annotations such as function descriptions. We integrate two data sources, i.e., the UniProt database Consortium (2015  ###reference_b5###  ###reference_b5###) and the STRING database Mering et al. (2003  ###reference_b31###  ###reference_b31###), adding up to K protein-annotation pairs.\n\nThis data is in the instruction-following style Ouyang et al. (2022  ###reference_b34###  ###reference_b34###), typically requiring the model to generate open-ended text given a protein and an instruction Fang et al. (2023  ###reference_b10###  ###reference_b10###). We select the data items of proteins from the Mol-Instructions dataset Fang et al. (2023  ###reference_b10###  ###reference_b10###) and include them into InterPT."
        },
        {
            "section_id": "3.4",
            "parent_section_id": "3",
            "section_name": "Applying ProtLLM to Diverse Tasks",
            "text": "The best practice for adapting ProtLLM to downstream tasks is supervised fine-tuning when training data are available. Since ProtLLM supports flexible input and output formats, we can simply transform the downstream task data into an interleaved format and directly perform protein-as-word language modeling for supervised fine-tuning. The input and output prompt format for each downstream task can be found in the Appendix A  ###reference_###  ###reference_###. During fine-tuning, we also apply the LoRA adapter to the LLM for efficient fine-tuning while preventing the model from overfitting several proteins in the training set.\nIn-context learning is a promising capability of LLM, which can adapt the LLM to specific tasks with a few examples without training the model. ProtLLM can achieve in-context learning by pretending a few demonstration examples. To the best of our knowledge, ProtLLM is the first protein-language LLM that is capable of in-context learning.\nModel\nPre-training\nEC\nGO-BP\nGO-MF\nGO-CC\nPPI\n\nProtein\nText\nAUPR\n\nAUPR\n\nAUPR\n\nAUPR\n\nACC\n\n\n\nDeepFRI\n✓\n✗\n0.546\n0.631\n0.282\n0.399\n0.462\n0.465\n0.363\n0.460\n-\n\nGearNet\n✓\n✗\n0.892\n0.874\n0.292\n0.490\n0.596\n0.650\n0.226\n0.486\n73.86\n\nProtBert\n✓\n✗\n0.859\n0.838\n0.188\n0.279\n0.464\n0.456\n0.234\n0.408\n77.32\n\nESM-1b\n✓\n✗\n0.884\n0.869\n0.332\n0.452\n0.630\n0.659\n0.324\n0.477\n82.22\n\nESM-2\n✓\n✗\n0.888\n0.874\n0.340\n0.472\n0.643\n0.662\n0.350\n0.472\n86.90\n\nOntoProtein\n✓\n✓\n0.854\n0.841\n0.284\n0.436\n0.603\n0.631\n0.300\n0.441\n70.42\n\nProtST\n✓\n✓\n0.898\n0.878\n0.342\n0.482\n0.647\n0.668\n0.364\n0.487\n88.19\n\nProtLLM\n✓\n✓\n0.874\n0.860\n0.349\n0.503\n0.652\n0.668\n0.469\n0.596\n89.87\nFor another interesting application, ProtLLM can be programmed to execute protein retrieval with customized requirements by following instructions. In Section 4.3  ###reference_###  ###reference_###, we show that ProtLLM can well retrieve functional proteins based only on function descriptions, and it can be further improved by prepending a one-shot demonstration."
        },
        {
            "section_id": "4",
            "parent_section_id": null,
            "section_name": "Experiments",
            "text": "We evaluate ProtLLM on three types of downstream tasks: (1) protein-centric tasks, which include supervised fine-tuning on conventional benchmarks for protein understanding; (2) protein-text in-context learning, where we show the unique ability of ProtLLM by in-context learning on protein-protein interaction prediction; (3) text-guided functional protein retrieval, where we conduct a real-world enzyme mining task as a proof-of-concept study to validate the retrieval capability of ProtLLM. We present detailed hyperparameters, and prompt templates for pre-training and fine-tuning in Appendix A  ###reference_###.\nFollowing the settings in PEER benchmark Xu et al. (2022  ###reference_b48###), we adopt three standard tasks in protein understanding to validate our method. Enzyme Commission (EC) number prediction Gligorijević et al. (2021  ###reference_b11###) aims to predict all possible EC numbers of a protein simultaneously, reflecting the chemical reactions it catalyzes. Gene Ontology (GO) term prediction Gligorijević et al. (2021  ###reference_b11###) extends as a multi-label classification task, seeking to predict whether a protein belongs to specific GO terms. The GO benchmark is categorized into three branches, namely biological process (BP), molecular function (MF), and cellular component (CC). Protein-Protein Interaction (PPI) prediction aims to determine whether two given proteins interact or not. We adopt the human PPI dataset Pan et al. (2010  ###reference_b35###) for experiments.\nTo evaluate performances on multi-label classification tasks including EC and GO prediction, we report pair-centric area under precision-recall curve (AUPR) values and , a widely used metric in the CAFA challenges Radivojac et al. (2013  ###reference_b36###). PPI prediction results are evaluated by mean accuracy. These metrics require the soft probability of each target label. To achieve this, we initially extract the probabilities of “Yes” for the positive label and “No” for the negative label, respectively. Then, these probabilities are normalized via the softmax function to get the final predicted probabilities.\nWe compare  ProtLLM with seven existing protein representation learning methods. As shown in Table 2  ###reference_###, these methods can be categorized into two distinct categories: protein-only approaches and protein-text learning approaches. The former encompasses sequence-based models including ProtBert Elnaggar et al. (2020  ###reference_b8###), ESM-1b Rives et al. (2021  ###reference_b38###), and ESM-2 Lin et al. (2022  ###reference_b21###), which are pre-trained using extensive collections of protein sequences, alongside structure-based models, such as DeepFRI Gligorijević et al. (2021  ###reference_b11###), and GearNet Zhang et al. (2022b  ###reference_b51###). The latter, protein-text learning approaches, includes OntoProtein Zhang et al. (2022a  ###reference_b50###), and ProtST Xu et al. (2023b  ###reference_b47###).\nNote that Mol-Instructions Fang et al. (2023  ###reference_b10###) and InstructProtein Wang et al. (2023b  ###reference_b43###) also belong to the protein-text learning approaches. However, their methods directly take protein sequences as human language and tokenize the data using byte-pair encoding. Contrasting with the protein-as-word strategy in ProtLLM, this exponentially increases the context length, rendering the evaluation on tasks with extensive label sets, like EC and GO prediction, or those requiring multiple protein inputs, such as PPI prediction, impractical for their approaches.\nThe results are shown in Table 2  ###reference_###. ProtLLM consistently shows competitive or even superior performance compared to both protein-only and protein-text approaches across all benchmarks, indicating the effectiveness of our proposed framework on conventional close-ended protein understanding tasks. Remarkably, ProtLLM obtain   and  AUPR on GO-CC, which outperforms ProtST by a large margin. As depicted in Section 3.1  ###reference_###, ProtLLM directly uses pre-trained ProtST as the protein encoder, with the key difference lying in our LLM decoder and pre-training stage for alignment. By comparing ProtLLM with ProtST, the overall improvements strongly highlight the potential benefits of incorporating richer protein-text information and scaling the size of the language model.\nMoreover, ProtLLM also outperforms two structure-based models on GO and PPI prediction despite we only leverage sequence information during training. Protein structures encode rich information and have direct relations to their functions. This opens up a promising direction to further incorporate protein structure into our framework, which we leave for future work.\n###figure_3### We directly evaluate the pre-trained ProtLLM model on the human PPI task without updating any parameters. For the -shot in-context learning, we randomly sample  examples from the validation set as the demonstrations and prepend them to each test sequence. Both the demonstration example and test example are prompted with the same template. For example, a one-shot prompted input is as follows:\nDo <PROT> [mount] </PROT> and <PROT> [mount] </PROT> interact with each other? Yes\\n Do <PROT> [mount] </PROT> and <PROT> [mount] </PROT> interact with each other?\nThe protein sequences of demonstration and test examples are first encoded by the protein encoder and then fed to the language model at each mount point. The final answer is predicted by selecting the verbalizer, i.e., “Yes” or “No”, with the higher probability. Besides, to understand how multi-protein pre-training data from scientific articles improves ProtLLM, we also evaluate a variant of our model by removing the multi-protein scientific articles from the pre-training corpora.\n###figure_4### Figure 3  ###reference_### presents the in-context learning performance on human PPI with varying numbers of demonstration examples. Our model consistently achieves higher PPI accuracy with an increasing number of demonstration examples, demonstrating its effective in-context learning capability for protein-centric tasks.\nIn comparison, the model performs drastically worse upon removing the multi-protein scientific articles, and fails to learn in context with the , , and  demonstrations.\nWe believe that the in-context learning capability of our model could empower biologists to apply it to specialized tasks that lack annotated data, using minimal examples. Our experiments on enzyme mining illustrate a tangible application of in-context learning, as detailed in Section 4.3  ###reference_###.\nThis experiment aims to study the capability of ProtLLM to retrieve functional proteins based on text prompts and demonstrations. For this purpose, we apply ProtLLM to enzyme mining, which is a critical stage in enzyme and metabolic engineering pipelines. In this experiment, we evaluate our model on mining carboxylate reductases that transform various ketoacids into their corresponding aldehydes. Four ketoacid reactants, i.e., 2-ketoisovaleric acid (IsoC5), pyruvic acid (C3), 2-ketovaleric acid (C5), and 2-ketooctanoic acid (C8), studied in Mak et al. (2015  ###reference_b28###) are employed for evaluation.\nUsing a reported enzyme for IsoC5, ketoisovalerate decarboxylase (KIVD) De La Plaza et al. (2004  ###reference_b6###), as the query, we first search for a pool of enzyme candidates by BLASTp McGinnis and Madden (2004  ###reference_b29###), where the pools with the size of 500 and 1000 are respectively tested.\nWe then leverage ProtLLM to retrieve active enzymes from the pool for each reactant in two modes. In the zero-shot retrieval setting, given the prompt:\nIdentify the enzymes: {Reactant}  Isobutanal. <PROT>\ndescribing the reaction from reactant (IsoC5, C3, C5 or C8) to product, ProtLLM generates a protein embedding at the token <PROT>. Then, we encode all the candidate enzymes as embeddings with the protein encoder. Finally, we utilize this embedding to rank all enzyme candidates by comparing embedding similarity. For in-context learning, we further add a one-shot demonstration of carboxylate reductase before the prompt above to facilitate enzyme mining. The demonstration is:\nIndentify the enzymes: Oxidizes aldehydes to the corresponding carboxylic acids with a preference for aromatic aldehydes. <PROT> [mount] </PROT>\nwhere the “[mount]” token is represented by the protein embedding of PaoC Neumann et al. (2009  ###reference_b32###), a typical carboxylate reductase.\nIn Table 3  ###reference_###, we report the recall of active enzymes found in Mak et al. (2015  ###reference_b28###) at top 10, 20, and 50 ranked candidates. It is observed that in-context learning outperforms zero-shot retrieval on 18 out of 24 metrics, which verifies that ProtLLM can learn from a few demonstrations and improve its enzyme mining performance based on such knowledge. To study the top-ranked enzymes by ProtLLM more in-depth, we employ AutoDock Vina Trott and Olson (2010  ###reference_b41###) to further screen the top-20 enzymes found by in-context learning and pick the one with the lowest Vina energy for visualization. As shown in Figure 4  ###reference_###, the lead enzymes selected in this way are all with good properties, possessing high enzyme activity (i.e., high  and  values measured by Mak et al. (2015  ###reference_b28###)) and low binding energy measured by AutoDock Vina. These results altogether prove the effectiveness of ProtLLM on enzyme mining."
        },
        {
            "section_id": "4.1",
            "parent_section_id": "4",
            "section_name": "Protein-Centric Tasks",
            "text": "Following the settings in PEER benchmark Xu et al. (2022  ###reference_b48###  ###reference_b48###), we adopt three standard tasks in protein understanding to validate our method. Enzyme Commission (EC) number prediction Gligorijević et al. (2021  ###reference_b11###  ###reference_b11###) aims to predict all possible EC numbers of a protein simultaneously, reflecting the chemical reactions it catalyzes. Gene Ontology (GO) term prediction Gligorijević et al. (2021  ###reference_b11###  ###reference_b11###) extends as a multi-label classification task, seeking to predict whether a protein belongs to specific GO terms. The GO benchmark is categorized into three branches, namely biological process (BP), molecular function (MF), and cellular component (CC). Protein-Protein Interaction (PPI) prediction aims to determine whether two given proteins interact or not. We adopt the human PPI dataset Pan et al. (2010  ###reference_b35###  ###reference_b35###) for experiments.\nTo evaluate performances on multi-label classification tasks including EC and GO prediction, we report pair-centric area under precision-recall curve (AUPR) values and , a widely used metric in the CAFA challenges Radivojac et al. (2013  ###reference_b36###  ###reference_b36###). PPI prediction results are evaluated by mean accuracy. These metrics require the soft probability of each target label. To achieve this, we initially extract the probabilities of “Yes” for the positive label and “No” for the negative label, respectively. Then, these probabilities are normalized via the softmax function to get the final predicted probabilities.\nWe compare  ProtLLM with seven existing protein representation learning methods. As shown in Table 2  ###reference_###  ###reference_###, these methods can be categorized into two distinct categories: protein-only approaches and protein-text learning approaches. The former encompasses sequence-based models including ProtBert Elnaggar et al. (2020  ###reference_b8###  ###reference_b8###), ESM-1b Rives et al. (2021  ###reference_b38###  ###reference_b38###), and ESM-2 Lin et al. (2022  ###reference_b21###  ###reference_b21###), which are pre-trained using extensive collections of protein sequences, alongside structure-based models, such as DeepFRI Gligorijević et al. (2021  ###reference_b11###  ###reference_b11###), and GearNet Zhang et al. (2022b  ###reference_b51###  ###reference_b51###). The latter, protein-text learning approaches, includes OntoProtein Zhang et al. (2022a  ###reference_b50###  ###reference_b50###), and ProtST Xu et al. (2023b  ###reference_b47###  ###reference_b47###).\nNote that Mol-Instructions Fang et al. (2023  ###reference_b10###  ###reference_b10###) and InstructProtein Wang et al. (2023b  ###reference_b43###  ###reference_b43###) also belong to the protein-text learning approaches. However, their methods directly take protein sequences as human language and tokenize the data using byte-pair encoding. Contrasting with the protein-as-word strategy in ProtLLM, this exponentially increases the context length, rendering the evaluation on tasks with extensive label sets, like EC and GO prediction, or those requiring multiple protein inputs, such as PPI prediction, impractical for their approaches.\nThe results are shown in Table 2  ###reference_###  ###reference_###. ProtLLM consistently shows competitive or even superior performance compared to both protein-only and protein-text approaches across all benchmarks, indicating the effectiveness of our proposed framework on conventional close-ended protein understanding tasks. Remarkably, ProtLLM obtain   and  AUPR on GO-CC, which outperforms ProtST by a large margin. As depicted in Section 3.1  ###reference_###  ###reference_###, ProtLLM directly uses pre-trained ProtST as the protein encoder, with the key difference lying in our LLM decoder and pre-training stage for alignment. By comparing ProtLLM with ProtST, the overall improvements strongly highlight the potential benefits of incorporating richer protein-text information and scaling the size of the language model.\nMoreover, ProtLLM also outperforms two structure-based models on GO and PPI prediction despite we only leverage sequence information during training. Protein structures encode rich information and have direct relations to their functions. This opens up a promising direction to further incorporate protein structure into our framework, which we leave for future work.\n###figure_5###"
        },
        {
            "section_id": "4.2",
            "parent_section_id": "4",
            "section_name": "Unlocking In-Context Learning",
            "text": "In-context learning is the capability that rapidly adapts the model to specific tasks using only a few annotated demonstration examples, which is originally found in autoregressive language models Brown et al. (2020  ###reference_b2###) and then is extended to visual language models Alayrac et al. (2022  ###reference_b1###). In this section, we investigate whether ProtLLM can achieve in-context learning on the human protein-protein interaction (PPI) prediction task.\nWe directly evaluate the pre-trained ProtLLM model on the human PPI task without updating any parameters. For the -shot in-context learning, we randomly sample  examples from the validation set as the demonstrations and prepend them to each test sequence. Both the demonstration example and test example are prompted with the same template. For example, a one-shot prompted input is as follows:\nDo <PROT> [mount] </PROT> and <PROT> [mount] </PROT> interact with each other? Yes\\n Do <PROT> [mount] </PROT> and <PROT> [mount] </PROT> interact with each other?\nThe protein sequences of demonstration and test examples are first encoded by the protein encoder and then fed to the language model at each mount point. The final answer is predicted by selecting the verbalizer, i.e., “Yes” or “No”, with the higher probability. Besides, to understand how multi-protein pre-training data from scientific articles improves ProtLLM, we also evaluate a variant of our model by removing the multi-protein scientific articles from the pre-training corpora.\n###figure_6### Figure 3  ###reference_###  ###reference_### presents the in-context learning performance on human PPI with varying numbers of demonstration examples. Our model consistently achieves higher PPI accuracy with an increasing number of demonstration examples, demonstrating its effective in-context learning capability for protein-centric tasks.\nIn comparison, the model performs drastically worse upon removing the multi-protein scientific articles, and fails to learn in context with the , , and  demonstrations.\nWe believe that the in-context learning capability of our model could empower biologists to apply it to specialized tasks that lack annotated data, using minimal examples. Our experiments on enzyme mining illustrate a tangible application of in-context learning, as detailed in Section 4.3  ###reference_###  ###reference_###."
        },
        {
            "section_id": "4.3",
            "parent_section_id": "4",
            "section_name": "Text-Guided Functional Protein Retrieval",
            "text": "Reactant\nMethod\nPool Size: 500\nPool Size: 1000\n\nTop-10\nTop-20\nTop-50\nTop-10\nTop-20\nTop-50\n\n\n\nIsoC5\nZero-shot\n0.40\n0.40\n0.40\n0.33\n0.33\n0.33\n\nIn-context\n0.60\n0.80\n0.80\n0.50\n0.67\n0.67\n\nC3\nZero-shot\n1.0\n1.0\n1.0\n1.0\n1.0\n1.0\n\nIn-context\n1.0\n1.0\n1.0\n0.67\n0.67\n0.67\n\nC5\nZero-shot\n0.40\n0.40\n0.40\n0.25\n0.25\n0.25\n\nIn-context\n0.60\n0.80\n0.80\n0.38\n0.50\n0.50\n\nC8\nZero-shot\n0.33\n0.33\n0.50\n0.22\n0.22\n0.33\n\nIn-context\n0.83\n0.83\n0.83\n0.56\n0.56\n0.56\nThis experiment aims to study the capability of ProtLLM to retrieve functional proteins based on text prompts and demonstrations. For this purpose, we apply ProtLLM to enzyme mining, which is a critical stage in enzyme and metabolic engineering pipelines. In this experiment, we evaluate our model on mining carboxylate reductases that transform various ketoacids into their corresponding aldehydes. Four ketoacid reactants, i.e., 2-ketoisovaleric acid (IsoC5), pyruvic acid (C3), 2-ketovaleric acid (C5), and 2-ketooctanoic acid (C8), studied in Mak et al. (2015  ###reference_b28###  ###reference_b28###) are employed for evaluation.\nUsing a reported enzyme for IsoC5, ketoisovalerate decarboxylase (KIVD) De La Plaza et al. (2004  ###reference_b6###  ###reference_b6###), as the query, we first search for a pool of enzyme candidates by BLASTp McGinnis and Madden (2004  ###reference_b29###  ###reference_b29###), where the pools with the size of 500 and 1000 are respectively tested.\nWe then leverage ProtLLM to retrieve active enzymes from the pool for each reactant in two modes. In the zero-shot retrieval setting, given the prompt:\nIdentify the enzymes: {Reactant}  Isobutanal. <PROT>\ndescribing the reaction from reactant (IsoC5, C3, C5 or C8) to product, ProtLLM generates a protein embedding at the token <PROT>. Then, we encode all the candidate enzymes as embeddings with the protein encoder. Finally, we utilize this embedding to rank all enzyme candidates by comparing embedding similarity. For in-context learning, we further add a one-shot demonstration of carboxylate reductase before the prompt above to facilitate enzyme mining. The demonstration is:\nIndentify the enzymes: Oxidizes aldehydes to the corresponding carboxylic acids with a preference for aromatic aldehydes. <PROT> [mount] </PROT>\nwhere the “[mount]” token is represented by the protein embedding of PaoC Neumann et al. (2009  ###reference_b32###  ###reference_b32###), a typical carboxylate reductase.\nIn Table 3  ###reference_###  ###reference_###, we report the recall of active enzymes found in Mak et al. (2015  ###reference_b28###  ###reference_b28###) at top 10, 20, and 50 ranked candidates. It is observed that in-context learning outperforms zero-shot retrieval on 18 out of 24 metrics, which verifies that ProtLLM can learn from a few demonstrations and improve its enzyme mining performance based on such knowledge. To study the top-ranked enzymes by ProtLLM more in-depth, we employ AutoDock Vina Trott and Olson (2010  ###reference_b41###  ###reference_b41###) to further screen the top-20 enzymes found by in-context learning and pick the one with the lowest Vina energy for visualization. As shown in Figure 4  ###reference_###  ###reference_###, the lead enzymes selected in this way are all with good properties, possessing high enzyme activity (i.e., high  and  values measured by Mak et al. (2015  ###reference_b28###  ###reference_b28###)) and low binding energy measured by AutoDock Vina. These results altogether prove the effectiveness of ProtLLM on enzyme mining."
        },
        {
            "section_id": "5",
            "parent_section_id": null,
            "section_name": "Conclusion",
            "text": "In this paper, we present ProtLLM, a versatile LLM designed to tackle both protein-centric and protein-language tasks. Through dynamic\nprotein mounting and protein-as-word modeling, ProtLLM adeptly handles complex interleaved protein-text data, seamlessly unifying a wide array of protein tasks via a natural language interface. Besides, we construct a large-scale protein-language pre-training dataset, called InterPT, which encourages the model to learn from diverse data sources ranging from structured paired data to unstructured multi-protein scientific articles. Extensive experiments demonstrate that ProtLLM not only achieves competitive performance against specialized baselines across standard protein-centric benchmarks but also paves the way for exploring novel protein-language applications."
        }
    ]
}