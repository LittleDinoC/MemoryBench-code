{
    "title": "Can Small Language Models be Good Reasoners for Sequential Recommendation?",
    "abstract": "Large language models (LLMs) open up new horizons for sequential recommendations, owing to their remarkable language comprehension and generation capabilities. However, there are still numerous challenges that should be addressed to successfully implement sequential recommendations empowered by LLMs. Firstly, user behavior patterns are often complex, and relying solely on one-step reasoning from LLMs may lead to incorrect or task-irrelevant responses.\nSecondly, the prohibitively resource requirements of LLM (e.g., ChatGPT-175B) are overwhelmingly high and impractical for real sequential recommender systems. In this paper, we propose a novel Step-by-step knowLedge dIstillation fraMework for recommendation (SLIM), paving a promising path for sequential recommenders to enjoy the exceptional reasoning capabilities of LLMs in a “slim” (i.e., resource-efficient) manner. We introduce CoT prompting based on user behavior sequences for the larger teacher model. The rationales generated by the teacher model are then utilized as labels to distill the downstream smaller student model (e.g., LLaMA2-7B). In this way, the student model acquires the step-by-step reasoning capabilities in recommendation tasks. We encode the generated rationales from the student model into a dense vector, which empowers recommendation in both ID-based and ID-agnostic scenarios. Extensive experiments demonstrate the effectiveness of SLIM over state-of-the-art baselines, and further analysis showcasing its ability to generate meaningful recommendation reasoning at affordable costs.",
    "sections": [
        {
            "section_id": "1",
            "parent_section_id": null,
            "section_name": "1. Introduction",
            "text": "Sequential recommendation is extensively utilized in a variety of internet applications due to its prominent performance in uncovering a user’s evolving and dynamic interests from his/her chronological interactions (Quadrana et al., 2018  ###reference_b24###).\nDespite the effectiveness, existing models are often trained on a closed-loop user-item interaction dataset, inevitably suffering from severe exposure bias and popularity bias.\nTherefore, beyond narrow information present in the original datasets, it is crucial to incorporate open-world knowledge to foster a more comprehensive and generalized understanding of historical behaviors.\nDue to the impressive reasoning capability, the recent emergence of Large Language Models (LLMs), such as GPT 3.5/4, has brought a significant breakthrough in various NLP tasks (Qin et al., 2023  ###reference_b23###; Zhang et al., 2023b  ###reference_b42###; Wei et al., 2023  ###reference_b35###; Pan et al., 2023  ###reference_b22###), showing substantial potential in overcoming the isolated nature of real-world sequential recommenders that rely on closed data sources for training (Sun et al., 2019  ###reference_b26###; Chen et al., 2018  ###reference_b3###). These LLMs are trained on massive corpora, granting them to exhibit the remarkable capability of human-like thinking as well as seamless reasoning.\nRoughly speaking, current LLM empowered recommenders mainly fall into the following two groups:\n(1)  LLM as a ranker, which typically involves prompting the frozen LLM to offer a reasonable ranked list that satisfies the user interests (Hou et al., 2023  ###reference_b11###).\nHowever, solely relying on the zero-shot or few-shot learning capability of LLMs is still inferior compared to traditional sequential recommendations that utilize in-domain collaborative knowledge.\nTo address this limitation, (2) LLM as a knowledge enhancer has been proposed, typically following a cascading architecture: the LLM is first instructed to generate rich knowledge (e.g., user preference and\nfactual knowledge on items), followed by a classical recommendation backbone for harvesting in-domain knowledge and collaborative signals. Generally, the bridging of both worlds tends to elicits a more promising performance (Xi et al., 2023  ###reference_b38###).\nWhile LLMs for recommendation hold promise, they also face significant challenges that cannot be ignored.\nOne is the exceptional reasoning capability of LLM within the context of recommendation has not been fully explored. There is a gap between the open-world nature and recommender systems, which means that the recommendation knowledge generated by LLMs may be incorrect or task-irrelevant.\nFortunately, with the chain-of-thought (CoT) prompting strategy (Wei et al., 2022  ###reference_b34###; Magister et al., 2022  ###reference_b21###; Hsieh et al., 2023  ###reference_b12###), LLMs can break down complex tasks into a series of intermediate reasoning steps, which can improve the ability to understand behavior patterns and explore user interests.\nConsequently, there is a strong motivation to leverage the CoT reasoning capability of LLMs in sequential recommender systems, enabling the generation of targeted recommendation-related rationales. For instance, guiding LLMs to reason progressively, similar to a human salesperson, to deduce user interests, narrow down the categories of items that align with their interests, and ultimately recommend specific items within these categories that the user is likely to interact with.\nAnother significant challenge is the prohibitively high resources are far beyond affordable for real-world recommender systems. The immense size of LLMs demands a considerable amount of memory and computational power, which necessitates specialized infrastructure. For instance, the deployment of the open-source LLaMA2-70B requires eight Nvidia A100 servers.\nOn the other hand, working with closed-source LLMs also involves significant costs. For instance, using ChatGPT as an example, the current approach requires calling its API, which comes with substantial monetary expenses. For instance, in gpt-3.5-turbo, the costs are approximately $0.0015 per 1,000 tokens for input and $0.002 per 1,000 tokens for output.\nTherefore, a natural question arises:\nCan a language model with affordable costs still serve as \nan effective reasoning engine for sequential recommendation?\nTo answer this question, in this paper, we propose a novel Step-by-step knowLedge dIstillation fraMework for recommendation (SLIM), which enables sequential recommendations to enjoy the significant reasoning capabilities of LLMs in a “slim” (i.e., resource-efficient) manner.\nSpecifically, we develop a step-by-step knowledge distillation strategy for sequential recommendations to transfer the reasoning capabilities of LLMs (i.e., teacher) to a “small” language model (i.e., student). This strategy guides the larger teacher model to engage in macro-to-micro thinking for complex recommendation task through CoT prompting.\nThrough the process of distillation, the small student model with only 4% parameters of the large teacher model acquires step-by-step thinking capabilities and evolves into a good reasoner. Subsequently, we directly deploy the small language model as a knowledge generator for sequential recommendation, which can derive high-quality reasoning knowledge highly relevant to recommendation. These knowledge reflect user preferences for categories, brands, and specific items, which can be flexibly integrated with any sequential recommendation backbone, including ID-based and ID-agnostic scenarios.\nOur key contributions can be summarized as follows:\nTo the best of our knowledge, it is the first knowledge distillation framework of LLMs tailored for sequential recommendation.\nWe propose SLIM, a novel step-by-step knowledge distillation framework, empowering sequential recommenders with the CoT reasoning capabilities of LLMs in a resource-efficient manner.\nExtensive experiments on three datasets demonstrates the effectiveness of our proposed SLIM. Further analysis reveals that SLIM generates meaningful reasoning at affordable costs."
        },
        {
            "section_id": "2",
            "parent_section_id": null,
            "section_name": "2. The Proposed Framework",
            "text": "###figure_1### In this section, we propose SLIM, a novel knowledge distillation framework tailored for recommendation, which incorporates the reasoning capabilities of LLMs into recommender systems in a resource-efficient manner. The overview is illustrated in Figure 1  ###reference_###."
        },
        {
            "section_id": "2.1",
            "parent_section_id": "2",
            "section_name": "2.1. Sequential Recommendation Backbone",
            "text": "Sequential recommendation aims at the accurate prediction of users’ next behavior by capturing evolved and dynamic preferences over historical behavior sequences, which has occupied a critical position in various modern information systems (Quadrana et al., 2018  ###reference_b24###).\nIn general, the success of sequential recommendation typically hinges on the meaningful representation of items and effectively encoding behavior patterns.\nItem Representation. \nFor neural sequential recommendations, the item encoder is the key component which transfers the items to representations.\nFormally, given an item set , each item  may be associated with several optional attributes , such as title, category and brand. The encoder can generate the item representations for each item based on their ID (i.e., ) and attributes (i.e., ):\nwhere  is the representation of item .\nGenerally,  is implemented as a hybrid architecture where a embedding layer aims at tackling ID-like features (e.g., item id), coupled with a text encoder (e.g., BERT (Devlin et al., 2018  ###reference_b6###)) for context embedding based on the item description (e.g., title, category).\nSequential Encoding. \nTo capture the sequential characteristics of user behaviors, the action sequence of user  can be organized in chronological order , where  represents the -th item that the user  interacted with.\nNext, each item in  is firstly fed into  (denoted as ), followed by the a sequential encoding.\nwhere  denotes the representation of sequence .  is sequence encoder, which can be implemented with the Attention (Vaswani et al., 2017  ###reference_b30###) or other neural architectures (Zhang et al., 2019  ###reference_b41###; Sherstinsky, 2020  ###reference_b25###).\nBased on the sequence , our objective is to predict the next item  that the user  is likely to interact with at the -th step.\nPrediction and Optimization.\nAfter generating the above representations, we can obtain the final prediction  at time  with dot product or MLP layer followed by a sigmoid activation function (He et al., 2017  ###reference_b8###), where each element  indicates how likely the item  should be recommended to the target user .\nFinally, the model is trained with binary cross-entropy (De Boer et al., 2005  ###reference_b5###) loss as follows:\nNote that these classical sequencical models typically perform recommendation based on the user action sequences and item attributes (e.g., title, category and brand), lacking the reasoning power that have recently emerged in LLMs."
        },
        {
            "section_id": "2.2",
            "parent_section_id": "2",
            "section_name": "2.2. Step-by-Step Knowledge Distillation for Recommendation",
            "text": "Despite the remarkable reasoning ability of LLMs, it is non-trivial to adapt LLMs to empower the traditional recommender systems.\nThe challenge arises from two aspects: (1) Complex behavior patterns of users are difficult to understand directly by LLMs. (2) The large size and high inference latency of LLMs exacerbates resource-consuming.\nTherefore, we propose step-by-step knowledge distillation to transfer the reasoning capabilities of LLMs to a smaller LLaMA2-7B (Touvron et al., 2023  ###reference_b29###) model specialized for the recommendation tasks.\nIn detail, our distillation strategy consists of two straightforward steps:\nFirstly, we employ CoT prompting related to user behavior to guide the LLM (i.e., teacher) in thinking step-by-step and generating natural language rationales that support its predictions in the recommendation scenario.\nSecondly, these rationales are subsequently utilized as labels to fine-tune the downstream smaller language model (i.e., student), enabling it to approach the reasoning capabilities of the larger model in the recommendation domain. Finally, the fine-tuned smaller model acts as the ultimate knowledge generator, offering reasoning knowledge to the recommender systems."
        },
        {
            "section_id": "2.2.2",
            "parent_section_id": "2.2",
            "section_name": "2.2.2. Fune-tuning Smaller Models with Recommendation Rationales.",
            "text": "By guiding the thought process of LLMs step-by-step, we can comprehend complex behavior patterns of users and generate high-quality recommendation rationales.\nHowever, their large scale and computational overhead make them unsuitable for recommendation scenarios that require low latency. For instance, serving a single 175 billion LLM necessitates a minimum of 350GB of GPU memory (Zheng et al., 2022  ###reference_b44###).\nDespite recent study (Xi et al., 2023  ###reference_b38###) attempting to mitigate this issue by offline inference, it’s still unaffordable to generate recommendation rationales for all users in the real-world scenario.\nTo this end, we leverage knowledge distillation to transfer the recommendation reasoning capabilities of larger teacher models to smaller student models, thereby reducing the computational overhead.\nConsidering that complex prompts can improve the reasoning quality of large models but greatly increase the understanding difficulty of small models, we design simplified template  based on the template , as showed in Figure 3  ###reference_###.\nSubsequently, we generate simplified prompts  as input, and collect the rationales  generated by teacher LLMs as the expected output labels to fine-tune the smaller student model.\nAs a result, for a given input instruction , we train the smaller model with parameters  to generate the corresponding recommendation rationale . Formally, we optimize the negative log-likelihood of conditional language modeling objective as follows:\nwhere  is the - token of the ,  represents the tokens before .\nTo conserve resources, we employ the LoRA (Hu et al., 2021  ###reference_b13###) for parameter-efficient model fine-tuning.\nThis approach involves training only a small set of additional parameters instead of the entire model.\nThrough experimental validation, we demonstrate that the generated rationales maintain a comparable quality to models with 25 times the model size, despite using a limited number of training samples and a smaller model size. As illustrated in Figure 3  ###reference_###, the student model responses showed a step-by-step reasoning ability similar to that of the teacher model.\nFor instance, the student model initiates by logically inferring the user’s intent by leveraging its recommendation-related CoT. Subsequently, it offers potential game genres that align with the user’s interests. Ultimately, several specific games are recommended to the user.\nOverall, by utilizing recommendation rationales as labels instead of generating pseudo-labels for recommended results from LLMs, we enhance the smaller language model with step-by-step reasoning capabilities similar to the reasoning process of the larger model.\n###figure_3###"
        },
        {
            "section_id": "2.3",
            "parent_section_id": "2",
            "section_name": "2.3. Empowering Recommender with Reasoning Knowledge",
            "text": "With the help of step-by-step knowledge distillation, small language models can become efficient reasoners. However, traditional sequential recommendation models cannot directly utilize the rationales of natural language forms.\nThus, in this section, we explore how to apply the recommendation rationales generated by small language models to the sequence recommendation model, enabling it to efficiently combine the reasoning ability of LLMs in a resource-efficient manner.\nSpecifically, we introduce two application approaches.\nThe first approach is ID-based, where we treat the rationales text as supplementary knowledge and combine them with ID-based recommendation backbone to improve the traditional closed-loop learning dependent on user-item interactions.\nThe second approach is ID-agnostic, where we encode the rationale text of user behaviors and the description text of candidate items as the representations of user and item, respectively. This allows us to make recommendations based on text similarity."
        },
        {
            "section_id": "2.3.1",
            "parent_section_id": "2.3",
            "section_name": "2.3.1. Encoding Recommendation Rationales",
            "text": "Owing to the efficient reasoning power of small language model, each user behavior sequence  can be associated with corresponding CoT rationales , while each item  can be associated with attribute descriptions  (e.g., title, category, brand).\nThen we leverage pre-trained language models (PLMs) to learn text representations, enabling the measurement of semantic distance in vector space. Concretely, we adopt the text encoder to map the text on both the item side and the sequence side into a unified semantic space:\nwhere  and  represent the text representations of item descriptions and recommendation rationales, respectively. The encoder  can be flexibly configured as any frozen or trainable text encoding model, which we instantiate with BERT (Devlin et al., 2018  ###reference_b6###) in this work.\nDue to the step-by-step thinking process of language model, the representation  encodes rich reasoning knowledge from open-world at both macro-level (i.e., general user preference) and micro-level (i.e., specific recommended item)."
        },
        {
            "section_id": "2.3.2",
            "parent_section_id": "2.3",
            "section_name": "2.3.2. Utilizing Recommendation Rationales",
            "text": "Traditional sequential recommendation methods learn the user sequence representation based only on the user-item interaction history, resulting in an information-enclosed model.\nTo alleviate this issue, we enhance the traditional recommender systems with the rationale representations obtained from Eq. (5  ###reference_###), which is derived from open-world knowledge and deep reasoning about the user’s behavior patterns. Specifically, we leverage it through the following two approaches.\nEmpowering ID-Based Recommendation.\nTo disrupt the closed systems of sequential recommendation, we integrate the rationale representations into traditional recommendation backbone, effectively combining the open-world reasoning knowledge with the collaborative signal of traditional recommendations.\nSpecifically, we propose an information fusion layer to combine the meaningful text representations (i.e.,  and ) with the original embeddings in the backbone model\nas follows:\nwhere  is the ID embedding of item,\n is the sequence representation obtained from SeqEncoder (i.e., Eq (2  ###reference_###)) in backbone model,  denotes the concatenation operation,  transforms the text representations to the same dimension with the ID embeddings, and  is an fusion layer that enables the model to learn and incorporate flowing information from both sources. Without loss of generality, we implement  and  with linear layers.\nEmpowering ID-Agnostic Recommendation.\nRecent studies have revealed that sequential models that focus on text modeling exhibit superior generalization abilities and are more effective in handling cold-start items (Li et al., 2023  ###reference_b16###; Hou et al., 2022  ###reference_b10###).\nTherefore, we explore a direct utilization of rationale representations in ID-agnostic recommendation scenarios. In this case, the representations of item text and rationale are directly transformed into a unified space as follows:\nwhere  denotes the transformation layer, which we implement using linear layers.\nSince  contains step-by-step reasoning knowledge about user preferences, the model can recommend item with matching item-side information  to the user and provide explainable recommendation rationales of natural language form."
        },
        {
            "section_id": "3",
            "parent_section_id": null,
            "section_name": "3. Experiments",
            "text": ""
        },
        {
            "section_id": "3.1",
            "parent_section_id": "3",
            "section_name": "3.1. Experimental Settings",
            "text": ""
        },
        {
            "section_id": "3.1.1",
            "parent_section_id": "3.1",
            "section_name": "3.1.1. Datasets.",
            "text": "We conduct our experiments on three categories from the Amazon Review dataset: Video Games (Games), Grocery and Gourmet Food (Food), and Home and Kitchen (Home). More information\nabout these datasets are presented in Appendix  A.1  ###reference_###."
        },
        {
            "section_id": "3.1.2",
            "parent_section_id": "3.1",
            "section_name": "3.1.2. Baselines.",
            "text": "We adopt three widely used sequencial recommendation models as the backbone, i.e., GRU4Rec, SASRec, SRGNN. More information\nabout these backbones are shown in Appendix A.2  ###reference_###.\nFor each backbone, we examine the performance of its Item Feature Extensions: denoted as , , and . These extensions concatenating the item ID vector and item description text vector as the input, resulting in enhanced item representations.\nWe also introduce another ChatGPT Feature Extension of each backbone: , which directly input the rationales generated by the teacher model into Eq (5  ###reference_###) without distillation.\nThe implementation details of each methods shown in Appendix  A.3  ###reference_###."
        },
        {
            "section_id": "3.1.3",
            "parent_section_id": "3.1",
            "section_name": "3.1.3. Evaluation Metrics",
            "text": "The details of evaluation shown in Appendix  A.3  ###reference_###.\nWe utilize three widely-adopted metrics for evaluation: NDCG@10, Hit Rate@10, and Hit Rate@20. The average scores of 5 runs and the standard deviation are reported. Following the strategy in (Kang and McAuley, 2018  ###reference_b14###),\nwe randomly sample 100 negative items for each user  and rank these items alongside the ground-truth item. The rankings of these 101 items are then used to evaluate."
        },
        {
            "section_id": "3.2",
            "parent_section_id": "3",
            "section_name": "3.2. Overall Performance",
            "text": ""
        },
        {
            "section_id": "3.2.1",
            "parent_section_id": "3.2",
            "section_name": "3.2.1. Improvement over Backbone Models in ID-based scenarios.",
            "text": "Our SLIM is highly flexible and can be integrated with any type of sequential recommendation backbone. Firstly, we evaluate the performance of the SLIM across various backbones. The results of these comparisons are presented in Table 1  ###reference_###. We have the following observations:\n(1) Compared to all backbones and their item feature extensions, the proposed SLIM achieves state-of-the-art (SOTA) performance across all datasets. This further substantiates the effectiveness of our model in enhancing traditional recommendations. Notably, SLIM achieves a relative improvement of  over the  in terms of Hit Rate@10 on the Home dataset. These improvements are attributed to the meaningful rationales generated from our distilled student model, which contains a wealth of knowledge that benefits recommendations as a valuable supplement to closed collaborative signals.\n(2) Surprisingly, in most cases (22 / 27), SLIM in each backbone outperforms the ChatGPT feature extensions , achieving a relative improvement of  in terms of Hit Rate@10 on the Home dataset with the GRU4Rec backbone. While SLIM’s knowledge is distilled from the teacher model ChatGPT, the lack of control over closed-source models may result in the generation of correct but irrelevant responses to recommendations. This indicates that our smaller model can further prioritize the information relevant to recommendations after distillation. Despite being smaller in scale, it greater effectiveness in recommendations."
        },
        {
            "section_id": "3.2.2",
            "parent_section_id": "3.2",
            "section_name": "3.2.2. Performance in ID-agnostic scenarios.",
            "text": "To establish a more efficient and generalizable model, we evaluate the performance of SLIM in ID-agnostic scenarios, i.e., we solely based on matching CoT-based sequence embeddings and text-based item embeddings as Eq (7  ###reference_###), named Text Matching. The results are shown in Table 2  ###reference_###. We also obtained interesting findings:\n(1) In comparison to models that generate rationales based on the teacher model (), SLIM outperforms it in  of cases, despite having only  of the parameters compared to ChatGPT. This demonstrates that even with limit training samples (1000-2000) and a smaller model size, SLIM can generate high-quality recommendation rationales that are highly competitive with ChatGPT.\n(2) Additionally, this straightforward matching approach exhibits superior performance compared to all ID-based backbones listed in Table 1  ###reference_###. This indicates that high-quality text from both the sequence and item side can lead to promising recommendations, even without meticulous design of the text encoder.\n(3) To verify the effectiveness of each step in the rationales, i.e., the user interest of Step1, the item category of Step2, and the specific product of Step3, we evaluate them separately in Text Matching. It is worth noting that the ranking of recommendation performance consistently follows the pattern of Step3 ¿ Step2 ¿ Step1 in all cases.\nSurprisingly, on the Home dataset, Step3 even surpasses the performance achieved using the entire Rationale.\nThese results suggest that the smaller model trained with CoT prompting is capable of step-by-step thinking, similar to human reasoning. As the chain of thought evolves, the information relevant to recommendations will be inferred.\nHowever, the performance of the Step1 is not satisfactory, possibly because the macroscopic information in this step fails to align well with the microscopic information on the item side, such as titles and categories. Nevertheless, the first step still plays a crucial role as the foundation for subsequent reasoning processes and ensures the interpretability of the model."
        },
        {
            "section_id": "3.3",
            "parent_section_id": "3",
            "section_name": "3.3. Merits of SLIM",
            "text": "###figure_4### Potentially Good Interpretability for the Recommendation Results.\nFigure 4  ###reference_### illustrates a sample where SLIM successfully recommends the ground-truth, while SASRec fails.\nThe target next item in this sample is a long-tail item that only appears once in the training set. As a result, traditional ID-based models struggle to capture adequate collaborative signals. However, SLIM’s generated rationales are able to deduce the user’s preferences, which align closely with the characteristics of the target item “Milk Protein Rich Nutrition Bar”, such as the categories of “Healthy snacks”.\nMore significantly, SLIM showcases its remarkable reasoning capabilities and extensive domain knowledge by accurately inferring that users are likely to purchase “Protein Bars”.\nIn this manner, the textual information from both the sequence side and item side aligns well, leading to a high similarity in the vector space. Moreover, SLIM generates rationales in human-understandable natural language. The rationales provided in Step 1 and Step 2 offer justifications for the recommendation of “Protein Bars” by SLIM. For each recommended item, SLIM can provide a natural language explanation, enhancing the interpretability of the recommendation process.\nConsistent Improvement for User with Different Sparsity.\nTo investigate the impact of interaction data sparsity, we group users based on the sparsity level of their interactions and evaluate the performance of SLIM separately on different user groups.\nSpecifically, we sorted users based on their interaction frequency, and then divided them equally into five user groups. Subsequently, SLIM and SASRec are trained separately on the interaction data of each user group, and compare their recommendation performance on different user groups.\nThe results, as depicted in Figure 5  ###reference_###, that SLIM consistently outperforms SASRec across all user groups, and SLIM exhibits greater improvement on the relatively sparse user group  compared to the dense user group . This suggests that our method’s improvement is stable and robust, effectively mitigating the issue of sparsity in sequential recommendation.\n###figure_5### ###figure_6### ###figure_7### Impressive Capability of Alleviating Popularity Bias.\nIn the field of recommender systems, popularity bias means that popular items are recommended even more frequently than their popularity would warrant. This bias intensifies the long-tail effects in real-world recommendation domains.\nTo analyze the impact of our proposed SLIM on popularity bias, we count the frequency of items in the training data and recommendation results.\nAs depicted in Figure 6  ###reference_### (the results of two additional datasets are presented in Figure 7  ###reference_### in the Appendix), our method effectively recommends tail items compared to the traditional method SASRec, which focuses on recommending popular head items.\nExperimental results confirm that our method significantly mitigate the popularity bias.\n###figure_8### Significantly More Affordable Compared to SOTAs. SLIM has demonstrated promising performance. In this part, we will analyze the efficiency of the model through a comprehensive cost analysis across multiple dimensions, including time cost, model size, deployment difficulty and API monetary cost.\nSpecifically, we compare two representative recommendation models based on the generation capabilities of LLM.\n(1) LLM as a ranker (Hou et al., 2023  ###reference_b11###). (2) LLM as a knowledge enhancer (Xi et al., 2023  ###reference_b38###).\nWe do not take into account the costs associated with backbones, as the backbone model is typically variable and the cost is generally negligible compared to LLM.\nDue to the two-stage nature of the LLM as a knowledge enhancer approach, it involves offline knowledge generation based on LLM and online inference. The term “Offline/Online Time” refers to the average response time of the closed-source ChatGPT API for the compared methods. Conversely, our method corresponds to the average inference time on a single Nvidia A100 GPU. It is worth mentioning that despite deploying SLIM on only one GPU, we achieve a comparable time cost compared to the API call duration of ChatGPT, which requires significant resource consumption for deployment.\nFrom Table 3  ###reference_###, it can be concluded that SLIM is a highly efficient model compared to existing LLM-based recommendations. It possesses acceptable inference latency, minimal model size, and can be deployed on limited resources. Additionally, being based on an open-source model, it does not incur any financial cost.\nSpecifically, we study the data efficiency of fine-tuning the student models, and we conclude that only 1000 samples is enough for a promising performance, the details are shown in Appendix B.1  ###reference_###."
        },
        {
            "section_id": "4",
            "parent_section_id": null,
            "section_name": "4. Related Work",
            "text": ""
        },
        {
            "section_id": "4.1",
            "parent_section_id": "4",
            "section_name": "4.1. Sequential Recommender Systems",
            "text": "The core idea of existing sequential recommendations lies in initially formalizing user behavior as a chronologically-ordered interaction sequence with items, followed by designing diverse behavior encoders to learn behavior patterns that accurately depict user interests (Wang et al., 2019  ###reference_b31###).\nGRU4Rec (Hidasi et al., 2015  ###reference_b9###) is one of the earliest attempts to learn evolving patterns for user behaviors using Gated Recurrent Units (GRU).\nWith the rapid development of deep learning (Wang et al., 2017  ###reference_b32###), there have also been emerging many neural networks as behavior encoders, including Convolutional Neural Networks-based methods (Tang and Wang, 2018  ###reference_b28###), Attention-based methods (Kang and McAuley, 2018  ###reference_b14###), and Graph Neural Networks-based methods (Wu et al., 2019  ###reference_b37###; Sun et al., 2024  ###reference_b27###; Wang et al., 2022  ###reference_b33###).\nTo enhance the transferability of the sequence modeling, recent studies have begun exploring ID-agnostic text-based modeling approaches (Li et al., 2023  ###reference_b16###; Hou et al., 2022  ###reference_b10###), such as Recformer (Li et al., 2023  ###reference_b16###), which proposes formulating each item as a “sentence” and designing a Transformer-based language model to learn user preference representations.\nHowever, these methods rely on limited textual information provided by the recommendation dataset, which restricts the model’s capabilities due to its isolation from rich open-world knowledge. Recently, the emergence of LLM that utilize massive training corpora and large model sizes has disrupted the traditional closed-loop of user-item interaction in recommendations (Liu et al., 2023a  ###reference_b20###, b  ###reference_b19###)."
        },
        {
            "section_id": "4.2",
            "parent_section_id": "4",
            "section_name": "4.2. LLM Enhanced Recommender Systems",
            "text": "The utilization of LLMs, with their human-like understanding and generation capabilities, introduces new knowledge spaces in recommendations (Lin et al., 2023a  ###reference_b17###; Fan et al., 2023  ###reference_b7###; Wu et al., 2023  ###reference_b36###).\nTo integrate LLM’s generation capabilities into recommendations, the current methods can be primarily categorized into two mainstream trends based on the different roles LLM plays in the recommendation pipeline.\nThe first trend involves utilizing LLM as a ranker or scorer (Zhang et al., 2023a  ###reference_b39###; Liu et al., 2023b  ###reference_b19###; Dai et al., 2023  ###reference_b4###; Hou et al., 2023  ###reference_b11###; Zhang et al., 2023c  ###reference_b40###; Kang et al., 2023  ###reference_b15###).\nFor instance,  (Hou et al., 2023  ###reference_b11###) explores the zero-shot ranking capabilities of LLM in recommendation. This requires careful design of prompts that involve a predefined list of candidate items for the limited re-ranking stage.\n (Zhang et al., 2023c  ###reference_b40###) proposes to view recommendation as instruction following by LLMs. In this approach, 39 instruction templates are manually designed for LLMs.\nHowever, these methods often exhibit limited performance because the frozen LLMs are typically trained on open-world corpora that lack domain-specific collaborative signals from recommendations.\nTo incorporate collaborative information, recent studies have started exploring another trend, which involves utilizing LLM as a knowledge enhancer to complement traditional recommendations (Liu et al., 2023a  ###reference_b20###; Xi et al., 2023  ###reference_b38###).\nFor example,  (Xi et al., 2023  ###reference_b38###) explores the acquisition of user preferences and item factual knowledge from ChatGPT, and utilizes them to enhance traditional Click-Through Rate (CTR) prediction.\n (Liu et al., 2023a  ###reference_b20###) proposes to employ open-source LLM as content encoders and utilize closed-source ChatGPT to enrich the training data.\n (Lin et al., 2023b  ###reference_b18###) proposes a LLM-based augmentation technique to enrich training samples.\nWhile promising, existing work has not fully leveraged the step-by-step reasoning capabilities of LLM in the recommendation scenario. Furthermore, current approaches often rely on the use of large model sizes to achieve improved reasoning capabilities. Although techniques like prestoring can be used to deploy only the inference model, these models still require larger model sizes in either offline or online stages, which may not be feasible in real-world recommender systems."
        },
        {
            "section_id": "5",
            "parent_section_id": null,
            "section_name": "5. Conclusion",
            "text": "In this paper, we propose SLIM, a method that enables sequential recommender systems to leverage the substantial reasoning capabilities of LLMs in a resource-efficient manner. We design a step-by-step knowledge distillation module to transfer the step-by-step reasoning capabilities in recommendation from a larger teacher model to a smaller student model (with approximately 4% of the parameters of the teacher model).\nThis smaller model evolves into a proficient reasoner, which can be directly deployed as a “slim” knowledge generator for sequential recommendation. Consequently, this knowledge can be flexibly integrated with any sequential recommendation backbone and utilized in both ID-based and ID-agnostic scenarios.\nThe experimental results demonstrate that SLIM significantly improves the performance of sequential recommendation backbones. It also achieves promising results in ID-agnostic scenarios without relying on any backbone. Furthermore, additional analysis experiments highlight that the costs associated with SLIM are affordable and have the potential to enhance the interpretability of recommendations. A possible future direction is to design customized knowledge encoders to further capture the information from smaller models."
        }
    ]
}