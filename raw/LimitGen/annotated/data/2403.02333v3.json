{
    "title": "Key-Point-Driven Data Synthesis with its Enhancement on Mathematical Reasoning",
    "abstract": "Large language models (LLMs) have shown great potential in complex reasoning tasks, yet their performance is often hampered by the scarcity of high-quality and reasoning-focused training datasets. Addressing this challenge, we propose Key-Point-Driven Data Synthesis (KPDDS), a novel data synthesis framework that synthesizes question-answer pairs by leveraging key points and exemplar practices from authentic data sources. KPDDS ensures the generation of novel questions with rigorous quality control and substantial scalability.\nAs a result, we present KPMath, an extensive synthetic dataset tailored for mathematical reasoning, comprising over 800K question-answer pairs.\nUtilizing KPMath and augmenting it with additional reasoning-intensive corpora, we create the comprehensive KPMath-Plus dataset.\nThe Qwen1.5-72B model, fine-tuned on KPMath-Plus, achieves 87.0% PASS@1 accuracy on GSM8K and 58.3% on MATH, surpassing competitors in the 7B to 70B range and best commercial models like GPT-4 across multiple math reasoning datasets.",
    "sections": [
        {
            "section_id": "1",
            "parent_section_id": null,
            "section_name": "Introduction",
            "text": "The recent advent of large language models (LLMs) such as GPT-4 (OpenAI, 2023  ###reference_b41###), Gemini (Team et al., 2023  ###reference_b51###), and Mistral (AI, 2024  ###reference_b1###) has sparked significant interest due to their advanced capabilities in diverse domains Bubeck et al. (2023  ###reference_b9###). Despite this, their reasoning prowess, particularly in challenging domains like advanced mathematics (Lewkowycz et al., 2022  ###reference_b30###), competitive programming (Huang et al., 2023  ###reference_b24###), and integrated vision-language planning (Cen et al., 2024  ###reference_b10###), remains under scrutiny. In current mathematical reasoning corpora, such as OpenWebMath (Paster et al., 2023b  ###reference_b44###) and MathPile (Wang et al., 2023b  ###reference_b57###), the vast internet-sourced data often suffers from poor quality and relevance to the subject matter. Conversely, manually annotated high-quality datasets like the MATH dataset (Hendrycks et al., 2021b  ###reference_b23###) are scarce and sometimes lack detailed reasoning steps.\nPrior efforts to boost the mathematical reasoning capabilities of LLMs using synthetic data have primarily adopted two strategies.\nThe first strategy focuses on augmenting existing datasets. It involves question rephrasing (Yu et al., 2023b  ###reference_b63###) or generating similar questions (Yu et al., 2023b  ###reference_b63###; Luo et al., 2023a  ###reference_b34###; Liu & Yao, 2024  ###reference_b32###).\nHowever, the primary issue is that the generated questions are not only textually or conceptually similar but also uncontrollable in their variations.\nThe second strategy seeks to broaden the training dataset by generating new questions from established knowledge concepts. Knowledge bases are either compiled from online educational resources, such as Khan Academy’s math courses (Huang et al., 2024  ###reference_b25###), or synthesized from scratch using models like GPT-4 (Li et al., 2024  ###reference_b31###).\nHowever, these methods depend on constructed knowledge that might not align with the existing dataset’s distributions and are difficult to comprehend without examples to illustrate the concepts.\n###figure_1### Considering these disadvantages of the two strategies, we introduce a novel data synthesis paradigm termed Key-Point-Driven Data Synthesis (KPDDS), which capitalizes on the strengths of both data synthesis strategies. As depicted in Figure 1  ###reference_###, it delves into datasets for knowledge mining, using relevant key points and associated problems to inform the generation of new problems.\n(1) For knowledge construction, we begin by extracting topics and key points from seed problems using a labeling model, followed by a clustering algorithm to ensure deduplication and alignment.\nTherefore, we get the Math Practices with Key Points (MPKP) dataset and construct the Topic-level Co-occurrence Probability Matrix (TCPM) to understand the frequency and distribution of topic pairs within the dataset.\n(2) For practice synthesis, we sample multiple topics and key points from MPKP using the TCPM as a guide. These key points, along with corresponding example practices, serve as input for the synthesizing model to generate new questions. A scoring model then assesses the quality of these questions, allowing only those with high scores to proceed. Then, a reasoning model generates a range of answer options, which are later consolidated into consensus solutions through a voting mechanism.\nUtilizing the training sets of the MATH (Hendrycks et al., 2021b  ###reference_b23###) and GSM8K (Cobbe et al., 2021b  ###reference_b15###) datasets as foundational data, we developed a novel dataset named KPMath. Our training corpus was further enriched by integrating a series of mathematical reasoning datasets, leading to the creation of a comprehensive training dataset, KPMath-Plus. By fine-tuning the Qwen1.5-72 model (Bai et al., 2023  ###reference_b7###) on KPMath-Plus, we achieved zero-shot PASS@1 accuracies of 87.0% on the GSM8K test set and 58.3% on the MATH test set, culminating in a promising average of 81.5% across six math reasoning datasets. This performance exceeds that of all competitors within the 7B to 70B model size range and best commercial models like GPT-4.\nIn the Hungarian Exam Score test, the KPMath-Plus-Mistral-7B model also outperforms the majority of models, indicating its competitive performance."
        },
        {
            "section_id": "2",
            "parent_section_id": null,
            "section_name": "Related Work",
            "text": ""
        },
        {
            "section_id": "2.1",
            "parent_section_id": "2",
            "section_name": "Math Reasoning with LLMs",
            "text": "Recently, solving math problems is treated as an important aspect of evaluating LLM’s reasoning ability.\nHowever, the LLMs trained for general purposes like GPT-4 (Bubeck et al., 2023  ###reference_b9###), Llama2 (Touvron et al., 2023  ###reference_b53###), Mistral (Jiang et al., 2023  ###reference_b26###), InternLM2 (Team, 2023  ###reference_b52###), Qwen (Bai et al., 2023  ###reference_b7###), Gemini (Team et al., 2023  ###reference_b51###) and DeepSeek (Bi et al., 2024  ###reference_b8###) have shown limited capabilities in math reasoning.\nTo enhance the math reasoning ability of LLMs, researchers have turned their attention to research directions like prompting methods (Chia et al., 2023  ###reference_b13###; Zheng et al., 2023  ###reference_b68###; Chen et al., 2023  ###reference_b11###; Zhang et al., 2023b  ###reference_b67###), data construction for pretraining (Taylor et al., 2022  ###reference_b50###; Lewkowycz et al., 2022  ###reference_b30###; Paster et al., 2023a  ###reference_b43###; Azerbayev et al., 2022  ###reference_b5###; 2023  ###reference_b6###) and instruction tuning (Yue et al., 2024  ###reference_b64###; Yu et al., 2023b  ###reference_b63###; Luo et al., 2023a  ###reference_b34###; Gou et al., 2024b  ###reference_b20###; An et al., 2023  ###reference_b2###; Liu & Yao, 2024  ###reference_b32###; Huang et al., 2024  ###reference_b25###; Li et al., 2024  ###reference_b31###), interacting with external tools (Mishra et al., 2022  ###reference_b40###; Gao et al., 2022  ###reference_b18###; Gou et al., 2024a  ###reference_b19###; b  ###reference_b20###; Yue et al., 2024  ###reference_b64###; Zhou et al., 2023  ###reference_b70###; Zhang et al., 2024  ###reference_b65###), and reinforcement learning with rewards (Ma et al., 2023  ###reference_b37###; Yu et al., 2023a  ###reference_b62###; Wang et al., 2023a  ###reference_b55###; Luong et al., 2024  ###reference_b36###) for either outcomes or steps.\nThis work is in line with math reasoning data construction for instruction tuning."
        },
        {
            "section_id": "2.2",
            "parent_section_id": "2",
            "section_name": "Data Synthesis for Math Reasoning",
            "text": "In the realm of math reasoning, data synthesis is usually applied for instruction tuning, with each data sample encompassing a question text and its corresponding answer text. To advance this field, research efforts focus on three critical aspects: enhancing the quality of answers, generating novel questions, and implementing quality control measures.\nFor answer quality, some works focus on chain-of-thought (CoT) (Wei et al., 2022  ###reference_b58###; Yu et al., 2023b  ###reference_b63###) style answers, while others like Yue et al. (2024  ###reference_b64###) and Gou et al. (2024b  ###reference_b20###) investigate program-based answers.\nYue et al. (2024  ###reference_b64###) synthesize program-of-thought (PoT) (Chen et al., 2022  ###reference_b12###) style answers using GPT-4.\nGou et al. (2024b  ###reference_b20###) further explore interleaved answers with program-based tool use.\nIn this work, we focus on the synthesis of CoT-style answers.\nFor question novelty, research diverges into two approaches: starting from existing problems, Shao et al. (2023  ###reference_b47###) explore answer-first data synthesis and Yu et al. (2023b  ###reference_b63###) utilize backward reasoning, while Luo et al. (2023a  ###reference_b34###), An et al. (2023  ###reference_b2###), and Liu & Yao (2024  ###reference_b32###) focus on evolution instruction and iterative composition using reasoning steps. Alternatively, some work begins with knowledge-based techniques, where Huang et al. (2024  ###reference_b25###) extracts concepts from Khan Academy and Li et al. (2024  ###reference_b31###) uses GPT-4 to create a concepts taxonomy. The former is limited by poor scalability with existing data, and the latter often yields a synthetic data distribution that significantly deviates from real data. In our work, we create questions by extracting key points from real data and then synthesizing new problems based on these key points with authentic and reliable exercises.\nFor synthetic data quality, Huang et al. (2024  ###reference_b25###) prompt GPT-4 to convert CoT-style answers into verifiable Lean-3 code, while Trinh et al. (2024  ###reference_b54###)’s AlphaGeometry ensures Euclidean geometry theorem accuracy using symbolic deduction. In contrast, We assess synthetic question and answer quality through GPT-4 scored evaluations and consensus scoring via repeated sampling."
        },
        {
            "section_id": "2.3",
            "parent_section_id": "2",
            "section_name": "Data Synthesis for Other Applications",
            "text": "The aim of synthetic data is to offer a convincing and fuller depiction of the actual data source, maintaining key statistical characteristics such as the distribution patterns of continuous variables, categorical ratios, and the latent relationships among different variables.\nExcept for math reasoning, there are also works on data synthesis for other applications like code (Luo et al., 2023b  ###reference_b35###; Gunasekar et al., 2023  ###reference_b21###; Wei et al., 2023  ###reference_b59###), table reasoning (Lei et al., 2023  ###reference_b29###), medical application (Zhang et al., 2023a  ###reference_b66###; Tang et al., 2023  ###reference_b49###), visual reasoning (Du et al., 2023  ###reference_b17###), and general purposes (Wang et al., 2022  ###reference_b56###; Xu et al., 2023  ###reference_b61###; Li et al., 2024  ###reference_b31###)."
        },
        {
            "section_id": "3",
            "parent_section_id": null,
            "section_name": "Method",
            "text": ""
        },
        {
            "section_id": "3.1",
            "parent_section_id": "3",
            "section_name": "Overview",
            "text": "In the comprehensive framework illustrated in Figure 1  ###reference_###, our methodology is systematically delineated into two primary phases: Knowledge Construction and Practice Generation, each consisting of two components.\nWe will introduce these four components separately: Knowledge Extraction, Topic-level Co-occurrence Probability Matrix (TCPM) Construction, Question Generation with Quality Assessment, and Answer Generation with Consensus Assessment.\nThe specific prompts utilized for each component are detailed in Appendix A  ###reference_###."
        },
        {
            "section_id": "3.2",
            "parent_section_id": "3",
            "section_name": "Knowledge Extraction",
            "text": "We employ GPT-4 as the labeling model to extract knowledge pertinent to problem-solving from seed problems, as illustrated in Figure 1  ###reference_###.\nThe questions and solutions of seeds are input into GPT-4, which then extracts information at two levels of knowledge.\nKey excerpts from the prompt for knowledge extraction are showcased in Figure 2  ###reference_###, and the complete details are shown in Figure 8  ###reference_###.\nThe first level of knowledge is the topics, which correspond to the subject and its subcategories that are pertinent to the problem, such as ”Geometry - Circles”.\nThe secondary level is key points (KPs), which comprise the theorems or methods essential for the resolution process, like ”Determining the center of a circle from its equation”.\nThe process of knowledge extraction results in an uncontrolled, extensive number of topics, many of which exhibit semantic overlap. Examples of such redundancy include ”Arithmetic - Percentages” and ”Arithmetic - Percentage”. Furthermore, there are instances where a topic occurs only once, accompanied by very few KPs. Therefore, we further process the extracted knowledge data. Specifically, we use OpenAI’s text-embedding-ada-002 to embed all KPs, and the topics are represented by the average value of the embeddings of their included KPs. Then, we calculate the cosine similarity of the topic embeddings for deduplication and clustering, obtaining several representative topics, which are displayed in Tables 4  ###reference_### and 3  ###reference_###. Finally, we construct the Math Practices with Key Points (MPKP) dataset."
        },
        {
            "section_id": "3.3",
            "parent_section_id": "3",
            "section_name": "TCPM Construction",
            "text": "Mathematical problems typically involve multiple topics and KPs, and the combination of topics within these problems follows a discernible pattern. For example, semantically highly similar topics do not appear repeatedly in the same problem, whereas arbitrarily meshing unrelated topics tends to result in nonsensical questions.\nIn light of this structured complexity, we compute the Topic-level Co-occurrence Probability Matrix (TCPM) from the topics present in mathematical questions within the MPKP dataset. Our methodology is systematically outlined in Algorithm 1  ###reference_###. This algorithm quantifies the co-occurrence and self-interaction of topics within a dataset by constructing a matrix that logs the frequency of topic pairs and the instances where the number of KPs for individual topics exceeds five, followed by a logarithmic normalization.\nAn increased co-occurrence probability between topic clusters indicates a likelihood of their concurrent appearance in the examined problems.\nFigures 10  ###reference_### and 11  ###reference_### presents a heatmap visualization of the co-occurrence probability matrix."
        },
        {
            "section_id": "3.4",
            "parent_section_id": "3",
            "section_name": "Question Generation with Quality Assessment",
            "text": "By extracting knowledge and constructing the TCPM from the seed problems, we pave the way for generating new problems that are similar yet varied in nature, building upon their foundational elements. Leveraging the TCPM, we perform probabilistic sampling of topics, with the probability calculation method as follows:\nwhere  represents the vector used for probabilistic topic sampling,  and  are index variables,  denotes the -th topic, and  denotes the -th row vector in TCPM.  denotes the Hadamard product (element-wise multiplication).\nWe proceed to sample two to three topics, and for each topic, we randomly select a problem along with the associated KPs for that topic. This process yields a foundational KPs-Practice information set as the basis for our problem generation. Employing GPT-4, we use this set to generate new problems, with the prompt presented in Figure 4  ###reference_2###.\nFollowing the generation of problems, we conduct a quantitative evaluation to determine the quality of each problem by GPT-4 , prompt shown in Figure 9  ###reference_###.\nThis assessment is based on two criteria: the presence of the provided KPs and the absence of logical or factual errors. Each problem is assigned a quality score on a continuous scale from 0 to 1. Figure 4  ###reference_2### shows the score distribution of our synthetic questions, In assembling quality-assured questions, a threshold of 0.85 is instituted to screen the newly generated problems, save about 51% high-quality question. Figure 12  ###reference_### displays an example of a high-quality and a poor-quality problem originating from identical initial inputs.\n###figure_2###"
        },
        {
            "section_id": "3.5",
            "parent_section_id": "3",
            "section_name": "Solution Generation with Consensus Assessment",
            "text": "Prior work in the domain did not emphasize the quality control measures or relied solely on answers generated by models like GPT-4. By integrating a voting protocol, our methodology is designed to minimize the effects of noisy data and enhance the reliability of the answer-generation process. To ensure the correctness of generated answers, we employ a few-shot strategy where the reference problem is utilized as a demonstration input. To procure a diverse array of CoT rationales, we employ nucleus sampling, thereby invoking multiple prompts.\nSubsequently, a voting mechanism, derived from an enhanced version of the script from Gou et al. (2024b  ###reference_b20###), is employed to aggregate the solutions. This mechanism leverages packages such as sympy 111https://www.sympy.org  ###reference_www.sympy.org### to ensure that equivalent answers, albeit in different forms (e.g., fractions and decimals), are recognized as equal.\nAs illustrated in Figure 13  ###reference_###, some samples in our dataset include multiple sub-questions. We have excluded data with more than three sub-questions to maintain analytical clarity. For the multipart questions in our study, we extract the answers to sub-questions and apply a distinct voting mechanism for each. For each sub-question, we utilized GPT-4 with a temperature of 0.75 and a top-p of 0.95, resampling to obtain 10 potential responses, which then contribute to the formation of the Consensus Score Vector (CSV). Let  be a question- with  sub-questions. Then  is defined as\nwhere each  is the consensus score for the -th sub-question and is calculated based on the voting results from the potential responses. Each  is in the range [0, 1]."
        },
        {
            "section_id": "4",
            "parent_section_id": null,
            "section_name": "Experiment",
            "text": "This segment is based on the MATH (Hendrycks et al., 2021a  ###reference_b22###) dataset’s training set, which consists of 7,500 samples from high school math competitions, encompassing seven subjects and five difficulty levels. Utilizing the KPDDS approach on the seed problems, we generate a collection of 500K question-answer pairs.\nConsidering that voting may produce multiple answers to the same question, such as in extreme cases where one question has ten answers, this type of data may not be conducive to model learning. Therefore, by rewriting each original question and its answers (not necessarily correct), we can obtain non-repetitive question-answer pairs.\nAfter a thorough examination of the consensus voting strategies optimization, detailed in Section § 4.7  ###reference_###, we refined our dataset to include the most representative 253K data points.\nDrawing from the GSM8K (Cobbe et al., 2021b  ###reference_b15###) training set, which offers 7,473 samples of grade school math problems characterized by their 2 to 8 step solutions, we established the KPMATH-G component.\nWe simplified our approach due to the dataset’s emphasis on basic math operations.\nInstead of generating solutions through consensus assessment, we generated three potential solutions containing mathematical expressions for each question and then meticulously verified the accuracy of each expression.\nWe removed any data with incorrect expressions and transformed the remaining correct solutions into detailed, expression-free explanations. This process contributed an additional 613K data points to our dataset.\nTo ensure diversity and quality, we curated a comprehensive collection from various high-quality open-source mathematical reasoning datasets. The collection encompasses the complete datasets of MetaMath (Yu et al., 2023b  ###reference_b63###), MMIQC (Liu & Yao, 2024  ###reference_b32###), and Open-Platypus (Lee et al., 2023  ###reference_b28###), in addition to the training sets of GSM8K (Cobbe et al., 2021b  ###reference_b15###), MATH (Hendrycks et al., 2021a  ###reference_b22###), and TAL-SCQ5K-EN (math eval, 2023  ###reference_b38###), as well as the CoT subset of MathInstruct (Yue et al., 2024  ###reference_b64###). As there was significant overlap among these datasets, we applied min-hash techniques to minimize redundancy. We also omitted entries with excessively long numbers or those with empty answers. This careful curation resulted in a robust dataset of 711K data points.\nIt is noteworthy that these procedural steps of deduplication and filtering out excessively long numbers were also applied to KPMATH-M and KPMATH-G datasets.\nThrough these comprehensive measures, the final KPMATH-Plus dataset aggregates the three individual components into a substantial collection, culminating in a total of 1,576K data points that embody the richness and variety of mathematical problem-solving challenges."
        },
        {
            "section_id": "4.1",
            "parent_section_id": "4",
            "section_name": "Training Dataset Construction",
            "text": "This segment is based on the MATH (Hendrycks et al., 2021a  ###reference_b22###  ###reference_b22###) dataset’s training set, which consists of 7,500 samples from high school math competitions, encompassing seven subjects and five difficulty levels. Utilizing the KPDDS approach on the seed problems, we generate a collection of 500K question-answer pairs.\nConsidering that voting may produce multiple answers to the same question, such as in extreme cases where one question has ten answers, this type of data may not be conducive to model learning. Therefore, by rewriting each original question and its answers (not necessarily correct), we can obtain non-repetitive question-answer pairs.\nAfter a thorough examination of the consensus voting strategies optimization, detailed in Section § 4.7  ###reference_###  ###reference_###, we refined our dataset to include the most representative 253K data points.\nDrawing from the GSM8K (Cobbe et al., 2021b  ###reference_b15###  ###reference_b15###) training set, which offers 7,473 samples of grade school math problems characterized by their 2 to 8 step solutions, we established the KPMATH-G component.\nWe simplified our approach due to the dataset’s emphasis on basic math operations.\nInstead of generating solutions through consensus assessment, we generated three potential solutions containing mathematical expressions for each question and then meticulously verified the accuracy of each expression.\nWe removed any data with incorrect expressions and transformed the remaining correct solutions into detailed, expression-free explanations. This process contributed an additional 613K data points to our dataset.\nTo ensure diversity and quality, we curated a comprehensive collection from various high-quality open-source mathematical reasoning datasets. The collection encompasses the complete datasets of MetaMath (Yu et al., 2023b  ###reference_b63###  ###reference_b63###), MMIQC (Liu & Yao, 2024  ###reference_b32###  ###reference_b32###), and Open-Platypus (Lee et al., 2023  ###reference_b28###  ###reference_b28###), in addition to the training sets of GSM8K (Cobbe et al., 2021b  ###reference_b15###  ###reference_b15###), MATH (Hendrycks et al., 2021a  ###reference_b22###  ###reference_b22###), and TAL-SCQ5K-EN (math eval, 2023  ###reference_b38###  ###reference_b38###), as well as the CoT subset of MathInstruct (Yue et al., 2024  ###reference_b64###  ###reference_b64###). As there was significant overlap among these datasets, we applied min-hash techniques to minimize redundancy. We also omitted entries with excessively long numbers or those with empty answers. This careful curation resulted in a robust dataset of 711K data points.\nIt is noteworthy that these procedural steps of deduplication and filtering out excessively long numbers were also applied to KPMATH-M and KPMATH-G datasets.\nThrough these comprehensive measures, the final KPMATH-Plus dataset aggregates the three individual components into a substantial collection, culminating in a total of 1,576K data points that embody the richness and variety of mathematical problem-solving challenges."
        },
        {
            "section_id": "4.2",
            "parent_section_id": "4",
            "section_name": "Implementation Details",
            "text": "In our supervised fine-tuning (SFT) experiments, we employed chat message templates to transform question-answer pairs into the format: “User: {question}\\nEnclose the final answer using \\boxed{}.\\n\\nAssistant: {answer}”.\nWe utilized the LLaMa-Factory repository (Zheng et al., 2024  ###reference_b69###) to fine-tune the models for 3 epochs across all experiments.\nWe adopted a linear learning rate schedule with a  warm-up ratio. The maximum learning rate is 1e-5, except for DeepSeekMath, which is 5e-5.\nWe trained all models with BFloat16 numerical format, DeepSpeed ZeRO Stage3 (Rajbhandari et al., 2021  ###reference_b46###) and Flash-Attention 2 (Dao, 2023  ###reference_b16###).\nFor evaluation, we adopted the same template in SFT to prompt all questions. We employed greedy decoding with a maximum sequence length of 2,048 tokens."
        },
        {
            "section_id": "4.3",
            "parent_section_id": "4",
            "section_name": "Evaluation and Metrics",
            "text": "We evaluate our fine-tuned models on GSM8k (Cobbe et al., 2021a  ###reference_b14###) and MATH (Hendrycks et al., 2021b  ###reference_b23###), along with 4 out-of-distribution datasets, namely SVAMP (Patel et al., 2021  ###reference_b45###), ASDIV (Miao et al., 2021  ###reference_b39###), TabMWP (Lu et al., 2022  ###reference_b33###), MAWPS (Koncel-Kedziorski et al., 2016  ###reference_b27###).\nWe utilize an enhanced version of the script from Gou et al. (2024b  ###reference_b20###) to extract answers, parse expressions, and compare the equivalency of the answers.\nWe report the zero-shot PASS@1 accuracies of predicted answers.\nThe Hungarian Exam was first introduced by Grok-1 (xAI, 2023  ###reference_b60###), designed to evaluate the out-of-domain capabilities of mathematical models. We follow the evaluation method proposed by Paster (2023  ###reference_b42###), which divides this exam into 33 challenging problems suitable for model processing, and these answers require manual verification by humans."
        },
        {
            "section_id": "4.4",
            "parent_section_id": "4",
            "section_name": "Baselines",
            "text": "We present results from a range of state-of-the-art (SoTA) proprietary LLMs, including OpenAI’s GPT-4 (OpenAI, 2023  ###reference_b41###), ChatGPT (gpt-3.5-turbo), Google’s PaLM-2(Anil et al., 2023  ###reference_b3###), and Anthropic’s Claude-2(Anthropic, 2023  ###reference_b4###). Regarding open-source models, we consider base models such as LLaMA-2(Touvron et al., 2023  ###reference_b53###), DeepSeekMath(Shao et al., 2024  ###reference_b48###), Mistral(Jiang et al., 2023  ###reference_b26###), Llemma (Azerbayev et al., 2023  ###reference_b6###), and Qwen1.5(Bai et al., 2023  ###reference_b7###). Supervised Fine-Tuning (SFT) employs CoT rationales from the original GSM8k and MATH dataset (15k samples) for fine-tuning. We also showcase the performance of advanced models using SFT or RLHF on various mathematical reasoning datasets, including MAmmoTH (Yue et al., 2024  ###reference_b64###), WizardMath (Luo et al., 2023a  ###reference_b34###), Platypus-2 (Lee et al., 2023  ###reference_b28###), MetaMath (Yu et al., 2023b  ###reference_b63###) and MMIQC (Liu & Yao, 2024  ###reference_b32###)."
        },
        {
            "section_id": "4.5",
            "parent_section_id": "4",
            "section_name": "Main Results",
            "text": "Table 1  ###reference_### presents the results on six widely-used mathematical benchmarks, highlighting several key observations:\nKPMath-Plus significantly enhances the performance of multiple base models, with average accuracy improvements ranging from 10.6% to 36.9%. The KPMath-Plus-Qwen1.5-72B model achieves zero-shot PASS@1 accuracies of 87.0% on GSM8K and 58.3% on MATH, and also reaches promising performance on other math reasoning datasets, outperforming competitors in the 7B to 70B range.\nFigure 6  ###reference_### displays the Hungarian Exam Score versus GSM8K Performance of various models, with comparative data sourced from Paster (2023  ###reference_b42###). KPMath-Plus-Mistral-7B is notably behind only to GPT-4 (OpenAI, 2023  ###reference_b41###) and Grok-1 (xAI, 2023  ###reference_b60###). Additionally, compared to other fine-tuned models, it exhibits a well-balanced performance between the two test sets, suggesting that our model does not overfit the seed data.\nOur comprehensive analysis across multiple widely recognized math reasoning datasets confirms the superiority of KPMath-Plus in achieving the highest performance. Remarkably, KPMath-Plus maintains exceptional competitiveness even when compared to numerous 70B models, despite being based on a 7B architecture.\n###figure_3### ###figure_4###"
        },
        {
            "section_id": "4.6",
            "parent_section_id": "4",
            "section_name": "Ablation Study on Training Data Components and Size",
            "text": "We conducted an ablation study with the KPMath-Plus data components on the Mistral-7B model, training over 3 epochs.\nResults in Table 2  ###reference_### indicate that integrating KPMath-G, derived from the GSM8K dataset, enhances performance on GSM8K by 5% compared to training solely on MathMix.\nImprovements extend to SVAMP, ASDiv, and MAWPS, while a slight performance decline in MATH and TabMWP is observed, potentially due to their higher complexity.\nMoreover, combining KPMath-M, based on the MATH dataset, with MixMath consistently increases scores by over 1% across all datasets.\nMerging KPMath-G and KPMath-M significantly boosts overall performance, with gains of 6.4% on GSM8K and 3.5% on MATH, averaging a 4.1% improvement, illustrating the comprehensive benefits of our synthesized data within KPMath-Plus for mathematical reasoning.\nWe also investigated the impact of training data size on the KPMath-Plus-Mistral-7B model’s performance. As demonstrated in Figure 6  ###reference_###, model performance exhibits a logarithmic increase with the expansion of training data.\nThe model achieves impressive results with small data size and maintains a steady growth trend.\nThis study underlines the exceptional quality of our data and establishes a clear linkage between training data size and model performance, particularly in tackling complex tasks. In our future work, we aim to further explore larger and higher-quality datasets to continue improving model performance."
        },
        {
            "section_id": "5",
            "parent_section_id": null,
            "section_name": "Conclusion",
            "text": "In this paper, we propose a new data synthesis paradigm that is focused on the generation of large-scale, high-quality, symbolically-driven training datasets. Leveraging this paradigm, we have developed an extensive synthetic dataset tailored for mathematical reasoning. By utilizing this data set, our fine-tuned model achieved excellent performance in multiple data sets including MATH and GSM8K, and the performance exceeded all 7B to 70B competitors. Our research underscores the efficacy of integrating key points in data synthesis and applying stringent quality control protocols to both questions and answers."
        }
    ]
}