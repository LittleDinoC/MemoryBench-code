{
    "title": "Semantic Map-based Generation of Navigation Instructions",
    "abstract": "We are interested in the generation of navigation instructions, either in their own right or as training material for robotic navigation task.\nIn this paper, we propose a new approach to navigation instruction generation by framing the problem\nas an image captioning task using semantic maps as visual input.\nConventional approaches employ a sequence of panorama images to generate navigation instructions.\nSemantic maps abstract away from visual details and fuse the information in multiple panorama images into a single top-down representation, thereby reducing computational complexity to process the input.\nWe present a benchmark dataset for instruction generation using semantic maps, propose an initial model and ask human subjects to manually assess the quality of generated instructions.\nOur initial investigations show promise in using semantic maps for instruction generation instead of a sequence of panorama images, but there is vast scope for improvement.\nWe release the code for data preparation and model training at https://github.com/chengzu-li/VLGen.\n\n\n\nKeywords:â€‰semantic map, navigation instruction generation, Room2Room",
    "sections": [
        {
            "section_id": "1",
            "parent_section_id": null,
            "section_name": "1.   Introduction",
            "text": "Vision and Language Navigation (VLN) is a task that involves an agent navigating in a physical environment in response to natural language instructions (Wu et al., 2021  ###reference_b69###).\nThe data annotation for the VLN task is time-consuming and costly to scale up, and\nthe development of models that address the task is severely limited by the availability of training data (Gu et al., 2022  ###reference_b16###).\nNavigation instruction generation (VL-GEN) is the reverse of the VLN task in that it generates natural language instructions for a path in the virtual (or physical) environment, which is helpful for interactions with users and explainability.\nPrevious work has also demonstrated the effectiveness of VL-GEN in improving the performance of VLN systems such as the Speaker-Follower model (Fried et al., 2018  ###reference_b14###) and Env Drop (Tan et al., 2019  ###reference_b57###).\nThis paper explores the VL-GEN task of generating navigation instruction framing it as an image captioning task.\nVL-GEN requires the model to generate language instruction in the context of the physical environment, grounding objects references and action instructions to the given space.\nPrevious studies use photo-realistic RGB panoramic images as the visual input; they frame VL-GEN as the end-to-end task of generating text from a sequence of photo-realistic RGB images (Fried et al., 2018  ###reference_b14###; Tan et al., 2019  ###reference_b57###; Wang et al., 2022d  ###reference_b66###).\nWhile Zhao et al. (2021  ###reference_b75###) report that the overall quality of instructions generated with end-to-end models is only slightly better than that of template-based generation, the application of object grounding to the panoramic images achieves a better result Wang et al. (2022d  ###reference_b66###).\nThe existing approach to this task has two shortcomings.\nFrom the perspective of representation, using panoramic images is resource-intensive as it requires processing of multiple image inputs corresponding to different points on the path.\nSecond, panoramic images contain many details that are irrelevant for the task.\nThe model has to learn to interpret the environments from RGB panoramas, such as object recognition, and generate instructions at the same time.\nAs it is natural for humans to understand navigation instructions from a top-down map (as in Google Maps) Paz-Argaman et al. (2024  ###reference_b47###), we propose to separate the VL-GEN task into two steps: 1) environment interpretation, which is addressed by semantic SLAM in physical robotic systems Chaplot et al. (2020  ###reference_b7###), and 2) spatial reasoning.\nIn this paper, we focus on the second step and explore the feasibility of using top-down semantic map for VL-GEN.\n###figure_1### Our research question is whether it is feasible to use the top-down semantic map (a single RGB image) as our main source of information.\nWe also explore which other data sources, in addition to the semantic map, can further improve performance.\nTo address this question, we formalize the VL-GEN task as image captioning with the input of a semantic map with the path (see Figure 1  ###reference_###).\nWe extract the images of top-down maps from the Habitat simulator (Savva et al., 2019  ###reference_b51###) based on Room-to-Room dataset (Anderson et al., 2018  ###reference_b3###) and VLN-CE (Krantz et al., 2020  ###reference_b32###).\nOur key contributions and findings include the following:\nWe extend the R2R dataset with semantic maps, providing a new benchmark dataset and a baseline that demonstrates the feasibility of using semantic maps for VL-GEN task.\nWe demonstrate experimentally with both automatic and human evaluations that including additional information (namely, region, action, and prompt) leads to more accurate and robust navigation instructions than using only semantic maps.\nWe also conduct an intrinsic human evaluation of the quality of the generated instructions with fine-grained error analysis."
        },
        {
            "section_id": "2",
            "parent_section_id": null,
            "section_name": "2.   Task Definition and Data",
            "text": "A semantic map  is a top-down view of the scene , which contains a path , represented as a sequence of points connected by a line, and a set of  objects .\nIn light of the success of image captioning models Li et al. (2022  ###reference_b34###); Wang et al. (2022b  ###reference_b64###), we frame the VL-GEN task as image captioning task.\nGiven a semantic map , the task is to generate a natural language description  that describes the path  shown.\nOur task description replaces the photo-realistic RGB images used previously, with a semantic map.\nThe processing of RGB images is resource-intensive, while our task definition has the advantage of abstracting away from the object recognition task, concentrating on the instruction generation task instead.\nWe also experiment with providing the model with additional features of the navigation path beyond the semantic maps alone, including actions, names of regions, and panoramic images.\nThere is a fixed set of action types (left, right, straight, stop), which are determined heuristically from the path shape at each navigation point.\nFor each navigation point, we use the name of its associated region (e.g., hallway, meeting room).\nWe do not think that panoramic images constitute ideal input to the system,\nbut it is possible that they may provide additional visual information not shown in the map.\nTherefore, we also conduct experiments with panoramic images as part of the input information to the model.\nWe extract semantic maps, region and action information from the Habitat (Savva et al., 2019  ###reference_b51###; Krantz et al., 2020  ###reference_b32###) simulation environment.\nIn a deployed robot, it may be obtained with a semantic SLAM component Chaplot et al. (2020  ###reference_b7###).\nEach object type on the map is represented in a unique color.\nWe adopt the navigation paths and human annotations from the R2R dataset (Anderson et al., 2018  ###reference_b3###).\nPanoramic images in RGB are obtained from the Matterport3D simulator (Chang et al., 2017  ###reference_b6###) at each discrete navigation point.\nAn example of the new dataset derived from R2R, including a semantic map with a path, language instruction, panorama images, actions, and region names, is shown in Figure 1  ###reference_###.\nStatistics about the semantic maps are presented in Table 1  ###reference_###.\nThe data splits we use are inherited from the original R2R dataset.\nThe difference between seen validation set and the unseen validation set in R2R is whether the room environment is included in the train set.111Further details on the dataset are presented in Appendix A.1  ###reference_###."
        },
        {
            "section_id": "3",
            "parent_section_id": null,
            "section_name": "3.   Method",
            "text": "Motivated by the success of the multimodal pre-trained models, we construct a multimodal text generation model using BLIP222The implementation is based on the Huggingface transformers library (Wolf et al., 2019  ###reference_b68###): Salesforce/blip-image-captioning-base  ###reference_ge-captioning-base### (Li et al., 2022  ###reference_b34###).\nFigure 2  ###reference_### illustrates the architecture of the proposed model with modules that process different inputs; these will be described in Section 3.1  ###reference_###.\nIn Section 3.2  ###reference_###, we describe the augmentations applied to the BLIP model in our experiments.\n###figure_2### The semantic map forms the main input used in all experiments.\nIt is encoded by the image encoder in the BLIP model.\nWe first resize the image by nearest sampling to  and then feed it to the vision transformer with patch size 16.\nRegion names and actions are frequently mentioned in human navigation instructions.\nTo give the model information about the relevant region names, we represent them as a sequence of strings for each navigation point.\nWe use a text encoder from the pre-trained BLIP model to represent the region names.\nThe region embedding for each point is obtained by applying a mean pooling operation to the word embeddings.\nFor actions, we apply an embedding layer to the discrete action values and get action embeddings in the same dimension as the region embedding.\nWe add the region and the action embeddings together at each point and use a 3-layer LSTM model to embed the sequential information along the navigation path.\nBased on our analysis, visual object properties such as color and shape are mentioned in more than 25% of human instructions.\nAs semantic maps only include object types but not the properties of visual objects, we augment the model input with panoramic images.\nThis might enable the model to learn the visual properties mentioned in the instructions.\nWe initialize the image encoder based on the pre-trained image encoder in BLIP model.\nWe freeze its parameters during training because the model is pre-trained on photo-realistic images, which we believe endows the model with capabilities of recognizing panoramic images in our case.\nIn order to increase the flexibility of the visual embedding, we apply an additional MLP with two linear layers on top of the panoramic vision encoder.\nFollowing the methods in the video captioning task (Tang et al., 2021  ###reference_b58###; Luo et al., 2022  ###reference_b42###), we treat the panoramas as discrete frames and use the mean average of all panoramic embeddings to represent the panorama information of the navigation path.\nFinally, the embedded input representations are added together to form the input to the decoder that outputs natural language instructions.\nContrastive learning is an effective method used in self-supervised learning for visual representation learning Radford et al. (2021  ###reference_b48###); Li et al. (2022  ###reference_b34###) and multimodal pre-training in BLIP (Li et al., 2022  ###reference_b34###).\nWe investigate the effectiveness of introducing contrastive training for navigation instruction generation task as an auxiliary loss.\nWe define the positive examples  as pairs of the combined input embedding and the instruction embedding.\nThe negative examples  consist of the pairs of the input embedding and the embedding of a randomly sampled instruction.\nFollowing CLIP (Radford et al., 2021  ###reference_b48###), we multiply the multimodal input matrix  and textual instruction matrix  to obtain the predicted compatible matrix  between inputs and labels and then compute the CrossEntropy loss on  with the ground-truth correspondence .\nThe prompting of LLMs has demonstrated its effectiveness across various domains in previous works (Li and Liang, 2021  ###reference_b36###; Liu et al., 2021  ###reference_b41###; Tang et al., 2022  ###reference_b59###; Keicher et al., 2022  ###reference_b28###; Song et al., 2022  ###reference_b54###).\nWe generate the prompt from a template, which describes the nearby objects and regions, such as Starting from the dark yellow point near sofa cushion in the living room region.\nWe tune the model with prompting and feed the prompt template to the decoder during inference.\nWe argue that prompting can benefit the generation task in two ways.\nFirst, it can help visual-language grounding because the prompting template describes nearby landmarks and regions.\nSecond, at inference time, the instructions that are generated are conditioned on the prompt template in an auto-regressive way, resulting in more controllable generation in VL-GEN task."
        },
        {
            "section_id": "3.1",
            "parent_section_id": "3",
            "section_name": "3.1.   Model Input",
            "text": "The semantic map forms the main input used in all experiments. It is encoded by the image encoder in the BLIP model. We first resize the image by nearest sampling to  and then feed it to the vision transformer with patch size 16. Region names and actions are frequently mentioned in human navigation instructions. To give the model information about the relevant region names, we represent them as a sequence of strings for each navigation point. We use a text encoder from the pre-trained BLIP model to represent the region names. The region embedding for each point is obtained by applying a mean pooling operation to the word embeddings. For actions, we apply an embedding layer to the discrete action values and get action embeddings in the same dimension as the region embedding. We add the region and the action embeddings together at each point and use a 3-layer LSTM model to embed the sequential information along the navigation path. Finally, the embedded input representations are added together to form the input to the decoder that outputs natural language instructions."
        },
        {
            "section_id": "3.2",
            "parent_section_id": "3",
            "section_name": "3.2.   Model Augmentation",
            "text": "Contrastive learning is an effective method used in self-supervised learning for visual representation learning Radford et al. (2021  ###reference_b48###  ###reference_b48###); Li et al. (2022  ###reference_b34###  ###reference_b34###) and multimodal pre-training in BLIP (Li et al., 2022  ###reference_b34###  ###reference_b34###).\nWe investigate the effectiveness of introducing contrastive training for navigation instruction generation task as an auxiliary loss.\nWe define the positive examples  as pairs of the combined input embedding and the instruction embedding.\nThe negative examples  consist of the pairs of the input embedding and the embedding of a randomly sampled instruction.\nFollowing CLIP (Radford et al., 2021  ###reference_b48###  ###reference_b48###), we multiply the multimodal input matrix  and textual instruction matrix  to obtain the predicted compatible matrix  between inputs and labels and then compute the CrossEntropy loss on  with the ground-truth correspondence .\nThe prompting of LLMs has demonstrated its effectiveness across various domains in previous works (Li and Liang, 2021  ###reference_b36###  ###reference_b36###; Liu et al., 2021  ###reference_b41###  ###reference_b41###; Tang et al., 2022  ###reference_b59###  ###reference_b59###; Keicher et al., 2022  ###reference_b28###  ###reference_b28###; Song et al., 2022  ###reference_b54###  ###reference_b54###).\nWe generate the prompt from a template, which describes the nearby objects and regions, such as Starting from the dark yellow point near sofa cushion in the living room region.\nWe tune the model with prompting and feed the prompt template to the decoder during inference.\nWe argue that prompting can benefit the generation task in two ways.\nFirst, it can help visual-language grounding because the prompting template describes nearby landmarks and regions.\nSecond, at inference time, the instructions that are generated are conditioned on the prompt template in an auto-regressive way, resulting in more controllable generation in VL-GEN task."
        },
        {
            "section_id": "4",
            "parent_section_id": null,
            "section_name": "4.   Experiments",
            "text": "We perform two evaluations over experiments: an automatic evaluation according to performance on the task (extrinsic) and a human evaluation of the quality of the instructions (intrinsic).\nThese evaluations can tell us about the influence of region, actions, prompting, and contrastive loss on the quality of the instructions both quantitatively and qualitatively."
        },
        {
            "section_id": "4.1",
            "parent_section_id": "4",
            "section_name": "4.1.   Experimental setup",
            "text": "We train the model using the train split of the R2R dataset and evaluate it both on validation seen and unseen sets.\nWe use the BLIP-base model for experiments.\nWe setup the baselines with different combinations of the input: 1) top-down semantic map (TD) 2) + regions (Reg) and actions (Act); 3) + panoramic images (Pano). We also experiment with contrastive loss and prompting, making 9 system variants for experiments in total.\nIn the intrinsic human evaluation, we use a Latin Square design of size 5.\nWe therefore compare only a subset of the above system variants with different combinations of input (TD, TD+Reg+Act and TD+Reg+Act+Pano), and prompting and contrastive loss on TD+Reg+Act."
        },
        {
            "section_id": "4.2",
            "parent_section_id": "4",
            "section_name": "4.2.   Human Participants and Procedure",
            "text": "For the human experiment, we recruit 5 evaluators who have never contributed to or been involved in the project before under the consent from the Ethics Committee. The evaluation workload for each participant is designed to be within 30 minutes for them to concentrate on the task. We also provide two specific illustration examples about the evaluation task for the human participants.\nThe evaluation materials consist of 15 navigation paths in the unseen environments, randomly sampled.\nThe experiment is performed online using an evaluation interface.\nThe participants are shown the semantic map with the path as well as panorama images.\nThey are asked to assign a score from 0 (worst) to 10 (best) based on the quality of the instruction candidates generated by different systems."
        },
        {
            "section_id": "4.3",
            "parent_section_id": "4",
            "section_name": "4.3.   Automatic Evaluation Metrics",
            "text": "In the automatic evaluation, we compare the performance of 9 system variants based on an automatic metric SPICE (Semantic Propositional Image Caption Evaluation) (Anderson et al., 2016  ###reference_b2###), following Zhao et al. (2021  ###reference_b75###).\nSPICE is a metric used to evaluate the quality of image captions, focusing on the semantic content of captions.\nIt identifies semantic propositions within the parse trees and compares the semantic propositions from the generated caption with those from the reference captions.\nWhen comparing different systems, we use the two-sided permutation test to see if the arithmetic means of the two systemsâ€™ performances are equal.\nIf the p-value is larger than 0.05, we consider the performance of the two systems to be not significantly different."
        },
        {
            "section_id": "4.4",
            "parent_section_id": "4",
            "section_name": "4.4.   Evaluation Results",
            "text": "Table 2  ###reference_### shows the SPICE and human evaluation scores in seen and unseen environments.\nAs expected, the models perform better in seen than in unseen setting by 3.88 in SPICE score on average across all 9 systems.\nFor both settings, we observe that using region and action information with the prompt improves the modelâ€™s performance with , while contrastive learning does not seem to help.\nAdding panoramic images tends to improve the performance, but not significantly ().\nWhen comparing with previous methods in SPICE score, our systems (17.84/22.14) perform on par or even achieve higher SPICE scores than Speaker Fol. Fried et al. (2018  ###reference_b14###) (17.0/18.7) and EnvDrop Tan et al. (2019  ###reference_b57###) (18.1/20.2) on unseen/seen settings.\nIn the results for the human evaluation, shown in Table 2  ###reference_###, we observe that using the semantic map as the only input results in the lowest average score across all systems (3.42).\nThis repeats the observations from the automatic evaluation.\nUsing regions, actions, and panoramas achieves the highest rating (4.36) which is significantly better than the baseline (p=0.05), followed by using regions, actions, and prompts (4.29).\nHowever, incorporating Pano (4.36) alongside TD+Reg+Act (4.20) does not show a noteworthy difference.\nIn addition to the results above, we were also curious about the degree to which our automatic results in SPICE correlate with the human judgments.\nWe measure a Kendall  correlation between SPICE and human evaluation results of 0.6 and conclude that this is satisfactory, justifying the use of SPICE for automatic evaluation.333We also computed BLEU and ROUGE scores, however they show lower correlation with the human-assigned scores, which are omitted here.\nOur findings indicate that incorporating more information in different modalities tends to improve the performance for the generation task.\nOur semantic map abstracts information in a way that is useful for current systems, although it consists of only a single image.\nMost of our system variants that do not use panorama images performs on-par with the existing LSTM-based end-to-end approaches that use only panoramic images.\nHowever, the absolute performance of all models is still low, indicating that there is much room for improvement."
        },
        {
            "section_id": "4.5",
            "parent_section_id": "4",
            "section_name": "4.5.   Error Analysis",
            "text": "Further to human evaluation score, we manually analyze the quality of the instructions generated by the same 5 system variants according to the following four aspects:\nIncorrectness: Does the prediction contain incorrect information?\nHallucination: Does the prediction contain a description not corresponding to the input?\nRedundancy: Does the prediction contain redundant expressions and information?\nLinguistic problems: Is the generated instruction grammatically wrong or not fluent?\nFor each experimental setting, we randomly select 15 examples.\nThe counts for each error type are given in Table 3  ###reference_###.\nWe can see that the systems that do not use prompting or panorama images contain errors in all cases.\nMost of these errors are caused by hallucinations.\nAnalyzing hallucinations further, we find that the action descriptions are most prone to hallucinations, such as when left and right are confused with each other.\nWhen regions and actions are used as input, the number of hallucinations in action descriptions goes down, but remains high in regions.\nApart from changing the input information,\nwhen we train the model with prompting, the resulting instructions are less likely to include hallucinations in terms of actions and objects.\nYet after introducing the contrastive loss, it causes redundancy and linguistic problems in the predictions.\nThe language quality problems mainly consist of spelling mistakes in objects and regions, and punctuation errors when introducing the prompt and contrastive loss for training.\nThis may be because the contrastive loss influences the CrossEntropy loss and thus interferes with the language generation task."
        },
        {
            "section_id": "5",
            "parent_section_id": null,
            "section_name": "5.   Conclusion",
            "text": "Our longer-term goal is to build mobile robots with spatial awareness and reasoning capabilities which can follow natural language instructions and express their intentions in natural language.\nWe propose to use semantic maps as the intermediate representation for spatial reasoning as it is a human-interpretable and light-weight approach that encodes information necessary for the navigation in a single abstract image.\nIn this work, we create the dataset with top-down semantic maps for R2R corpus and reframe instruction generation task as image captioning, using abstract top-down semantic map as main input. We set a baseline for the instruction generation from semantic map input. Our experimental results show that using the top-down semantic map performs on-par with the end-to-end methods that use sequence of panorama images as input."
        }
    ]
}